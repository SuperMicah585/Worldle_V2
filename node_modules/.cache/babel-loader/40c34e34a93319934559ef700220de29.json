{"ast":null,"code":"var _jsxFileName = \"/Users/mphelps/react-app/TasQDashboard-main/src/components/Grid.js\";\nimport React from \"react\"; //import { render } from \"@testing-library/react\";\n\nimport \"./Grid.css\";\nimport { evaluate_Guess, evaluateGuess } from \"../evaluate_guess\";\nimport Popup from \"./Win_Screen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar m = false; //trigger set\n\nvar p = 0; // divide this number by 54 to know how many times the page has been rendered(including 1st load)\n\nvar unique_id = -1; //counter for boxes\n\nvar x = 0; //who knows\n\nvar enter_tracker = 1; //counter for number of guesses\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    {\n      unique_id++;\n    }\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      id: unique_id,\n      style: {\n        backgroundColor: \"black\"\n      } //need to be able to increment ID so each square is unique, but can't iterate because it is rendered everytime keyboard is pressed\n      ,\n      className: \"squared\",\n      onClick: () => console.log(\"this does nothing\"),\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass KeySquare extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"square\",\n      onClick: () => this.props.onClick() //runs  through function handleclick(this.props.value) = onClick={() => this.handleClick(this.props.value)}\n      ,\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(29).fill(null)\n    };\n  }\n\n  renderSquare(i) {\n    p++;\n    return /*#__PURE__*/_jsxDEV(KeySquare, {\n      value: i,\n      onClick: () => this.handleClick(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n  handleClick(i) {\n    //functionality for the Grid\n    const squares = this.state.squares.slice(); //console.log(this.state.squares.slice()) ;\n\n    if (i == 'Enter' && x / enter_tracker == 5) {\n      enter_tracker++;\n      const guess = squares.slice(x - 5, x);\n      const response_Feedback = evaluateGuess(['R', 'E', 'A', 'C', 'T'], guess, enter_tracker);\n\n      const vrr = (async () => await evaluateGuess(['R', 'E', 'A', 'C', 'T'], guess, enter_tracker))();\n\n      if (response_Feedback === \"You Win!\") {\n        //set as true   m = true;\n        console.log(\"You win!\");\n      }\n\n      if (response_Feedback === \"this is not a word\") {\n        console.log(\"this is not a word\");\n      }\n\n      for (var z = 0; z < response_Feedback.length; z++) {\n        var c = response_Feedback.charAt(z); //activate color for the button\n\n        if (c === 'O') {\n          // position in string *(1-enter_tracker)*290)+58) +(10*(1-enter_tracket))\n          //every time rendered goes up by (*60). 0-60. 58-118\n          // p keep trackf of renders.\n          // 0 -58, 60 -118, 120 -178\n          var yellow_color = p / 54 * 60 - 2 - (58 - 10 * (enter_tracker - 2) / 58 * 58) + z * 2; //0/58, 5/29, 10/29, 15/29, 20/29\n\n          console.log(document.getElementById(yellow_color));\n          document.getElementById(yellow_color).style.background = \"#ddc98d\"; //need to access button in square compenent\n        }\n\n        if (c === 'X') {\n          var green_color = p / 54 * 60 - 2 - (58 - 10 * (enter_tracker - 2) / 58 * 58) + z * 2;\n          document.getElementById(green_color).style.background = \"#00d084\";\n        }\n      } //make Squares[x-1] to squares[x-5] a string and run it through checks from evaluate_guess. == guess\n      //Guess_counter == enter_tracker. Code == 5 letter word key. Guess == 5 letter word guess\n      //If character is 0 and no other characters of that type in the word, then yellow should not show up on guess or any other guess.\n\n    } else if (i == 'delete' && (x % 5 != 0 || x / enter_tracker == 5)) {\n      x--;\n      squares[x] = null;\n      this.setState({\n        squares: squares\n      });\n    } else if (i != 'delete' && i != 'Enter' && x / enter_tracker != 5) {\n      squares[x] = i; //key get data from keyboard to show up on the GRID. Use squares[Grid index]\n\n      this.setState({\n        squares: squares\n      });\n      this.setState({\n        color: \"rgb(0, 191, 255)\"\n      });\n      x++;\n    }\n  }\n\n  renderSquared(i) {\n    //adds button functionality to Grid\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.state.squares[i] //Creates the Grid\n      //add functionality to squares so that they can change color\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Popup, {\n        trigger: m,\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" You Win!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Grids\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [this.renderSquared(0), this.renderSquared(1), this.renderSquared(2), this.renderSquared(3), this.renderSquared(4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [this.renderSquared(5), this.renderSquared(6), this.renderSquared(7), this.renderSquared(8), this.renderSquared(9)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [this.renderSquared(10), this.renderSquared(11), this.renderSquared(12), this.renderSquared(13), this.renderSquared(14)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [this.renderSquared(15), this.renderSquared(16), this.renderSquared(17), this.renderSquared(18), this.renderSquared(19)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [this.renderSquared(20), this.renderSquared(21), this.renderSquared(22), this.renderSquared(23), this.renderSquared(24)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [this.renderSquared(25), this.renderSquared(26), this.renderSquared(27), this.renderSquared(28), this.renderSquared(29)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyboard\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [this.renderSquare('Q'), this.renderSquare('W'), this.renderSquare('E'), this.renderSquare('R'), this.renderSquare('T'), this.renderSquare('Y'), this.renderSquare('U'), this.renderSquare('I'), this.renderSquare('O'), this.renderSquare('P')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [this.renderSquare('A'), this.renderSquare('S'), this.renderSquare('D'), this.renderSquare('F'), this.renderSquare('H'), this.renderSquare('J'), this.renderSquare('K'), this.renderSquare('L')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [this.renderSquare('Enter'), this.renderSquare('Z'), this.renderSquare('X'), this.renderSquare('C'), this.renderSquare('V'), this.renderSquare('B'), this.renderSquare('N'), this.renderSquare('M'), this.renderSquare('delete')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/Users/mphelps/react-app/TasQDashboard-main/src/components/Grid.js"],"names":["React","evaluate_Guess","evaluateGuess","Popup","m","p","unique_id","x","enter_tracker","Square","Component","constructor","props","render","backgroundColor","console","log","value","KeySquare","state","onClick","Grid","squares","Array","fill","renderSquare","i","handleClick","slice","guess","response_Feedback","vrr","z","length","c","charAt","yellow_color","document","getElementById","style","background","green_color","setState","color","renderSquared"],"mappings":"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","sourcesContent":["import React from \"react\";\n//import { render } from \"@testing-library/react\";\n\nimport \"./Grid.css\";\nimport { evaluate_Guess, evaluateGuess } from \"../evaluate_guess\";\nimport Popup from \"./Win_Screen\";\n\n\nvar m = false; //trigger set\nvar p = 0; // divide this number by 54 to know how many times the page has been rendered(including 1st load)\nvar unique_id = -1; //counter for boxes\nvar x=0; //who knows\nvar enter_tracker =1; //counter for number of guesses\n\n\n\nclass Square extends React.Component {\n\n  constructor(props) {\n  super(props);\n\n}\n\n    render() {\n        {unique_id++}\n      return (\n\n        <button id={unique_id} style={{ backgroundColor: \"black\" }}\n                                //need to be able to increment ID so each square is unique, but can't iterate because it is rendered everytime keyboard is pressed\n          className=\"squared\"\n          onClick={() => console.log(\"this does nothing\")}\n        >\n          {this.props.value}\n        </button>\n      );\n    }\n\n  }\n\n  class KeySquare extends React.Component {\n\n    constructor(props) {\n    super(props);\n    this.state = {\n      value: null,\n    };\n  }\n\n      render() {\n        return (\n          <button\n          className=\"square\"\n           onClick={() => this.props.onClick()} //runs  through function handleclick(this.props.value) = onClick={() => this.handleClick(this.props.value)}\n           >\n          {this.props.value}\n        </button>\n        );\n      }\n    }\n\n\n\n  class Grid extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        squares: Array(29).fill(null),\n      };\n    }\n\n    renderSquare(i) {\n      p++;\n      return(\n      <KeySquare\n      value={i}\n      onClick={() => this.handleClick(i)}\n      />\n\n    );\n    }\n\n\n\n\n      handleClick(i) { //functionality for the Grid\n\n      const squares = this.state.squares.slice();\n      //console.log(this.state.squares.slice()) ;\n\n      if(i=='Enter' && x/enter_tracker==5){\n          enter_tracker++;\n        const guess =  squares.slice(x-5,x);\n        const response_Feedback = evaluateGuess(['R','E', 'A', 'C','T'], guess,enter_tracker )\n        const vrr = ((async () => await evaluateGuess(['R','E', 'A', 'C','T'], guess,enter_tracker ))());\n        if(response_Feedback === \"You Win!\"){\n\n\n          //set as true   m = true;\n          console.log(\"You win!\");\n\n        }\n\n       if(response_Feedback === \"this is not a word\"){\n\n         console.log(\"this is not a word\");\n       }\n\n      for (var z=0; z<response_Feedback.length; z++){\n\n        var c = response_Feedback.charAt(z);\n          //activate color for the button\n        if (c === 'O'){\n          // position in string *(1-enter_tracker)*290)+58) +(10*(1-enter_tracket))\n          //every time rendered goes up by (*60). 0-60. 58-118\n          // p keep trackf of renders.\n          // 0 -58, 60 -118, 120 -178\n          var yellow_color = ((((p/54)*60)-2) - (58-(((10*(enter_tracker-2))/58) *58)) + (z*2))\n\n          //0/58, 5/29, 10/29, 15/29, 20/29\n\n        console.log(document.getElementById(yellow_color));\n\n          document.getElementById(yellow_color).style.background=\"#ddc98d\"; //need to access button in square compenent\n        }\n        if (c === 'X'){\n          var green_color = ((((p/54)*60)-2) - (58-(((10*(enter_tracker-2))/58) *58)) + (z*2))\n          document.getElementById(green_color).style.background=\"#00d084\";\n\n        }\n      }\n\n\n          //make Squares[x-1] to squares[x-5] a string and run it through checks from evaluate_guess. == guess\n          //Guess_counter == enter_tracker. Code == 5 letter word key. Guess == 5 letter word guess\n          //If character is 0 and no other characters of that type in the word, then yellow should not show up on guess or any other guess.\n        }\n\n      else if(i=='delete' && (x%5 != 0 || x/enter_tracker==5)){\n        x--;\n        squares[x] = null;\n        this.setState({squares: squares});\n  }\n\n\n\n      else if (i != 'delete'  && i != 'Enter' && x/enter_tracker!=5){\n      squares[x] = i; //key get data from keyboard to show up on the GRID. Use squares[Grid index]\n      this.setState({squares: squares});\n      this.setState({color: \"rgb(0, 191, 255)\"})\n      x++;\n\n    }\n    }\n\n    renderSquared(i) { //adds button functionality to Grid\n      return (\n\n\n\n        <Square\n          value={this.state.squares[i]}\n\n       //Creates the Grid\n        //add functionality to squares so that they can change color\n        />\n\n      );\n    }\n\n\n    render() {\n\n\n      return (\n        <div>\n\n        <Popup trigger ={m}>\n        <h3> You Win!</h3>\n        </Popup>\n\n\n        <div className = \"Grids\">\n          <div className=\"board-row\">\n            {this.renderSquared(0)}\n            {this.renderSquared(1)}\n            {this.renderSquared(2)}\n            {this.renderSquared(3)}\n            {this.renderSquared(4)}\n            </div>\n            <div className=\"board-row\">\n            {this.renderSquared(5)}\n            {this.renderSquared(6)}\n            {this.renderSquared(7)}\n            {this.renderSquared(8)}\n            {this.renderSquared(9)}\n          </div>\n          <div className=\"board-row\">\n          {this.renderSquared(10)}\n          {this.renderSquared(11)}\n          {this.renderSquared(12)}\n          {this.renderSquared(13)}\n          {this.renderSquared(14)}\n          </div>\n          <div className=\"board-row\">\n          {this.renderSquared(15)}\n          {this.renderSquared(16)}\n          {this.renderSquared(17)}\n          {this.renderSquared(18)}\n          {this.renderSquared(19)}\n            </div>\n          <div className=\"board-row\">\n          {this.renderSquared(20)}\n          {this.renderSquared(21)}\n          {this.renderSquared(22)}\n          {this.renderSquared(23)}\n          {this.renderSquared(24)}\n          </div>\n                <div className=\"board-row\">\n          {this.renderSquared(25)}\n          {this.renderSquared(26)}\n          {this.renderSquared(27)}\n          {this.renderSquared(28)}\n          {this.renderSquared(29)}\n          </div>\n        </div>\n\n        <div className = \"keyboard\">\n          <div className=\"board-row\">\n            {this.renderSquare('Q')}\n            {this.renderSquare('W')}\n            {this.renderSquare('E')}\n            {this.renderSquare('R')}\n            {this.renderSquare('T')}\n            {this.renderSquare('Y')}\n            {this.renderSquare('U')}\n            {this.renderSquare('I')}\n            {this.renderSquare('O')}\n            {this.renderSquare('P')}\n          </div>\n          <div className=\"board-row\">\n          {this.renderSquare('A')}\n          {this.renderSquare('S')}\n          {this.renderSquare('D')}\n          {this.renderSquare('F')}\n          {this.renderSquare('H')}\n          {this.renderSquare('J')}\n          {this.renderSquare('K')}\n          {this.renderSquare('L')}\n          </div>\n          <div className=\"board-row\">\n          {this.renderSquare('Enter')}\n          {this.renderSquare('Z')}\n          {this.renderSquare('X')}\n          {this.renderSquare('C')}\n          {this.renderSquare('V')}\n          {this.renderSquare('B')}\n          {this.renderSquare('N')}\n          {this.renderSquare('M')}\n          {this.renderSquare('delete')}\n          </div>\n        </div>\n        </div>\n      );\n    }\n  }\n\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}