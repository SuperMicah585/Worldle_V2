{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { Constants } from \"./constants/constants\";\nimport { Autowired, Bean, Optional, PostConstruct, PreDestroy } from \"./context/context\";\nimport { ExcelFactoryMode } from \"./interfaces/iExcelCreator\";\nimport { SideBarDefParser } from \"./entities/sideBar\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { ClientSideRowModelSteps } from \"./interfaces/iClientSideRowModel\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { iterateObject, removeAllReferences } from \"./utils/object\";\nimport { exists, missing } from \"./utils/generic\";\nimport { camelCaseToHumanText } from \"./utils/string\";\nimport { doOnce } from \"./utils/function\";\n\nvar GridApi = function () {\n  function GridApi() {\n    this.detailGridInfoMap = {};\n    this.destroyCalled = false;\n  }\n\n  GridApi.prototype.registerOverlayWrapperComp = function (overlayWrapperComp) {\n    this.overlayWrapperComp = overlayWrapperComp;\n  };\n\n  GridApi.prototype.registerHeaderRootComp = function (headerRootComp) {\n    this.headerRootComp = headerRootComp;\n  };\n\n  GridApi.prototype.registerSideBarComp = function (sideBarComp) {\n    this.sideBarComp = sideBarComp;\n  };\n\n  GridApi.prototype.init = function () {\n    var _this = this;\n\n    switch (this.rowModel.getType()) {\n      case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:\n        this.clientSideRowModel = this.rowModel;\n        break;\n\n      case Constants.ROW_MODEL_TYPE_INFINITE:\n        this.infiniteRowModel = this.rowModel;\n        break;\n\n      case Constants.ROW_MODEL_TYPE_SERVER_SIDE:\n        this.serverSideRowModel = this.rowModel;\n        break;\n    }\n\n    this.ctrlsService.whenReady(function () {\n      _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();\n    });\n  };\n  /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n\n\n  GridApi.prototype.__getAlignedGridService = function () {\n    return this.alignedGridsService;\n  };\n\n  GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {\n    this.detailGridInfoMap[id] = gridInfo;\n  };\n\n  GridApi.prototype.removeDetailGridInfo = function (id) {\n    this.detailGridInfoMap[id] = undefined;\n  };\n\n  GridApi.prototype.getDetailGridInfo = function (id) {\n    return this.detailGridInfoMap[id];\n  };\n\n  GridApi.prototype.forEachDetailGridInfo = function (callback) {\n    var index = 0;\n    iterateObject(this.detailGridInfoMap, function (id, gridInfo) {\n      // check for undefined, as old references will still be lying around\n      if (exists(gridInfo)) {\n        callback(gridInfo, index);\n        index++;\n      }\n    });\n  };\n\n  GridApi.prototype.getDataAsCsv = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.getDataAsCsv')) {\n      return this.csvCreator.getDataAsCsv(params);\n    }\n  };\n\n  GridApi.prototype.exportDataAsCsv = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.exportDataAsCSv')) {\n      this.csvCreator.exportDataAsCsv(params);\n    }\n  };\n\n  GridApi.prototype.getDataAsExcel = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getDataAsExcel')) {\n      var exportMode = params && params.exportMode || 'xlsx';\n\n      if (this.excelCreator.getFactoryMode(exportMode) === ExcelFactoryMode.MULTI_SHEET) {\n        console.warn('AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`');\n        return;\n      }\n\n      return this.excelCreator.getDataAsExcel(params);\n    }\n  };\n\n  GridApi.prototype.exportDataAsExcel = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.exportDataAsExcel')) {\n      var exportMode = params && params.exportMode || 'xlsx';\n\n      if (this.excelCreator.getFactoryMode(exportMode) === ExcelFactoryMode.MULTI_SHEET) {\n        console.warn('AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`');\n        return;\n      }\n\n      this.excelCreator.exportDataAsExcel(params);\n    }\n  };\n\n  GridApi.prototype.getSheetDataForExcel = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getSheetDataForExcel')) {\n      var exportMode = params && params.exportMode || 'xlsx';\n      this.excelCreator.setFactoryMode(ExcelFactoryMode.MULTI_SHEET, exportMode);\n      return this.excelCreator.getSheetDataForExcel(params);\n    }\n  };\n\n  GridApi.prototype.getMultipleSheetsAsExcel = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getMultipleSheetsAsExcel')) {\n      return this.excelCreator.getMultipleSheetsAsExcel(params);\n    }\n  };\n\n  GridApi.prototype.exportMultipleSheetsAsExcel = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.exportMultipleSheetsAsExcel')) {\n      return this.excelCreator.exportMultipleSheetsAsExcel(params);\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.setEnterpriseDatasource = function (datasource) {\n    console.warn(\"ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()\");\n    this.setServerSideDatasource(datasource);\n  };\n\n  GridApi.prototype.setGridAriaProperty = function (property, value) {\n    if (!property) {\n      return;\n    }\n\n    var eGrid = this.ctrlsService.getGridBodyCtrl().getGui();\n    var ariaProperty = \"aria-\" + property;\n\n    if (value === null) {\n      eGrid.removeAttribute(ariaProperty);\n    } else {\n      eGrid.setAttribute(ariaProperty, value);\n    }\n  };\n\n  GridApi.prototype.setServerSideDatasource = function (datasource) {\n    if (this.serverSideRowModel) {\n      // should really have an IEnterpriseRowModel interface, so we are not casting to any\n      this.serverSideRowModel.setDatasource(datasource);\n    } else {\n      console.warn(\"AG Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_SERVER_SIDE + \"'\");\n    }\n  };\n\n  GridApi.prototype.setDatasource = function (datasource) {\n    if (this.gridOptionsWrapper.isRowModelInfinite()) {\n      this.rowModel.setDatasource(datasource);\n    } else {\n      console.warn(\"AG Grid: you can only use a datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_INFINITE + \"'\");\n    }\n  };\n\n  GridApi.prototype.setViewportDatasource = function (viewportDatasource) {\n    if (this.gridOptionsWrapper.isRowModelViewport()) {\n      // this is bad coding, because it's using an interface that's exposed in the enterprise.\n      // really we should create an interface in the core for viewportDatasource and let\n      // the enterprise implement it, rather than casting to 'any' here\n      this.rowModel.setViewportDatasource(viewportDatasource);\n    } else {\n      console.warn(\"AG Grid: you can only use a viewport datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_VIEWPORT + \"'\");\n    }\n  };\n\n  GridApi.prototype.setRowData = function (rowData) {\n    if (this.gridOptionsWrapper.isRowModelDefault()) {\n      if (this.gridOptionsWrapper.isImmutableData()) {\n        var transactionAndMap = this.immutableService.createTransactionForRowData(rowData);\n\n        if (!transactionAndMap) {\n          return;\n        }\n\n        var transaction = transactionAndMap[0],\n            orderIdMap = transactionAndMap[1];\n        var nodeTransaction = this.clientSideRowModel.updateRowData(transaction, orderIdMap); // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened\n        // to the data change event on the row node and refreshed itself.\n\n        if (nodeTransaction) {\n          this.rowRenderer.refreshFullWidthRows(nodeTransaction.update);\n        }\n      } else {\n        this.selectionService.reset();\n        this.clientSideRowModel.setRowData(rowData);\n      }\n    } else {\n      console.warn('cannot call setRowData unless using normal row model');\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.setFloatingTopRowData = function (rows) {\n    console.warn('AG Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');\n    this.setPinnedTopRowData(rows);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.setFloatingBottomRowData = function (rows) {\n    console.warn('AG Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');\n    this.setPinnedBottomRowData(rows);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingTopRowCount = function () {\n    console.warn('AG Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');\n    return this.getPinnedTopRowCount();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingBottomRowCount = function () {\n    console.warn('AG Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');\n    return this.getPinnedBottomRowCount();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingTopRow = function (index) {\n    console.warn('AG Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');\n    return this.getPinnedTopRow(index);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.getFloatingBottomRow = function (index) {\n    console.warn('AG Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');\n    return this.getPinnedBottomRow(index);\n  };\n\n  GridApi.prototype.setPinnedTopRowData = function (rows) {\n    this.pinnedRowModel.setPinnedTopRowData(rows);\n  };\n\n  GridApi.prototype.setPinnedBottomRowData = function (rows) {\n    this.pinnedRowModel.setPinnedBottomRowData(rows);\n  };\n\n  GridApi.prototype.getPinnedTopRowCount = function () {\n    return this.pinnedRowModel.getPinnedTopRowCount();\n  };\n\n  GridApi.prototype.getPinnedBottomRowCount = function () {\n    return this.pinnedRowModel.getPinnedBottomRowCount();\n  };\n\n  GridApi.prototype.getPinnedTopRow = function (index) {\n    return this.pinnedRowModel.getPinnedTopRow(index);\n  };\n\n  GridApi.prototype.getPinnedBottomRow = function (index) {\n    return this.pinnedRowModel.getPinnedBottomRow(index);\n  };\n\n  GridApi.prototype.setColumnDefs = function (colDefs, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.columnModel.setColumnDefs(colDefs, source);\n  };\n\n  GridApi.prototype.setAutoGroupColumnDef = function (colDef, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    this.gridOptionsWrapper.setProperty('autoGroupColumnDef', colDef, true);\n  };\n\n  GridApi.prototype.expireValueCache = function () {\n    this.valueCache.expire();\n  };\n\n  GridApi.prototype.getVerticalPixelRange = function () {\n    return this.gridBodyCon.getScrollFeature().getVScrollPosition();\n  };\n\n  GridApi.prototype.getHorizontalPixelRange = function () {\n    return this.gridBodyCon.getScrollFeature().getHScrollPosition();\n  };\n\n  GridApi.prototype.setAlwaysShowHorizontalScroll = function (show) {\n    this.gridOptionsWrapper.setProperty('alwaysShowHorizontalScroll', show);\n  };\n\n  GridApi.prototype.setAlwaysShowVerticalScroll = function (show) {\n    this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);\n  };\n\n  GridApi.prototype.refreshToolPanel = function () {\n    if (!this.sideBarComp) {\n      return;\n    }\n\n    this.sideBarComp.refresh();\n  };\n\n  GridApi.prototype.refreshCells = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (Array.isArray(params)) {\n      // the old version of refreshCells() took an array of rowNodes for the first argument\n      console.warn('since AG Grid v11.1, refreshCells() now takes parameters, please see the documentation.');\n      return;\n    }\n\n    this.rowRenderer.refreshCells(params);\n  };\n\n  GridApi.prototype.flashCells = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    this.rowRenderer.flashCells(params);\n  };\n\n  GridApi.prototype.redrawRows = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    var rowNodes = params ? params.rowNodes : undefined;\n    this.rowRenderer.redrawRows(rowNodes);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.refreshView = function () {\n    console.warn('AG Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');\n    this.redrawRows();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.refreshRows = function (rowNodes) {\n    console.warn('since AG Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');\n    this.refreshCells({\n      rowNodes: rowNodes\n    });\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.rowDataChanged = function (rows) {\n    console.warn('AG Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');\n    this.redrawRows();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.softRefreshView = function () {\n    console.error('AG Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.refreshGroupRows = function () {\n    console.warn('AG Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' + 'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' + 'not be necessary to only refresh the group rows.');\n    this.refreshCells();\n  };\n\n  GridApi.prototype.setFunctionsReadOnly = function (readOnly) {\n    this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);\n  };\n\n  GridApi.prototype.refreshHeader = function () {\n    this.headerRootComp.refreshHeader();\n  };\n\n  GridApi.prototype.isAnyFilterPresent = function () {\n    return this.filterManager.isAnyFilterPresent();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.isAdvancedFilterPresent = function () {\n    console.warn('AG Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()');\n    return this.isColumnFilterPresent();\n  };\n\n  GridApi.prototype.isColumnFilterPresent = function () {\n    return this.filterManager.isAdvancedFilterPresent();\n  };\n\n  GridApi.prototype.isQuickFilterPresent = function () {\n    return this.filterManager.isQuickFilterPresent();\n  };\n\n  GridApi.prototype.getModel = function () {\n    return this.rowModel;\n  };\n\n  GridApi.prototype.setRowNodeExpanded = function (rowNode, expanded) {\n    if (rowNode) {\n      rowNode.setExpanded(expanded);\n    }\n  };\n\n  GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {\n    if (missing(this.clientSideRowModel)) {\n      console.warn('AG Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');\n    }\n\n    if (exists(deprecated_refreshFromIndex)) {\n      console.warn('AG Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows');\n    } // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n    // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n    // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n    // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n\n\n    this.clientSideRowModel.refreshModel({\n      step: ClientSideRowModelSteps.MAP\n    });\n  };\n\n  GridApi.prototype.refreshInMemoryRowModel = function (step) {\n    console.warn(\"ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()\");\n    this.refreshClientSideRowModel(step);\n  };\n\n  GridApi.prototype.refreshClientSideRowModel = function (step) {\n    if (missing(this.clientSideRowModel)) {\n      console.warn('cannot call refreshClientSideRowModel unless using normal row model');\n    }\n\n    var paramsStep = ClientSideRowModelSteps.EVERYTHING;\n    var stepsMapped = {\n      group: ClientSideRowModelSteps.EVERYTHING,\n      filter: ClientSideRowModelSteps.FILTER,\n      map: ClientSideRowModelSteps.MAP,\n      aggregate: ClientSideRowModelSteps.AGGREGATE,\n      sort: ClientSideRowModelSteps.SORT,\n      pivot: ClientSideRowModelSteps.PIVOT\n    };\n\n    if (exists(step)) {\n      paramsStep = stepsMapped[step];\n    }\n\n    if (missing(paramsStep)) {\n      console.error(\"AG Grid: invalid step \" + step + \", available steps are \" + Object.keys(stepsMapped).join(', '));\n      return;\n    }\n\n    var modelParams = {\n      step: paramsStep,\n      keepRenderedRows: true,\n      animate: true,\n      keepEditingRows: true\n    };\n    this.clientSideRowModel.refreshModel(modelParams);\n  };\n\n  GridApi.prototype.isAnimationFrameQueueEmpty = function () {\n    return this.animationFrameService.isQueueEmpty();\n  };\n\n  GridApi.prototype.flushAllAnimationFrames = function () {\n    this.animationFrameService.flushAllFrames();\n  };\n\n  GridApi.prototype.getRowNode = function (id) {\n    return this.rowModel.getRowNode(id);\n  };\n\n  GridApi.prototype.getSizesForCurrentTheme = function () {\n    return {\n      rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n      headerHeight: this.gridOptionsWrapper.getHeaderHeight()\n    };\n  };\n\n  GridApi.prototype.expandAll = function () {\n    if (this.clientSideRowModel) {\n      this.clientSideRowModel.expandOrCollapseAll(true);\n    } else if (this.serverSideRowModel) {\n      this.serverSideRowModel.expandAll(true);\n    } else {\n      console.warn('AG Grid: expandAll only works with Client Side Row Model and Server Side Row Model');\n    }\n  };\n\n  GridApi.prototype.collapseAll = function () {\n    if (this.clientSideRowModel) {\n      this.clientSideRowModel.expandOrCollapseAll(false);\n    } else if (this.serverSideRowModel) {\n      this.serverSideRowModel.expandAll(false);\n    } else {\n      console.warn('AG Grid: collapseAll only works with Client Side Row Model and Server Side Row Model');\n    }\n  };\n\n  GridApi.prototype.getToolPanelInstance = function (id) {\n    if (!this.sideBarComp) {\n      console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');\n      return;\n    }\n\n    return this.sideBarComp.getToolPanelInstance(id);\n  };\n\n  GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {\n    if (typeof eventName !== 'string') {\n      console.warn('AG Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');\n    }\n\n    this.addRenderedRowListener(eventName, rowIndex, callback);\n  };\n\n  GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {\n    if (eventName === 'virtualRowSelected') {\n      console.warn(\"AG Grid: event virtualRowSelected is deprecated, to register for individual row\\n                selection events, add a listener directly to the row node.\");\n    }\n\n    this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);\n  };\n\n  GridApi.prototype.setQuickFilter = function (newFilter) {\n    this.filterManager.setQuickFilter(newFilter);\n  };\n\n  GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {\n    console.warn('AG Grid: do not use api for selection, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    this.selectionService.selectIndex(index, tryMulti);\n  };\n\n  GridApi.prototype.deselectIndex = function (index, suppressEvents) {\n    if (suppressEvents === void 0) {\n      suppressEvents = false;\n    }\n\n    console.warn('AG Grid: do not use api for selection, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    this.selectionService.deselectIndex(index);\n  };\n\n  GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {\n    if (tryMulti === void 0) {\n      tryMulti = false;\n    }\n\n    if (suppressEvents === void 0) {\n      suppressEvents = false;\n    }\n\n    console.warn('AG Grid: API for selection is deprecated, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    node.setSelectedParams({\n      newValue: true,\n      clearSelection: !tryMulti\n    });\n  };\n\n  GridApi.prototype.deselectNode = function (node, suppressEvents) {\n    if (suppressEvents === void 0) {\n      suppressEvents = false;\n    }\n\n    console.warn('AG Grid: API for selection is deprecated, call node.setSelected(value) instead');\n\n    if (suppressEvents) {\n      console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n    }\n\n    node.setSelectedParams({\n      newValue: false\n    });\n  };\n\n  GridApi.prototype.selectAll = function () {\n    this.selectionService.selectAllRowNodes();\n  };\n\n  GridApi.prototype.deselectAll = function () {\n    this.selectionService.deselectAllRowNodes();\n  };\n\n  GridApi.prototype.selectAllFiltered = function () {\n    this.selectionService.selectAllRowNodes(true);\n  };\n\n  GridApi.prototype.deselectAllFiltered = function () {\n    this.selectionService.deselectAllRowNodes(true);\n  };\n\n  GridApi.prototype.recomputeAggregates = function () {\n    if (missing(this.clientSideRowModel)) {\n      console.warn('cannot call recomputeAggregates unless using normal row model');\n    }\n\n    console.warn(\"recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead\");\n    this.clientSideRowModel.refreshModel({\n      step: ClientSideRowModelSteps.AGGREGATE\n    });\n  };\n\n  GridApi.prototype.sizeColumnsToFit = function () {\n    this.gridBodyCon.sizeColumnsToFit();\n  };\n\n  GridApi.prototype.showLoadingOverlay = function () {\n    this.overlayWrapperComp.showLoadingOverlay();\n  };\n\n  GridApi.prototype.showNoRowsOverlay = function () {\n    this.overlayWrapperComp.showNoRowsOverlay();\n  };\n\n  GridApi.prototype.hideOverlay = function () {\n    this.overlayWrapperComp.hideOverlay();\n  };\n\n  GridApi.prototype.isNodeSelected = function (node) {\n    console.warn('AG Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');\n    return node.isSelected();\n  };\n\n  GridApi.prototype.getSelectedNodesById = function () {\n    console.error('AG Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');\n    return null;\n  };\n\n  GridApi.prototype.getSelectedNodes = function () {\n    return this.selectionService.getSelectedNodes();\n  };\n\n  GridApi.prototype.getSelectedRows = function () {\n    return this.selectionService.getSelectedRows();\n  };\n\n  GridApi.prototype.getBestCostNodeSelection = function () {\n    return this.selectionService.getBestCostNodeSelection();\n  };\n\n  GridApi.prototype.getRenderedNodes = function () {\n    return this.rowRenderer.getRenderedNodes();\n  };\n\n  GridApi.prototype.ensureColIndexVisible = function (index) {\n    console.warn('AG Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');\n  };\n\n  GridApi.prototype.ensureColumnVisible = function (key) {\n    this.gridBodyCon.getScrollFeature().ensureColumnVisible(key);\n  }; // Valid values for position are bottom, middle and top\n\n\n  GridApi.prototype.ensureIndexVisible = function (index, position) {\n    this.gridBodyCon.getScrollFeature().ensureIndexVisible(index, position);\n  }; // Valid values for position are bottom, middle and top\n\n\n  GridApi.prototype.ensureNodeVisible = function (comparator, position) {\n    if (position === void 0) {\n      position = null;\n    }\n\n    this.gridBodyCon.getScrollFeature().ensureNodeVisible(comparator, position);\n  };\n\n  GridApi.prototype.forEachLeafNode = function (callback) {\n    if (missing(this.clientSideRowModel)) {\n      console.warn('cannot call forEachNode unless using normal row model');\n    }\n\n    this.clientSideRowModel.forEachLeafNode(callback);\n  };\n\n  GridApi.prototype.forEachNode = function (callback) {\n    this.rowModel.forEachNode(callback);\n  };\n\n  GridApi.prototype.forEachNodeAfterFilter = function (callback) {\n    if (missing(this.clientSideRowModel)) {\n      console.warn('cannot call forEachNodeAfterFilter unless using normal row model');\n    }\n\n    this.clientSideRowModel.forEachNodeAfterFilter(callback);\n  };\n\n  GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n    if (missing(this.clientSideRowModel)) {\n      console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model');\n    }\n\n    this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n  };\n\n  GridApi.prototype.getFilterApiForColDef = function (colDef) {\n    console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterInstance instead');\n    return this.getFilterInstance(colDef);\n  };\n\n  GridApi.prototype.getFilterInstance = function (key, callback) {\n    var column = this.columnModel.getPrimaryColumn(key);\n\n    if (column) {\n      var filterPromise = this.filterManager.getFilterComponent(column, 'NO_UI');\n      var currentValue = filterPromise && filterPromise.resolveNow(null, function (filterComp) {\n        return filterComp;\n      });\n\n      if (callback) {\n        if (currentValue) {\n          setTimeout(callback, 0, currentValue);\n        } else if (filterPromise) {\n          filterPromise.then(callback);\n        }\n      }\n\n      return currentValue;\n    }\n  };\n\n  GridApi.prototype.getFilterApi = function (key) {\n    console.warn('AG Grid: getFilterApi is deprecated, use getFilterInstance instead');\n    return this.getFilterInstance(key);\n  };\n\n  GridApi.prototype.destroyFilter = function (key) {\n    var column = this.columnModel.getPrimaryColumn(key);\n\n    if (column) {\n      return this.filterManager.destroyFilter(column, \"filterDestroyed\");\n    }\n  };\n\n  GridApi.prototype.getStatusPanel = function (key) {\n    if (this.statusBarService) {\n      return this.statusBarService.getStatusPanel(key);\n    }\n  };\n\n  GridApi.prototype.getColumnDef = function (key) {\n    var column = this.columnModel.getPrimaryColumn(key);\n\n    if (column) {\n      return column.getColDef();\n    }\n\n    return null;\n  };\n\n  GridApi.prototype.getColumnDefs = function () {\n    return this.columnModel.getColumnDefs();\n  };\n\n  GridApi.prototype.onFilterChanged = function () {\n    this.filterManager.onFilterChanged();\n  };\n\n  GridApi.prototype.onSortChanged = function () {\n    this.sortController.onSortChanged();\n  };\n\n  GridApi.prototype.setSortModel = function (sortModel, source) {\n    if (source === void 0) {\n      source = \"api\";\n    }\n\n    console.warn('AG Grid: as of version 24.0.0, setSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.applyColumnState() instead.');\n    var columnState = [];\n\n    if (sortModel) {\n      sortModel.forEach(function (item, index) {\n        columnState.push({\n          colId: item.colId,\n          sort: item.sort,\n          sortIndex: index\n        });\n      });\n    }\n\n    this.columnModel.applyColumnState({\n      state: columnState,\n      defaultState: {\n        sort: null\n      }\n    });\n  };\n\n  GridApi.prototype.getSortModel = function () {\n    console.warn('AG Grid: as of version 24.0.0, getSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.getColumnState() instead.');\n    var columnState = this.columnModel.getColumnState();\n    var filteredStates = columnState.filter(function (item) {\n      return item.sort != null;\n    });\n    var indexes = {};\n    filteredStates.forEach(function (state) {\n      var id = state.colId;\n      var sortIndex = state.sortIndex;\n      indexes[id] = sortIndex;\n    });\n    var res = filteredStates.map(function (s) {\n      return {\n        colId: s.colId,\n        sort: s.sort\n      };\n    });\n    res.sort(function (a, b) {\n      return indexes[a.colId] - indexes[b.colId];\n    });\n    return res;\n  };\n\n  GridApi.prototype.setFilterModel = function (model) {\n    this.filterManager.setFilterModel(model);\n  };\n\n  GridApi.prototype.getFilterModel = function () {\n    return this.filterManager.getFilterModel();\n  };\n\n  GridApi.prototype.getFocusedCell = function () {\n    return this.focusService.getFocusedCell();\n  };\n\n  GridApi.prototype.clearFocusedCell = function () {\n    return this.focusService.clearFocusedCell();\n  };\n\n  GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {\n    this.focusService.setFocusedCell(rowIndex, colKey, floating, true);\n  };\n\n  GridApi.prototype.setSuppressRowDrag = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);\n  };\n\n  GridApi.prototype.setSuppressMoveWhenRowDragging = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, value);\n  };\n\n  GridApi.prototype.setSuppressRowClickSelection = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION, value);\n  };\n\n  GridApi.prototype.addRowDropZone = function (params) {\n    this.gridBodyCon.getRowDragFeature().addRowDropZone(params);\n  };\n\n  GridApi.prototype.removeRowDropZone = function (params) {\n    var activeDropTarget = this.dragAndDropService.findExternalZone(params);\n\n    if (activeDropTarget) {\n      this.dragAndDropService.removeDropTarget(activeDropTarget);\n    }\n  };\n\n  GridApi.prototype.getRowDropZoneParams = function (events) {\n    return this.gridBodyCon.getRowDragFeature().getRowDropZone(events);\n  };\n\n  GridApi.prototype.setHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);\n  };\n\n  GridApi.prototype.setDomLayout = function (domLayout) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);\n  };\n\n  GridApi.prototype.setEnableCellTextSelection = function (selectable) {\n    this.gridBodyCon.setCellTextSelection(selectable);\n  };\n\n  GridApi.prototype.setFillHandleDirection = function (direction) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FILL_HANDLE_DIRECTION, direction);\n  };\n\n  GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);\n  };\n\n  GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);\n  };\n\n  GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);\n  };\n\n  GridApi.prototype.setIsExternalFilterPresent = function (isExternalFilterPresentFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_EXTERNAL_FILTER_PRESENT, isExternalFilterPresentFunc);\n  };\n\n  GridApi.prototype.setDoesExternalFilterPass = function (doesExternalFilterPassFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOES_EXTERNAL_FILTER_PASS, doesExternalFilterPassFunc);\n  };\n\n  GridApi.prototype.setNavigateToNextCell = function (navigateToNextCellFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_CELL, navigateToNextCellFunc);\n  };\n\n  GridApi.prototype.setTabToNextCell = function (tabToNextCellFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_CELL, tabToNextCellFunc);\n  };\n\n  GridApi.prototype.setTabToNextHeader = function (tabToNextHeaderFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_HEADER, tabToNextHeaderFunc);\n  };\n\n  GridApi.prototype.setNavigateToNextHeader = function (navigateToNextHeaderFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_HEADER, navigateToNextHeaderFunc);\n  };\n\n  GridApi.prototype.setGroupRowAggNodes = function (groupRowAggNodesFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_ROW_AGG_NODES, groupRowAggNodesFunc);\n  };\n\n  GridApi.prototype.setGetBusinessKeyForNode = function (getBusinessKeyForNodeFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_BUSINESS_KEY_FOR_NODE, getBusinessKeyForNodeFunc);\n  };\n\n  GridApi.prototype.setGetChildCount = function (getChildCountFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHILD_COUNT, getChildCountFunc);\n  };\n\n  GridApi.prototype.setProcessRowPostCreate = function (processRowPostCreateFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_ROW_POST_CREATE, processRowPostCreateFunc);\n  };\n\n  GridApi.prototype.setGetRowNodeId = function (getRowNodeIdFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_NODE_ID, getRowNodeIdFunc);\n  };\n\n  GridApi.prototype.setGetRowClass = function (rowClassFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_CLASS, rowClassFunc);\n  };\n\n  GridApi.prototype.setIsFullWidthCell = function (isFullWidthCellFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_FULL_WIDTH_CELL, isFullWidthCellFunc);\n  };\n\n  GridApi.prototype.setIsRowSelectable = function (isRowSelectableFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_SELECTABLE, isRowSelectableFunc);\n  };\n\n  GridApi.prototype.setIsRowMaster = function (isRowMasterFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_MASTER, isRowMasterFunc);\n  };\n\n  GridApi.prototype.setPostSort = function (postSortFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_SORT, postSortFunc);\n  };\n\n  GridApi.prototype.setGetDocument = function (getDocumentFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_DOCUMENT, getDocumentFunc);\n  };\n\n  GridApi.prototype.setGetContextMenuItems = function (getContextMenuItemsFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CONTEXT_MENU_ITEMS, getContextMenuItemsFunc);\n  };\n\n  GridApi.prototype.setGetMainMenuItems = function (getMainMenuItemsFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_MAIN_MENU_ITEMS, getMainMenuItemsFunc);\n  };\n\n  GridApi.prototype.setProcessCellForClipboard = function (processCellForClipboardFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FOR_CLIPBOARD, processCellForClipboardFunc);\n  };\n\n  GridApi.prototype.setSendToClipboard = function (sendToClipboardFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SEND_TO_CLIPBOARD, sendToClipboardFunc);\n  };\n\n  GridApi.prototype.setProcessCellFromClipboard = function (processCellFromClipboardFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FROM_CLIPBOARD, processCellFromClipboardFunc);\n  };\n\n  GridApi.prototype.setProcessSecondaryColDef = function (processSecondaryColDefFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_TO_SECONDARY_COLDEF, processSecondaryColDefFunc);\n  };\n\n  GridApi.prototype.setProcessSecondaryColGroupDef = function (processSecondaryColGroupDefFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_SECONDARY_COL_GROUP_DEF, processSecondaryColGroupDefFunc);\n  };\n\n  GridApi.prototype.setPostProcessPopup = function (postProcessPopupFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_PROCESS_POPUP, postProcessPopupFunc);\n  };\n\n  GridApi.prototype.setDefaultGroupOrderComparator = function (defaultGroupOrderComparatorFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DEFAULT_GROUP_ORDER_COMPARATOR, defaultGroupOrderComparatorFunc);\n  };\n\n  GridApi.prototype.setProcessChartOptions = function (processChartOptionsFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CHART_OPTIONS, processChartOptionsFunc);\n  };\n\n  GridApi.prototype.setGetChartToolbarItems = function (getChartToolbarItemsFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHART_TOOLBAR_ITEMS, getChartToolbarItemsFunc);\n  };\n\n  GridApi.prototype.setPaginationNumberFormatter = function (paginationNumberFormatterFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PAGINATION_NUMBER_FORMATTER, paginationNumberFormatterFunc);\n  };\n\n  GridApi.prototype.setGetServerSideStoreParams = function (getServerSideStoreParamsFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_STORE_PARAMS, getServerSideStoreParamsFunc);\n  };\n\n  GridApi.prototype.setIsServerSideGroupOpenByDefault = function (isServerSideGroupOpenByDefaultFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT, isServerSideGroupOpenByDefaultFunc);\n  };\n\n  GridApi.prototype.setIsApplyServerSideTransaction = function (isApplyServerSideTransactionFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION, isApplyServerSideTransactionFunc);\n  };\n\n  GridApi.prototype.setIsServerSideGroup = function (isServerSideGroupFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUP, isServerSideGroupFunc);\n  };\n\n  GridApi.prototype.setGetServerSideGroupKey = function (getServerSideGroupKeyFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_GROUP_KEY, getServerSideGroupKeyFunc);\n  };\n\n  GridApi.prototype.setGetRowStyle = function (rowStyleFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_STYLE, rowStyleFunc);\n  };\n\n  GridApi.prototype.setGetRowHeight = function (rowHeightFunc) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_HEIGHT, rowHeightFunc);\n  };\n\n  GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);\n  };\n\n  GridApi.prototype.isSideBarVisible = function () {\n    return this.sideBarComp ? this.sideBarComp.isDisplayed() : false;\n  };\n\n  GridApi.prototype.setSideBarVisible = function (show) {\n    if (!this.sideBarComp) {\n      if (show) {\n        console.warn('AG Grid: sideBar is not loaded');\n      }\n\n      return;\n    }\n\n    this.sideBarComp.setDisplayed(show);\n  };\n\n  GridApi.prototype.setSideBarPosition = function (position) {\n    if (!this.sideBarComp) {\n      console.warn('AG Grid: sideBar is not loaded');\n      return;\n    }\n\n    this.sideBarComp.setSideBarPosition(position);\n  };\n\n  GridApi.prototype.openToolPanel = function (key) {\n    if (!this.sideBarComp) {\n      console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');\n      return;\n    }\n\n    this.sideBarComp.openToolPanel(key);\n  };\n\n  GridApi.prototype.closeToolPanel = function () {\n    if (!this.sideBarComp) {\n      console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');\n      return;\n    }\n\n    this.sideBarComp.close();\n  };\n\n  GridApi.prototype.getOpenedToolPanel = function () {\n    return this.sideBarComp ? this.sideBarComp.openedItem() : null;\n  };\n\n  GridApi.prototype.getSideBar = function () {\n    return this.gridOptionsWrapper.getSideBar();\n  };\n\n  GridApi.prototype.setSideBar = function (def) {\n    this.gridOptionsWrapper.setProperty('sideBar', SideBarDefParser.parse(def));\n  };\n\n  GridApi.prototype.setSuppressClipboardPaste = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);\n  };\n\n  GridApi.prototype.isToolPanelShowing = function () {\n    return this.sideBarComp.isToolPanelShowing();\n  };\n\n  GridApi.prototype.doLayout = function () {\n    var message = \"AG Grid - since version 25.1, doLayout was taken out, as it's not needed. The grid responds to grid size changes automatically\";\n    doOnce(function () {\n      return console.warn(message);\n    }, 'doLayoutDeprecated');\n  };\n\n  GridApi.prototype.resetRowHeights = function () {\n    if (exists(this.clientSideRowModel)) {\n      this.clientSideRowModel.resetRowHeights();\n    }\n  };\n\n  GridApi.prototype.setGroupRemoveSingleChildren = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);\n  };\n\n  GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);\n  };\n\n  GridApi.prototype.onRowHeightChanged = function () {\n    if (this.clientSideRowModel) {\n      this.clientSideRowModel.onRowHeightChanged();\n    } else if (this.serverSideRowModel) {\n      this.serverSideRowModel.onRowHeightChanged();\n    }\n  };\n\n  GridApi.prototype.getValue = function (colKey, rowNode) {\n    var column = this.columnModel.getPrimaryColumn(colKey);\n\n    if (missing(column)) {\n      column = this.columnModel.getGridColumn(colKey);\n    }\n\n    if (missing(column)) {\n      return null;\n    }\n\n    return this.valueService.getValue(column, rowNode);\n  };\n\n  GridApi.prototype.addEventListener = function (eventType, listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.addEventListener(eventType, listener, async);\n  };\n\n  GridApi.prototype.addGlobalListener = function (listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.addGlobalListener(listener, async);\n  };\n\n  GridApi.prototype.removeEventListener = function (eventType, listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.removeEventListener(eventType, listener, async);\n  };\n\n  GridApi.prototype.removeGlobalListener = function (listener) {\n    var async = this.gridOptionsWrapper.useAsyncEvents();\n    this.eventService.removeGlobalListener(listener, async);\n  };\n\n  GridApi.prototype.dispatchEvent = function (event) {\n    this.eventService.dispatchEvent(event);\n  };\n\n  GridApi.prototype.destroy = function () {\n    // this is needed as GridAPI is a bean, and GridAPI.destroy() is called as part\n    // of context.destroy(). so we need to stop the infinite loop.\n    if (this.destroyCalled) {\n      return;\n    }\n\n    this.destroyCalled = true; // destroy the UI first (as they use the services)\n\n    var gridCtrl = this.ctrlsService.getGridCtrl();\n    gridCtrl && gridCtrl.destroyGridUi(); // destroy the services\n\n    this.context.destroy();\n  };\n\n  GridApi.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function () {\n    // some users were raising support issues with regards memory leaks. the problem was the customers applications\n    // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n    // all references in teh API so at least the core grid can be garbage collected.\n    //\n    // wait about 100ms before clearing down the references, in case user has some cleanup to do,\n    // and needs to deference the API first\n    setTimeout(removeAllReferences.bind(window, this, 'Grid API'), 100);\n  };\n\n  GridApi.prototype.warnIfDestroyed = function (methodName) {\n    if (this.destroyCalled) {\n      console.warn(\"AG Grid: Grid API method \" + methodName + \" was called on a grid that was destroyed.\");\n    }\n\n    return this.destroyCalled;\n  };\n\n  GridApi.prototype.resetQuickFilter = function () {\n    if (this.warnIfDestroyed('resetQuickFilter')) {\n      return;\n    }\n\n    this.rowModel.forEachNode(function (node) {\n      return node.quickFilterAggregateText = null;\n    });\n  };\n\n  GridApi.prototype.getRangeSelections = function () {\n    console.warn(\"AG Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\\n        getCellRanges() is a bit different, please check the AG Grid documentation.\");\n    return null;\n  };\n\n  GridApi.prototype.getCellRanges = function () {\n    if (this.rangeService) {\n      return this.rangeService.getCellRanges();\n    }\n\n    console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');\n    return null;\n  };\n\n  GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {\n    return camelCaseToHumanText(camelCase);\n  };\n\n  GridApi.prototype.addRangeSelection = function (deprecatedNoLongerUsed) {\n    console.warn('AG Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()');\n  };\n\n  GridApi.prototype.addCellRange = function (params) {\n    if (!this.rangeService) {\n      console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');\n    }\n\n    this.rangeService.addCellRange(params);\n  };\n\n  GridApi.prototype.clearRangeSelection = function () {\n    if (!this.rangeService) {\n      console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');\n    }\n\n    this.rangeService.removeAllCellRanges();\n  };\n\n  GridApi.prototype.undoCellEditing = function () {\n    this.undoRedoService.undo();\n  };\n\n  GridApi.prototype.redoCellEditing = function () {\n    this.undoRedoService.redo();\n  };\n\n  GridApi.prototype.getCurrentUndoSize = function () {\n    return this.undoRedoService.getCurrentUndoStackSize();\n  };\n\n  GridApi.prototype.getCurrentRedoSize = function () {\n    return this.undoRedoService.getCurrentRedoStackSize();\n  };\n\n  GridApi.prototype.getChartModels = function () {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartModels') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartModels')) {\n      return this.chartService.getChartModels();\n    }\n  };\n\n  GridApi.prototype.getChartRef = function (chartId) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartRef') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartRef')) {\n      return this.chartService.getChartRef(chartId);\n    }\n  };\n\n  GridApi.prototype.getChartImageDataURL = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartImageDataURL') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartImageDataURL')) {\n      return this.chartService.getChartImageDataURL(params);\n    }\n  };\n\n  GridApi.prototype.createRangeChart = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createRangeChart') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createRangeChart')) {\n      return this.chartService.createRangeChart(params);\n    }\n  };\n\n  GridApi.prototype.createCrossFilterChart = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createCrossFilterChart') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createCrossFilterChart')) {\n      return this.chartService.createCrossFilterChart(params);\n    }\n  };\n\n  GridApi.prototype.restoreChart = function (chartModel, chartContainer) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.restoreChart') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.restoreChart')) {\n      return this.chartService.restoreChart(chartModel, chartContainer);\n    }\n  };\n\n  GridApi.prototype.createPivotChart = function (params) {\n    if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createPivotChart') && ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createPivotChart')) {\n      return this.chartService.createPivotChart(params);\n    }\n  };\n\n  GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {\n    if (!this.clipboardService) {\n      console.warn('AG Grid: clipboard is only available in AG Grid Enterprise');\n    }\n\n    this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);\n  };\n\n  GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {\n    if (!this.clipboardService) {\n      console.warn('AG Grid: clipboard is only available in AG Grid Enterprise');\n    }\n\n    this.clipboardService.copySelectedRangeToClipboard(includeHeader);\n  };\n\n  GridApi.prototype.copySelectedRangeDown = function () {\n    if (!this.clipboardService) {\n      console.warn('AG Grid: clipboard is only available in AG Grid Enterprise');\n    }\n\n    this.clipboardService.copyRangeDown();\n  };\n\n  GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {\n    // use grid column so works with pivot mode\n    var column = this.columnModel.getGridColumn(colKey);\n    this.menuFactory.showMenuAfterButtonClick(column, buttonElement, 'columnMenu');\n  };\n\n  GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {\n    // use grid column so works with pivot mode\n    var column = this.columnModel.getGridColumn(colKey);\n\n    if (!column) {\n      column = this.columnModel.getPrimaryColumn(colKey);\n    }\n\n    if (!column) {\n      console.error(\"AG Grid: column '\" + colKey + \"' not found\");\n      return;\n    }\n\n    this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);\n  };\n\n  GridApi.prototype.hidePopupMenu = function () {\n    // hide the context menu if in enterprise\n    if (this.contextMenuFactory) {\n      this.contextMenuFactory.hideActiveMenu();\n    } // and hide the column menu always\n\n\n    this.menuFactory.hideActiveMenu();\n  };\n\n  GridApi.prototype.setPopupParent = function (ePopupParent) {\n    this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);\n  };\n\n  GridApi.prototype.tabToNextCell = function () {\n    return this.navigationService.tabToNextCell(false);\n  };\n\n  GridApi.prototype.tabToPreviousCell = function () {\n    return this.navigationService.tabToNextCell(true);\n  };\n\n  GridApi.prototype.getCellRendererInstances = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return this.rowRenderer.getCellRendererInstances(params);\n  };\n\n  GridApi.prototype.getCellEditorInstances = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return this.rowRenderer.getCellEditorInstances(params);\n  };\n\n  GridApi.prototype.getEditingCells = function () {\n    return this.rowRenderer.getEditingCells();\n  };\n\n  GridApi.prototype.stopEditing = function (cancel) {\n    if (cancel === void 0) {\n      cancel = false;\n    }\n\n    this.rowRenderer.stopEditing(cancel);\n  };\n\n  GridApi.prototype.startEditingCell = function (params) {\n    var column = this.columnModel.getGridColumn(params.colKey);\n\n    if (!column) {\n      console.warn(\"AG Grid: no column found for \" + params.colKey);\n      return;\n    }\n\n    var cellPosition = {\n      rowIndex: params.rowIndex,\n      rowPinned: params.rowPinned || null,\n      column: column\n    };\n    var notPinned = params.rowPinned == null;\n\n    if (notPinned) {\n      this.gridBodyCon.getScrollFeature().ensureIndexVisible(params.rowIndex);\n    }\n\n    var cell = this.navigationService.getCellByPosition(cellPosition);\n\n    if (!cell) {\n      return;\n    }\n\n    cell.startRowOrCellEdit(params.keyPress, params.charPress);\n  };\n\n  GridApi.prototype.addAggFunc = function (key, aggFunc) {\n    if (this.aggFuncService) {\n      this.aggFuncService.addAggFunc(key, aggFunc);\n    }\n  };\n\n  GridApi.prototype.addAggFuncs = function (aggFuncs) {\n    if (this.aggFuncService) {\n      this.aggFuncService.addAggFuncs(aggFuncs);\n    }\n  };\n\n  GridApi.prototype.clearAggFuncs = function () {\n    if (this.aggFuncService) {\n      this.aggFuncService.clear();\n    }\n  };\n\n  GridApi.prototype.applyServerSideTransaction = function (transaction) {\n    if (!this.serverSideTransactionManager) {\n      console.warn('AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.');\n      return;\n    }\n\n    return this.serverSideTransactionManager.applyTransaction(transaction);\n  };\n\n  GridApi.prototype.applyServerSideTransactionAsync = function (transaction, callback) {\n    if (!this.serverSideTransactionManager) {\n      console.warn('AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.');\n      return;\n    }\n\n    return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);\n  };\n\n  GridApi.prototype.retryServerSideLoads = function () {\n    if (!this.serverSideRowModel) {\n      console.warn('AG Grid: API retryServerSideLoads() can only be used when using Server-Side Row Model.');\n      return;\n    }\n\n    this.serverSideRowModel.retryLoads();\n  };\n\n  GridApi.prototype.flushServerSideAsyncTransactions = function () {\n    if (!this.serverSideTransactionManager) {\n      console.warn('AG Grid: Cannot flush Server Side Transaction if not using the Server Side Row Model.');\n      return;\n    }\n\n    return this.serverSideTransactionManager.flushAsyncTransactions();\n  };\n\n  GridApi.prototype.applyTransaction = function (rowDataTransaction) {\n    if (!this.clientSideRowModel) {\n      console.error('AG Grid: updateRowData() only works with ClientSideRowModel. Working with InfiniteRowModel was deprecated in v23.1 and removed in v24.1');\n      return;\n    }\n\n    var res = this.clientSideRowModel.updateRowData(rowDataTransaction); // refresh all the full width rows\n\n    this.rowRenderer.refreshFullWidthRows(res.update); // do change detection for all present cells\n\n    if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {\n      this.rowRenderer.refreshCells();\n    }\n\n    return res;\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.updateRowData = function (rowDataTransaction) {\n    var message = 'AG Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.';\n    doOnce(function () {\n      return console.warn(message);\n    }, 'updateRowData deprecated');\n    return this.applyTransaction(rowDataTransaction);\n  };\n\n  GridApi.prototype.applyTransactionAsync = function (rowDataTransaction, callback) {\n    if (!this.clientSideRowModel) {\n      console.error('AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');\n      return;\n    }\n\n    this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);\n  };\n\n  GridApi.prototype.flushAsyncTransactions = function () {\n    if (!this.clientSideRowModel) {\n      console.error('AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');\n      return;\n    }\n\n    this.clientSideRowModel.flushAsyncTransactions();\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n    var message = 'AG Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.';\n    doOnce(function () {\n      return console.warn(message);\n    }, 'batchUpdateRowData deprecated');\n    this.applyTransactionAsync(rowDataTransaction, callback);\n  };\n\n  GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {\n    if (skipRefresh === void 0) {\n      skipRefresh = false;\n    }\n\n    console.warn('AG Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');\n    this.updateRowData({\n      add: items,\n      addIndex: index,\n      update: null,\n      remove: null\n    });\n  };\n\n  GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {\n    if (skipRefresh === void 0) {\n      skipRefresh = false;\n    }\n\n    console.warn('AG Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');\n    var dataToRemove = rowNodes.map(function (rowNode) {\n      return rowNode.data;\n    });\n    this.updateRowData({\n      add: null,\n      addIndex: null,\n      update: null,\n      remove: dataToRemove\n    });\n  };\n\n  GridApi.prototype.addItems = function (items, skipRefresh) {\n    if (skipRefresh === void 0) {\n      skipRefresh = false;\n    }\n\n    console.warn('AG Grid: addItems() is deprecated, use updateRowData(transaction) instead.');\n    this.updateRowData({\n      add: items,\n      addIndex: null,\n      update: null,\n      remove: null\n    });\n  };\n\n  GridApi.prototype.refreshVirtualPageCache = function () {\n    console.warn('AG Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n    this.refreshInfiniteCache();\n  };\n\n  GridApi.prototype.refreshInfinitePageCache = function () {\n    console.warn('AG Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n    this.refreshInfiniteCache();\n  };\n\n  GridApi.prototype.refreshInfiniteCache = function () {\n    if (this.infiniteRowModel) {\n      this.infiniteRowModel.refreshCache();\n    } else {\n      console.warn(\"AG Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.\");\n    }\n  };\n\n  GridApi.prototype.purgeVirtualPageCache = function () {\n    console.warn('AG Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n    this.purgeInfinitePageCache();\n  };\n\n  GridApi.prototype.purgeInfinitePageCache = function () {\n    console.warn('AG Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n    this.purgeInfiniteCache();\n  };\n\n  GridApi.prototype.purgeInfiniteCache = function () {\n    if (this.infiniteRowModel) {\n      this.infiniteRowModel.purgeCache();\n    } else {\n      console.warn(\"AG Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.\");\n    }\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.purgeEnterpriseCache = function (route) {\n    console.warn(\"ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()\");\n    this.purgeServerSideCache(route);\n  };\n  /** @deprecated */\n\n\n  GridApi.prototype.purgeServerSideCache = function (route) {\n    if (route === void 0) {\n      route = [];\n    }\n\n    if (this.serverSideRowModel) {\n      console.warn(\"AG Grid: since v25.0, api.purgeServerSideCache is deprecated. Please use api.refreshServerSideStore({purge: true}) instead.\");\n      this.refreshServerSideStore({\n        route: route,\n        purge: true\n      });\n    } else {\n      console.warn(\"AG Grid: api.purgeServerSideCache is only available when rowModelType='serverSide'.\");\n    }\n  };\n\n  GridApi.prototype.refreshServerSideStore = function (params) {\n    if (this.serverSideRowModel) {\n      this.serverSideRowModel.refreshStore(params);\n    } else {\n      console.warn(\"AG Grid: api.refreshServerSideStore is only available when rowModelType='serverSide'.\");\n    }\n  };\n\n  GridApi.prototype.getServerSideStoreState = function () {\n    if (this.serverSideRowModel) {\n      return this.serverSideRowModel.getStoreState();\n    } else {\n      console.warn(\"AG Grid: api.getServerSideStoreState is only available when rowModelType='serverSide'.\");\n      return [];\n    }\n  };\n\n  GridApi.prototype.getVirtualRowCount = function () {\n    console.warn('AG Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');\n    return this.getInfiniteRowCount();\n  };\n\n  GridApi.prototype.getInfiniteRowCount = function () {\n    if (this.infiniteRowModel) {\n      return this.infiniteRowModel.getRowCount();\n    } else {\n      console.warn(\"AG Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.\");\n    }\n  };\n\n  GridApi.prototype.isMaxRowFound = function () {\n    console.warn(\"AG Grid: api.isLastRowIndexKnown is deprecated, please use api.isLastRowIndexKnown()\");\n    return this.isLastRowIndexKnown();\n  };\n\n  GridApi.prototype.isLastRowIndexKnown = function () {\n    if (this.infiniteRowModel) {\n      return this.infiniteRowModel.isLastRowIndexKnown();\n    } else {\n      console.warn(\"AG Grid: api.isMaxRowFound is only available when rowModelType='virtual'.\");\n    }\n  };\n\n  GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n    console.warn('AG Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');\n    this.setRowCount(rowCount, maxRowFound);\n  };\n\n  GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {\n    console.warn('AG Grid: setInfiniteRowCount() is now called setRowCount(), please call setRowCount() instead');\n    this.setRowCount(rowCount, maxRowFound);\n  };\n\n  GridApi.prototype.setRowCount = function (rowCount, maxRowFound) {\n    if (this.infiniteRowModel) {\n      this.infiniteRowModel.setRowCount(rowCount, maxRowFound);\n    } else {\n      console.warn(\"AG Grid: api.setRowCount is only available for Infinite Row Model.\");\n    }\n  };\n\n  GridApi.prototype.getVirtualPageState = function () {\n    console.warn('AG Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n    return this.getCacheBlockState();\n  };\n\n  GridApi.prototype.getInfinitePageState = function () {\n    console.warn('AG Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n    return this.getCacheBlockState();\n  };\n\n  GridApi.prototype.getCacheBlockState = function () {\n    return this.rowNodeBlockLoader.getBlockState();\n  };\n\n  GridApi.prototype.checkGridSize = function () {\n    console.warn(\"in AG Grid v25.2.0, checkGridSize() was removed, as it was legacy and didn't do anything uesful.\");\n  };\n\n  GridApi.prototype.getFirstRenderedRow = function () {\n    console.warn('in AG Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');\n    return this.getFirstDisplayedRow();\n  };\n\n  GridApi.prototype.getFirstDisplayedRow = function () {\n    return this.rowRenderer.getFirstVirtualRenderedRow();\n  };\n\n  GridApi.prototype.getLastRenderedRow = function () {\n    console.warn('in AG Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');\n    return this.getLastDisplayedRow();\n  };\n\n  GridApi.prototype.getLastDisplayedRow = function () {\n    return this.rowRenderer.getLastVirtualRenderedRow();\n  };\n\n  GridApi.prototype.getDisplayedRowAtIndex = function (index) {\n    return this.rowModel.getRow(index);\n  };\n\n  GridApi.prototype.getDisplayedRowCount = function () {\n    return this.rowModel.getRowCount();\n  };\n\n  GridApi.prototype.paginationIsLastPageFound = function () {\n    return this.paginationProxy.isLastPageFound();\n  };\n\n  GridApi.prototype.paginationGetPageSize = function () {\n    return this.paginationProxy.getPageSize();\n  };\n\n  GridApi.prototype.paginationSetPageSize = function (size) {\n    this.gridOptionsWrapper.setProperty('paginationPageSize', size);\n  };\n\n  GridApi.prototype.paginationGetCurrentPage = function () {\n    return this.paginationProxy.getCurrentPage();\n  };\n\n  GridApi.prototype.paginationGetTotalPages = function () {\n    return this.paginationProxy.getTotalPages();\n  };\n\n  GridApi.prototype.paginationGetRowCount = function () {\n    return this.paginationProxy.getMasterRowCount();\n  };\n\n  GridApi.prototype.paginationGoToNextPage = function () {\n    this.paginationProxy.goToNextPage();\n  };\n\n  GridApi.prototype.paginationGoToPreviousPage = function () {\n    this.paginationProxy.goToPreviousPage();\n  };\n\n  GridApi.prototype.paginationGoToFirstPage = function () {\n    this.paginationProxy.goToFirstPage();\n  };\n\n  GridApi.prototype.paginationGoToLastPage = function () {\n    this.paginationProxy.goToLastPage();\n  };\n\n  GridApi.prototype.paginationGoToPage = function (page) {\n    this.paginationProxy.goToPage(page);\n  };\n\n  __decorate([Optional('immutableService')], GridApi.prototype, \"immutableService\", void 0);\n\n  __decorate([Optional('csvCreator')], GridApi.prototype, \"csvCreator\", void 0);\n\n  __decorate([Optional('excelCreator')], GridApi.prototype, \"excelCreator\", void 0);\n\n  __decorate([Autowired('rowRenderer')], GridApi.prototype, \"rowRenderer\", void 0);\n\n  __decorate([Autowired('navigationService')], GridApi.prototype, \"navigationService\", void 0);\n\n  __decorate([Autowired('filterManager')], GridApi.prototype, \"filterManager\", void 0);\n\n  __decorate([Autowired('columnModel')], GridApi.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('selectionService')], GridApi.prototype, \"selectionService\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], GridApi.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('valueService')], GridApi.prototype, \"valueService\", void 0);\n\n  __decorate([Autowired('alignedGridsService')], GridApi.prototype, \"alignedGridsService\", void 0);\n\n  __decorate([Autowired('eventService')], GridApi.prototype, \"eventService\", void 0);\n\n  __decorate([Autowired('pinnedRowModel')], GridApi.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([Autowired('context')], GridApi.prototype, \"context\", void 0);\n\n  __decorate([Autowired('rowModel')], GridApi.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('sortController')], GridApi.prototype, \"sortController\", void 0);\n\n  __decorate([Autowired('paginationProxy')], GridApi.prototype, \"paginationProxy\", void 0);\n\n  __decorate([Autowired('focusService')], GridApi.prototype, \"focusService\", void 0);\n\n  __decorate([Autowired('dragAndDropService')], GridApi.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([Optional('rangeService')], GridApi.prototype, \"rangeService\", void 0);\n\n  __decorate([Optional('clipboardService')], GridApi.prototype, \"clipboardService\", void 0);\n\n  __decorate([Optional('aggFuncService')], GridApi.prototype, \"aggFuncService\", void 0);\n\n  __decorate([Autowired('menuFactory')], GridApi.prototype, \"menuFactory\", void 0);\n\n  __decorate([Optional('contextMenuFactory')], GridApi.prototype, \"contextMenuFactory\", void 0);\n\n  __decorate([Autowired('valueCache')], GridApi.prototype, \"valueCache\", void 0);\n\n  __decorate([Autowired('animationFrameService')], GridApi.prototype, \"animationFrameService\", void 0);\n\n  __decorate([Optional('statusBarService')], GridApi.prototype, \"statusBarService\", void 0);\n\n  __decorate([Optional('chartService')], GridApi.prototype, \"chartService\", void 0);\n\n  __decorate([Optional('undoRedoService')], GridApi.prototype, \"undoRedoService\", void 0);\n\n  __decorate([Optional('rowNodeBlockLoader')], GridApi.prototype, \"rowNodeBlockLoader\", void 0);\n\n  __decorate([Optional('ssrmTransactionManager')], GridApi.prototype, \"serverSideTransactionManager\", void 0);\n\n  __decorate([Autowired('ctrlsService')], GridApi.prototype, \"ctrlsService\", void 0);\n\n  __decorate([PostConstruct], GridApi.prototype, \"init\", null);\n\n  __decorate([PreDestroy], GridApi.prototype, \"cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid\", null);\n\n  GridApi = __decorate([Bean('gridApi')], GridApi);\n  return GridApi;\n}();\n\nexport { GridApi };","map":{"version":3,"sources":["/Users/mphelps/react-app/TasQDashboard-main/node_modules/@ag-grid-community/core/dist/es6/gridApi.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","GridOptionsWrapper","Constants","Autowired","Bean","Optional","PostConstruct","PreDestroy","ExcelFactoryMode","SideBarDefParser","ModuleNames","ClientSideRowModelSteps","ModuleRegistry","iterateObject","removeAllReferences","exists","missing","camelCaseToHumanText","doOnce","GridApi","detailGridInfoMap","destroyCalled","prototype","registerOverlayWrapperComp","overlayWrapperComp","registerHeaderRootComp","headerRootComp","registerSideBarComp","sideBarComp","init","_this","rowModel","getType","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideRowModel","ROW_MODEL_TYPE_INFINITE","infiniteRowModel","ROW_MODEL_TYPE_SERVER_SIDE","serverSideRowModel","ctrlsService","whenReady","gridBodyCon","getGridBodyCtrl","__getAlignedGridService","alignedGridsService","addDetailGridInfo","id","gridInfo","removeDetailGridInfo","undefined","getDetailGridInfo","forEachDetailGridInfo","callback","index","getDataAsCsv","params","assertRegistered","CsvExportModule","csvCreator","exportDataAsCsv","getDataAsExcel","ExcelExportModule","exportMode","excelCreator","getFactoryMode","MULTI_SHEET","console","warn","exportDataAsExcel","getSheetDataForExcel","setFactoryMode","getMultipleSheetsAsExcel","exportMultipleSheetsAsExcel","setEnterpriseDatasource","datasource","setServerSideDatasource","setGridAriaProperty","property","value","eGrid","getGui","ariaProperty","removeAttribute","setAttribute","setDatasource","gridOptionsWrapper","isRowModelInfinite","setViewportDatasource","viewportDatasource","isRowModelViewport","ROW_MODEL_TYPE_VIEWPORT","setRowData","rowData","isRowModelDefault","isImmutableData","transactionAndMap","immutableService","createTransactionForRowData","transaction","orderIdMap","nodeTransaction","updateRowData","rowRenderer","refreshFullWidthRows","update","selectionService","reset","setFloatingTopRowData","rows","setPinnedTopRowData","setFloatingBottomRowData","setPinnedBottomRowData","getFloatingTopRowCount","getPinnedTopRowCount","getFloatingBottomRowCount","getPinnedBottomRowCount","getFloatingTopRow","getPinnedTopRow","getFloatingBottomRow","getPinnedBottomRow","pinnedRowModel","setColumnDefs","colDefs","source","columnModel","setAutoGroupColumnDef","colDef","setProperty","expireValueCache","valueCache","expire","getVerticalPixelRange","getScrollFeature","getVScrollPosition","getHorizontalPixelRange","getHScrollPosition","setAlwaysShowHorizontalScroll","show","setAlwaysShowVerticalScroll","refreshToolPanel","refresh","refreshCells","Array","isArray","flashCells","redrawRows","rowNodes","refreshView","refreshRows","rowDataChanged","softRefreshView","error","refreshGroupRows","setFunctionsReadOnly","readOnly","refreshHeader","isAnyFilterPresent","filterManager","isAdvancedFilterPresent","isColumnFilterPresent","isQuickFilterPresent","getModel","setRowNodeExpanded","rowNode","expanded","setExpanded","onGroupExpandedOrCollapsed","deprecated_refreshFromIndex","refreshModel","step","MAP","refreshInMemoryRowModel","refreshClientSideRowModel","paramsStep","EVERYTHING","stepsMapped","group","filter","FILTER","map","aggregate","AGGREGATE","sort","SORT","pivot","PIVOT","keys","join","modelParams","keepRenderedRows","animate","keepEditingRows","isAnimationFrameQueueEmpty","animationFrameService","isQueueEmpty","flushAllAnimationFrames","flushAllFrames","getRowNode","getSizesForCurrentTheme","rowHeight","getRowHeightAsNumber","headerHeight","getHeaderHeight","expandAll","expandOrCollapseAll","collapseAll","getToolPanelInstance","addVirtualRowListener","eventName","rowIndex","addRenderedRowListener","setQuickFilter","newFilter","selectIndex","tryMulti","suppressEvents","deselectIndex","selectNode","node","setSelectedParams","newValue","clearSelection","deselectNode","selectAll","selectAllRowNodes","deselectAll","deselectAllRowNodes","selectAllFiltered","deselectAllFiltered","recomputeAggregates","sizeColumnsToFit","showLoadingOverlay","showNoRowsOverlay","hideOverlay","isNodeSelected","isSelected","getSelectedNodesById","getSelectedNodes","getSelectedRows","getBestCostNodeSelection","getRenderedNodes","ensureColIndexVisible","ensureColumnVisible","ensureIndexVisible","position","ensureNodeVisible","comparator","forEachLeafNode","forEachNode","forEachNodeAfterFilter","forEachNodeAfterFilterAndSort","getFilterApiForColDef","getFilterInstance","column","getPrimaryColumn","filterPromise","getFilterComponent","currentValue","resolveNow","filterComp","setTimeout","then","getFilterApi","destroyFilter","getStatusPanel","statusBarService","getColumnDef","getColDef","getColumnDefs","onFilterChanged","onSortChanged","sortController","setSortModel","sortModel","columnState","forEach","item","push","colId","sortIndex","applyColumnState","state","defaultState","getSortModel","getColumnState","filteredStates","indexes","res","s","a","b","setFilterModel","model","getFilterModel","getFocusedCell","focusService","clearFocusedCell","setFocusedCell","colKey","floating","setSuppressRowDrag","PROP_SUPPRESS_ROW_DRAG","setSuppressMoveWhenRowDragging","PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG","setSuppressRowClickSelection","PROP_SUPPRESS_ROW_CLICK_SELECTION","addRowDropZone","getRowDragFeature","removeRowDropZone","activeDropTarget","dragAndDropService","findExternalZone","removeDropTarget","getRowDropZoneParams","events","getRowDropZone","setHeaderHeight","PROP_HEADER_HEIGHT","setDomLayout","domLayout","PROP_DOM_LAYOUT","setEnableCellTextSelection","selectable","setCellTextSelection","setFillHandleDirection","direction","PROP_FILL_HANDLE_DIRECTION","setGroupHeaderHeight","PROP_GROUP_HEADER_HEIGHT","setFloatingFiltersHeight","PROP_FLOATING_FILTERS_HEIGHT","setPivotGroupHeaderHeight","PROP_PIVOT_GROUP_HEADER_HEIGHT","setIsExternalFilterPresent","isExternalFilterPresentFunc","PROP_IS_EXTERNAL_FILTER_PRESENT","setDoesExternalFilterPass","doesExternalFilterPassFunc","PROP_DOES_EXTERNAL_FILTER_PASS","setNavigateToNextCell","navigateToNextCellFunc","PROP_NAVIGATE_TO_NEXT_CELL","setTabToNextCell","tabToNextCellFunc","PROP_TAB_TO_NEXT_CELL","setTabToNextHeader","tabToNextHeaderFunc","PROP_TAB_TO_NEXT_HEADER","setNavigateToNextHeader","navigateToNextHeaderFunc","PROP_NAVIGATE_TO_NEXT_HEADER","setGroupRowAggNodes","groupRowAggNodesFunc","PROP_GROUP_ROW_AGG_NODES","setGetBusinessKeyForNode","getBusinessKeyForNodeFunc","PROP_GET_BUSINESS_KEY_FOR_NODE","setGetChildCount","getChildCountFunc","PROP_GET_CHILD_COUNT","setProcessRowPostCreate","processRowPostCreateFunc","PROP_PROCESS_ROW_POST_CREATE","setGetRowNodeId","getRowNodeIdFunc","PROP_GET_ROW_NODE_ID","setGetRowClass","rowClassFunc","PROP_GET_ROW_CLASS","setIsFullWidthCell","isFullWidthCellFunc","PROP_IS_FULL_WIDTH_CELL","setIsRowSelectable","isRowSelectableFunc","PROP_IS_ROW_SELECTABLE","setIsRowMaster","isRowMasterFunc","PROP_IS_ROW_MASTER","setPostSort","postSortFunc","PROP_POST_SORT","setGetDocument","getDocumentFunc","PROP_GET_DOCUMENT","setGetContextMenuItems","getContextMenuItemsFunc","PROP_GET_CONTEXT_MENU_ITEMS","setGetMainMenuItems","getMainMenuItemsFunc","PROP_GET_MAIN_MENU_ITEMS","setProcessCellForClipboard","processCellForClipboardFunc","PROP_PROCESS_CELL_FOR_CLIPBOARD","setSendToClipboard","sendToClipboardFunc","PROP_SEND_TO_CLIPBOARD","setProcessCellFromClipboard","processCellFromClipboardFunc","PROP_PROCESS_CELL_FROM_CLIPBOARD","setProcessSecondaryColDef","processSecondaryColDefFunc","PROP_PROCESS_TO_SECONDARY_COLDEF","setProcessSecondaryColGroupDef","processSecondaryColGroupDefFunc","PROP_PROCESS_SECONDARY_COL_GROUP_DEF","setPostProcessPopup","postProcessPopupFunc","PROP_POST_PROCESS_POPUP","setDefaultGroupOrderComparator","defaultGroupOrderComparatorFunc","PROP_DEFAULT_GROUP_ORDER_COMPARATOR","setProcessChartOptions","processChartOptionsFunc","PROP_PROCESS_CHART_OPTIONS","setGetChartToolbarItems","getChartToolbarItemsFunc","PROP_GET_CHART_TOOLBAR_ITEMS","setPaginationNumberFormatter","paginationNumberFormatterFunc","PROP_PAGINATION_NUMBER_FORMATTER","setGetServerSideStoreParams","getServerSideStoreParamsFunc","PROP_GET_SERVER_SIDE_STORE_PARAMS","setIsServerSideGroupOpenByDefault","isServerSideGroupOpenByDefaultFunc","PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT","setIsApplyServerSideTransaction","isApplyServerSideTransactionFunc","PROP_IS_APPLY_SERVER_SIDE_TRANSACTION","setIsServerSideGroup","isServerSideGroupFunc","PROP_IS_SERVER_SIDE_GROUP","setGetServerSideGroupKey","getServerSideGroupKeyFunc","PROP_GET_SERVER_SIDE_GROUP_KEY","setGetRowStyle","rowStyleFunc","PROP_GET_ROW_STYLE","setGetRowHeight","rowHeightFunc","PROP_GET_ROW_HEIGHT","setPivotHeaderHeight","PROP_PIVOT_HEADER_HEIGHT","isSideBarVisible","isDisplayed","setSideBarVisible","setDisplayed","setSideBarPosition","openToolPanel","closeToolPanel","close","getOpenedToolPanel","openedItem","getSideBar","setSideBar","def","parse","setSuppressClipboardPaste","PROP_SUPPRESS_CLIPBOARD_PASTE","isToolPanelShowing","doLayout","message","resetRowHeights","setGroupRemoveSingleChildren","PROP_GROUP_REMOVE_SINGLE_CHILDREN","setGroupRemoveLowestSingleChildren","PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN","onRowHeightChanged","getValue","getGridColumn","valueService","addEventListener","eventType","listener","async","useAsyncEvents","eventService","addGlobalListener","removeEventListener","removeGlobalListener","dispatchEvent","event","destroy","gridCtrl","getGridCtrl","destroyGridUi","context","cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid","bind","window","warnIfDestroyed","methodName","resetQuickFilter","quickFilterAggregateText","getRangeSelections","getCellRanges","rangeService","camelCaseToHumanReadable","camelCase","addRangeSelection","deprecatedNoLongerUsed","addCellRange","clearRangeSelection","removeAllCellRanges","undoCellEditing","undoRedoService","undo","redoCellEditing","redo","getCurrentUndoSize","getCurrentUndoStackSize","getCurrentRedoSize","getCurrentRedoStackSize","getChartModels","RangeSelectionModule","GridChartsModule","chartService","getChartRef","chartId","getChartImageDataURL","createRangeChart","createCrossFilterChart","restoreChart","chartModel","chartContainer","createPivotChart","copySelectedRowsToClipboard","includeHeader","columnKeys","clipboardService","copySelectedRangeToClipboard","copySelectedRangeDown","copyRangeDown","showColumnMenuAfterButtonClick","buttonElement","menuFactory","showMenuAfterButtonClick","showColumnMenuAfterMouseClick","mouseEvent","showMenuAfterMouseEvent","hidePopupMenu","contextMenuFactory","hideActiveMenu","setPopupParent","ePopupParent","PROP_POPUP_PARENT","tabToNextCell","navigationService","tabToPreviousCell","getCellRendererInstances","getCellEditorInstances","getEditingCells","stopEditing","cancel","startEditingCell","cellPosition","rowPinned","notPinned","cell","getCellByPosition","startRowOrCellEdit","keyPress","charPress","addAggFunc","aggFunc","aggFuncService","addAggFuncs","aggFuncs","clearAggFuncs","clear","applyServerSideTransaction","serverSideTransactionManager","applyTransaction","applyServerSideTransactionAsync","applyTransactionAsync","retryServerSideLoads","retryLoads","flushServerSideAsyncTransactions","flushAsyncTransactions","rowDataTransaction","isSuppressChangeDetection","batchUpdateRowData","insertItemsAtIndex","items","skipRefresh","add","addIndex","remove","removeItems","dataToRemove","data","addItems","refreshVirtualPageCache","refreshInfiniteCache","refreshInfinitePageCache","refreshCache","purgeVirtualPageCache","purgeInfinitePageCache","purgeInfiniteCache","purgeCache","purgeEnterpriseCache","route","purgeServerSideCache","refreshServerSideStore","purge","refreshStore","getServerSideStoreState","getStoreState","getVirtualRowCount","getInfiniteRowCount","getRowCount","isMaxRowFound","isLastRowIndexKnown","setVirtualRowCount","rowCount","maxRowFound","setRowCount","setInfiniteRowCount","getVirtualPageState","getCacheBlockState","getInfinitePageState","rowNodeBlockLoader","getBlockState","checkGridSize","getFirstRenderedRow","getFirstDisplayedRow","getFirstVirtualRenderedRow","getLastRenderedRow","getLastDisplayedRow","getLastVirtualRenderedRow","getDisplayedRowAtIndex","getRow","getDisplayedRowCount","paginationIsLastPageFound","paginationProxy","isLastPageFound","paginationGetPageSize","getPageSize","paginationSetPageSize","size","paginationGetCurrentPage","getCurrentPage","paginationGetTotalPages","getTotalPages","paginationGetRowCount","getMasterRowCount","paginationGoToNextPage","goToNextPage","paginationGoToPreviousPage","goToPreviousPage","paginationGoToFirstPage","goToFirstPage","paginationGoToLastPage","goToLastPage","paginationGoToPage","page","goToPage"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { Constants } from \"./constants/constants\";\nimport { Autowired, Bean, Optional, PostConstruct, PreDestroy } from \"./context/context\";\nimport { ExcelFactoryMode } from \"./interfaces/iExcelCreator\";\nimport { SideBarDefParser } from \"./entities/sideBar\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { ClientSideRowModelSteps } from \"./interfaces/iClientSideRowModel\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { iterateObject, removeAllReferences } from \"./utils/object\";\nimport { exists, missing } from \"./utils/generic\";\nimport { camelCaseToHumanText } from \"./utils/string\";\nimport { doOnce } from \"./utils/function\";\nvar GridApi = /** @class */ (function () {\n    function GridApi() {\n        this.detailGridInfoMap = {};\n        this.destroyCalled = false;\n    }\n    GridApi.prototype.registerOverlayWrapperComp = function (overlayWrapperComp) {\n        this.overlayWrapperComp = overlayWrapperComp;\n    };\n    GridApi.prototype.registerHeaderRootComp = function (headerRootComp) {\n        this.headerRootComp = headerRootComp;\n    };\n    GridApi.prototype.registerSideBarComp = function (sideBarComp) {\n        this.sideBarComp = sideBarComp;\n    };\n    GridApi.prototype.init = function () {\n        var _this = this;\n        switch (this.rowModel.getType()) {\n            case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:\n                this.clientSideRowModel = this.rowModel;\n                break;\n            case Constants.ROW_MODEL_TYPE_INFINITE:\n                this.infiniteRowModel = this.rowModel;\n                break;\n            case Constants.ROW_MODEL_TYPE_SERVER_SIDE:\n                this.serverSideRowModel = this.rowModel;\n                break;\n        }\n        this.ctrlsService.whenReady(function () {\n            _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();\n        });\n    };\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    GridApi.prototype.__getAlignedGridService = function () {\n        return this.alignedGridsService;\n    };\n    GridApi.prototype.addDetailGridInfo = function (id, gridInfo) {\n        this.detailGridInfoMap[id] = gridInfo;\n    };\n    GridApi.prototype.removeDetailGridInfo = function (id) {\n        this.detailGridInfoMap[id] = undefined;\n    };\n    GridApi.prototype.getDetailGridInfo = function (id) {\n        return this.detailGridInfoMap[id];\n    };\n    GridApi.prototype.forEachDetailGridInfo = function (callback) {\n        var index = 0;\n        iterateObject(this.detailGridInfoMap, function (id, gridInfo) {\n            // check for undefined, as old references will still be lying around\n            if (exists(gridInfo)) {\n                callback(gridInfo, index);\n                index++;\n            }\n        });\n    };\n    GridApi.prototype.getDataAsCsv = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.getDataAsCsv')) {\n            return this.csvCreator.getDataAsCsv(params);\n        }\n    };\n    GridApi.prototype.exportDataAsCsv = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.exportDataAsCSv')) {\n            this.csvCreator.exportDataAsCsv(params);\n        }\n    };\n    GridApi.prototype.getDataAsExcel = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getDataAsExcel')) {\n            var exportMode = (params && params.exportMode) || 'xlsx';\n            if (this.excelCreator.getFactoryMode(exportMode) === ExcelFactoryMode.MULTI_SHEET) {\n                console.warn('AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`');\n                return;\n            }\n            return this.excelCreator.getDataAsExcel(params);\n        }\n    };\n    GridApi.prototype.exportDataAsExcel = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.exportDataAsExcel')) {\n            var exportMode = (params && params.exportMode) || 'xlsx';\n            if (this.excelCreator.getFactoryMode(exportMode) === ExcelFactoryMode.MULTI_SHEET) {\n                console.warn('AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`');\n                return;\n            }\n            this.excelCreator.exportDataAsExcel(params);\n        }\n    };\n    GridApi.prototype.getSheetDataForExcel = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getSheetDataForExcel')) {\n            var exportMode = (params && params.exportMode) || 'xlsx';\n            this.excelCreator.setFactoryMode(ExcelFactoryMode.MULTI_SHEET, exportMode);\n            return this.excelCreator.getSheetDataForExcel(params);\n        }\n    };\n    GridApi.prototype.getMultipleSheetsAsExcel = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getMultipleSheetsAsExcel')) {\n            return this.excelCreator.getMultipleSheetsAsExcel(params);\n        }\n    };\n    GridApi.prototype.exportMultipleSheetsAsExcel = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.exportMultipleSheetsAsExcel')) {\n            return this.excelCreator.exportMultipleSheetsAsExcel(params);\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.setEnterpriseDatasource = function (datasource) {\n        console.warn(\"ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()\");\n        this.setServerSideDatasource(datasource);\n    };\n    GridApi.prototype.setGridAriaProperty = function (property, value) {\n        if (!property) {\n            return;\n        }\n        var eGrid = this.ctrlsService.getGridBodyCtrl().getGui();\n        var ariaProperty = \"aria-\" + property;\n        if (value === null) {\n            eGrid.removeAttribute(ariaProperty);\n        }\n        else {\n            eGrid.setAttribute(ariaProperty, value);\n        }\n    };\n    GridApi.prototype.setServerSideDatasource = function (datasource) {\n        if (this.serverSideRowModel) {\n            // should really have an IEnterpriseRowModel interface, so we are not casting to any\n            this.serverSideRowModel.setDatasource(datasource);\n        }\n        else {\n            console.warn(\"AG Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_SERVER_SIDE + \"'\");\n        }\n    };\n    GridApi.prototype.setDatasource = function (datasource) {\n        if (this.gridOptionsWrapper.isRowModelInfinite()) {\n            this.rowModel.setDatasource(datasource);\n        }\n        else {\n            console.warn(\"AG Grid: you can only use a datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_INFINITE + \"'\");\n        }\n    };\n    GridApi.prototype.setViewportDatasource = function (viewportDatasource) {\n        if (this.gridOptionsWrapper.isRowModelViewport()) {\n            // this is bad coding, because it's using an interface that's exposed in the enterprise.\n            // really we should create an interface in the core for viewportDatasource and let\n            // the enterprise implement it, rather than casting to 'any' here\n            this.rowModel.setViewportDatasource(viewportDatasource);\n        }\n        else {\n            console.warn(\"AG Grid: you can only use a viewport datasource when gridOptions.rowModelType is '\" + Constants.ROW_MODEL_TYPE_VIEWPORT + \"'\");\n        }\n    };\n    GridApi.prototype.setRowData = function (rowData) {\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            if (this.gridOptionsWrapper.isImmutableData()) {\n                var transactionAndMap = this.immutableService.createTransactionForRowData(rowData);\n                if (!transactionAndMap) {\n                    return;\n                }\n                var transaction = transactionAndMap[0], orderIdMap = transactionAndMap[1];\n                var nodeTransaction = this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n                // need to force updating of full width rows - note this wouldn't be necessary the full width cell comp listened\n                // to the data change event on the row node and refreshed itself.\n                if (nodeTransaction) {\n                    this.rowRenderer.refreshFullWidthRows(nodeTransaction.update);\n                }\n            }\n            else {\n                this.selectionService.reset();\n                this.clientSideRowModel.setRowData(rowData);\n            }\n        }\n        else {\n            console.warn('cannot call setRowData unless using normal row model');\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.setFloatingTopRowData = function (rows) {\n        console.warn('AG Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');\n        this.setPinnedTopRowData(rows);\n    };\n    /** @deprecated */\n    GridApi.prototype.setFloatingBottomRowData = function (rows) {\n        console.warn('AG Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');\n        this.setPinnedBottomRowData(rows);\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingTopRowCount = function () {\n        console.warn('AG Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');\n        return this.getPinnedTopRowCount();\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingBottomRowCount = function () {\n        console.warn('AG Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');\n        return this.getPinnedBottomRowCount();\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingTopRow = function (index) {\n        console.warn('AG Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');\n        return this.getPinnedTopRow(index);\n    };\n    /** @deprecated */\n    GridApi.prototype.getFloatingBottomRow = function (index) {\n        console.warn('AG Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');\n        return this.getPinnedBottomRow(index);\n    };\n    GridApi.prototype.setPinnedTopRowData = function (rows) {\n        this.pinnedRowModel.setPinnedTopRowData(rows);\n    };\n    GridApi.prototype.setPinnedBottomRowData = function (rows) {\n        this.pinnedRowModel.setPinnedBottomRowData(rows);\n    };\n    GridApi.prototype.getPinnedTopRowCount = function () {\n        return this.pinnedRowModel.getPinnedTopRowCount();\n    };\n    GridApi.prototype.getPinnedBottomRowCount = function () {\n        return this.pinnedRowModel.getPinnedBottomRowCount();\n    };\n    GridApi.prototype.getPinnedTopRow = function (index) {\n        return this.pinnedRowModel.getPinnedTopRow(index);\n    };\n    GridApi.prototype.getPinnedBottomRow = function (index) {\n        return this.pinnedRowModel.getPinnedBottomRow(index);\n    };\n    GridApi.prototype.setColumnDefs = function (colDefs, source) {\n        if (source === void 0) { source = \"api\"; }\n        this.columnModel.setColumnDefs(colDefs, source);\n    };\n    GridApi.prototype.setAutoGroupColumnDef = function (colDef, source) {\n        if (source === void 0) { source = \"api\"; }\n        this.gridOptionsWrapper.setProperty('autoGroupColumnDef', colDef, true);\n    };\n    GridApi.prototype.expireValueCache = function () {\n        this.valueCache.expire();\n    };\n    GridApi.prototype.getVerticalPixelRange = function () {\n        return this.gridBodyCon.getScrollFeature().getVScrollPosition();\n    };\n    GridApi.prototype.getHorizontalPixelRange = function () {\n        return this.gridBodyCon.getScrollFeature().getHScrollPosition();\n    };\n    GridApi.prototype.setAlwaysShowHorizontalScroll = function (show) {\n        this.gridOptionsWrapper.setProperty('alwaysShowHorizontalScroll', show);\n    };\n    GridApi.prototype.setAlwaysShowVerticalScroll = function (show) {\n        this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);\n    };\n    GridApi.prototype.refreshToolPanel = function () {\n        if (!this.sideBarComp) {\n            return;\n        }\n        this.sideBarComp.refresh();\n    };\n    GridApi.prototype.refreshCells = function (params) {\n        if (params === void 0) { params = {}; }\n        if (Array.isArray(params)) {\n            // the old version of refreshCells() took an array of rowNodes for the first argument\n            console.warn('since AG Grid v11.1, refreshCells() now takes parameters, please see the documentation.');\n            return;\n        }\n        this.rowRenderer.refreshCells(params);\n    };\n    GridApi.prototype.flashCells = function (params) {\n        if (params === void 0) { params = {}; }\n        this.rowRenderer.flashCells(params);\n    };\n    GridApi.prototype.redrawRows = function (params) {\n        if (params === void 0) { params = {}; }\n        var rowNodes = params ? params.rowNodes : undefined;\n        this.rowRenderer.redrawRows(rowNodes);\n    };\n    /** @deprecated */\n    GridApi.prototype.refreshView = function () {\n        console.warn('AG Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead');\n        this.redrawRows();\n    };\n    /** @deprecated */\n    GridApi.prototype.refreshRows = function (rowNodes) {\n        console.warn('since AG Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');\n        this.refreshCells({ rowNodes: rowNodes });\n    };\n    /** @deprecated */\n    GridApi.prototype.rowDataChanged = function (rows) {\n        console.warn('AG Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');\n        this.redrawRows();\n    };\n    /** @deprecated */\n    GridApi.prototype.softRefreshView = function () {\n        console.error('AG Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.');\n    };\n    /** @deprecated */\n    GridApi.prototype.refreshGroupRows = function () {\n        console.warn('AG Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' +\n            'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' +\n            'not be necessary to only refresh the group rows.');\n        this.refreshCells();\n    };\n    GridApi.prototype.setFunctionsReadOnly = function (readOnly) {\n        this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);\n    };\n    GridApi.prototype.refreshHeader = function () {\n        this.headerRootComp.refreshHeader();\n    };\n    GridApi.prototype.isAnyFilterPresent = function () {\n        return this.filterManager.isAnyFilterPresent();\n    };\n    /** @deprecated */\n    GridApi.prototype.isAdvancedFilterPresent = function () {\n        console.warn('AG Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()');\n        return this.isColumnFilterPresent();\n    };\n    GridApi.prototype.isColumnFilterPresent = function () {\n        return this.filterManager.isAdvancedFilterPresent();\n    };\n    GridApi.prototype.isQuickFilterPresent = function () {\n        return this.filterManager.isQuickFilterPresent();\n    };\n    GridApi.prototype.getModel = function () {\n        return this.rowModel;\n    };\n    GridApi.prototype.setRowNodeExpanded = function (rowNode, expanded) {\n        if (rowNode) {\n            rowNode.setExpanded(expanded);\n        }\n    };\n    GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {\n        if (missing(this.clientSideRowModel)) {\n            console.warn('AG Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');\n        }\n        if (exists(deprecated_refreshFromIndex)) {\n            console.warn('AG Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows');\n        }\n        // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n        this.clientSideRowModel.refreshModel({ step: ClientSideRowModelSteps.MAP });\n    };\n    GridApi.prototype.refreshInMemoryRowModel = function (step) {\n        console.warn(\"ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()\");\n        this.refreshClientSideRowModel(step);\n    };\n    GridApi.prototype.refreshClientSideRowModel = function (step) {\n        if (missing(this.clientSideRowModel)) {\n            console.warn('cannot call refreshClientSideRowModel unless using normal row model');\n        }\n        var paramsStep = ClientSideRowModelSteps.EVERYTHING;\n        var stepsMapped = {\n            group: ClientSideRowModelSteps.EVERYTHING,\n            filter: ClientSideRowModelSteps.FILTER,\n            map: ClientSideRowModelSteps.MAP,\n            aggregate: ClientSideRowModelSteps.AGGREGATE,\n            sort: ClientSideRowModelSteps.SORT,\n            pivot: ClientSideRowModelSteps.PIVOT\n        };\n        if (exists(step)) {\n            paramsStep = stepsMapped[step];\n        }\n        if (missing(paramsStep)) {\n            console.error(\"AG Grid: invalid step \" + step + \", available steps are \" + Object.keys(stepsMapped).join(', '));\n            return;\n        }\n        var modelParams = {\n            step: paramsStep,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        };\n        this.clientSideRowModel.refreshModel(modelParams);\n    };\n    GridApi.prototype.isAnimationFrameQueueEmpty = function () {\n        return this.animationFrameService.isQueueEmpty();\n    };\n    GridApi.prototype.flushAllAnimationFrames = function () {\n        this.animationFrameService.flushAllFrames();\n    };\n    GridApi.prototype.getRowNode = function (id) {\n        return this.rowModel.getRowNode(id);\n    };\n    GridApi.prototype.getSizesForCurrentTheme = function () {\n        return {\n            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n            headerHeight: this.gridOptionsWrapper.getHeaderHeight()\n        };\n    };\n    GridApi.prototype.expandAll = function () {\n        if (this.clientSideRowModel) {\n            this.clientSideRowModel.expandOrCollapseAll(true);\n        }\n        else if (this.serverSideRowModel) {\n            this.serverSideRowModel.expandAll(true);\n        }\n        else {\n            console.warn('AG Grid: expandAll only works with Client Side Row Model and Server Side Row Model');\n        }\n    };\n    GridApi.prototype.collapseAll = function () {\n        if (this.clientSideRowModel) {\n            this.clientSideRowModel.expandOrCollapseAll(false);\n        }\n        else if (this.serverSideRowModel) {\n            this.serverSideRowModel.expandAll(false);\n        }\n        else {\n            console.warn('AG Grid: collapseAll only works with Client Side Row Model and Server Side Row Model');\n        }\n    };\n    GridApi.prototype.getToolPanelInstance = function (id) {\n        if (!this.sideBarComp) {\n            console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');\n            return;\n        }\n        return this.sideBarComp.getToolPanelInstance(id);\n    };\n    GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {\n        if (typeof eventName !== 'string') {\n            console.warn('AG Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');\n        }\n        this.addRenderedRowListener(eventName, rowIndex, callback);\n    };\n    GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {\n        if (eventName === 'virtualRowSelected') {\n            console.warn(\"AG Grid: event virtualRowSelected is deprecated, to register for individual row\\n                selection events, add a listener directly to the row node.\");\n        }\n        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);\n    };\n    GridApi.prototype.setQuickFilter = function (newFilter) {\n        this.filterManager.setQuickFilter(newFilter);\n    };\n    GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {\n        console.warn('AG Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionService.selectIndex(index, tryMulti);\n    };\n    GridApi.prototype.deselectIndex = function (index, suppressEvents) {\n        if (suppressEvents === void 0) { suppressEvents = false; }\n        console.warn('AG Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionService.deselectIndex(index);\n    };\n    GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {\n        if (tryMulti === void 0) { tryMulti = false; }\n        if (suppressEvents === void 0) { suppressEvents = false; }\n        console.warn('AG Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });\n    };\n    GridApi.prototype.deselectNode = function (node, suppressEvents) {\n        if (suppressEvents === void 0) { suppressEvents = false; }\n        console.warn('AG Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: false });\n    };\n    GridApi.prototype.selectAll = function () {\n        this.selectionService.selectAllRowNodes();\n    };\n    GridApi.prototype.deselectAll = function () {\n        this.selectionService.deselectAllRowNodes();\n    };\n    GridApi.prototype.selectAllFiltered = function () {\n        this.selectionService.selectAllRowNodes(true);\n    };\n    GridApi.prototype.deselectAllFiltered = function () {\n        this.selectionService.deselectAllRowNodes(true);\n    };\n    GridApi.prototype.recomputeAggregates = function () {\n        if (missing(this.clientSideRowModel)) {\n            console.warn('cannot call recomputeAggregates unless using normal row model');\n        }\n        console.warn(\"recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead\");\n        this.clientSideRowModel.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n    };\n    GridApi.prototype.sizeColumnsToFit = function () {\n        this.gridBodyCon.sizeColumnsToFit();\n    };\n    GridApi.prototype.showLoadingOverlay = function () {\n        this.overlayWrapperComp.showLoadingOverlay();\n    };\n    GridApi.prototype.showNoRowsOverlay = function () {\n        this.overlayWrapperComp.showNoRowsOverlay();\n    };\n    GridApi.prototype.hideOverlay = function () {\n        this.overlayWrapperComp.hideOverlay();\n    };\n    GridApi.prototype.isNodeSelected = function (node) {\n        console.warn('AG Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');\n        return node.isSelected();\n    };\n    GridApi.prototype.getSelectedNodesById = function () {\n        console.error('AG Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');\n        return null;\n    };\n    GridApi.prototype.getSelectedNodes = function () {\n        return this.selectionService.getSelectedNodes();\n    };\n    GridApi.prototype.getSelectedRows = function () {\n        return this.selectionService.getSelectedRows();\n    };\n    GridApi.prototype.getBestCostNodeSelection = function () {\n        return this.selectionService.getBestCostNodeSelection();\n    };\n    GridApi.prototype.getRenderedNodes = function () {\n        return this.rowRenderer.getRenderedNodes();\n    };\n    GridApi.prototype.ensureColIndexVisible = function (index) {\n        console.warn('AG Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');\n    };\n    GridApi.prototype.ensureColumnVisible = function (key) {\n        this.gridBodyCon.getScrollFeature().ensureColumnVisible(key);\n    };\n    // Valid values for position are bottom, middle and top\n    GridApi.prototype.ensureIndexVisible = function (index, position) {\n        this.gridBodyCon.getScrollFeature().ensureIndexVisible(index, position);\n    };\n    // Valid values for position are bottom, middle and top\n    GridApi.prototype.ensureNodeVisible = function (comparator, position) {\n        if (position === void 0) { position = null; }\n        this.gridBodyCon.getScrollFeature().ensureNodeVisible(comparator, position);\n    };\n    GridApi.prototype.forEachLeafNode = function (callback) {\n        if (missing(this.clientSideRowModel)) {\n            console.warn('cannot call forEachNode unless using normal row model');\n        }\n        this.clientSideRowModel.forEachLeafNode(callback);\n    };\n    GridApi.prototype.forEachNode = function (callback) {\n        this.rowModel.forEachNode(callback);\n    };\n    GridApi.prototype.forEachNodeAfterFilter = function (callback) {\n        if (missing(this.clientSideRowModel)) {\n            console.warn('cannot call forEachNodeAfterFilter unless using normal row model');\n        }\n        this.clientSideRowModel.forEachNodeAfterFilter(callback);\n    };\n    GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n        if (missing(this.clientSideRowModel)) {\n            console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model');\n        }\n        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n    };\n    GridApi.prototype.getFilterApiForColDef = function (colDef) {\n        console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterInstance instead');\n        return this.getFilterInstance(colDef);\n    };\n    GridApi.prototype.getFilterInstance = function (key, callback) {\n        var column = this.columnModel.getPrimaryColumn(key);\n        if (column) {\n            var filterPromise = this.filterManager.getFilterComponent(column, 'NO_UI');\n            var currentValue = filterPromise && filterPromise.resolveNow(null, function (filterComp) { return filterComp; });\n            if (callback) {\n                if (currentValue) {\n                    setTimeout(callback, 0, currentValue);\n                }\n                else if (filterPromise) {\n                    filterPromise.then(callback);\n                }\n            }\n            return currentValue;\n        }\n    };\n    GridApi.prototype.getFilterApi = function (key) {\n        console.warn('AG Grid: getFilterApi is deprecated, use getFilterInstance instead');\n        return this.getFilterInstance(key);\n    };\n    GridApi.prototype.destroyFilter = function (key) {\n        var column = this.columnModel.getPrimaryColumn(key);\n        if (column) {\n            return this.filterManager.destroyFilter(column, \"filterDestroyed\");\n        }\n    };\n    GridApi.prototype.getStatusPanel = function (key) {\n        if (this.statusBarService) {\n            return this.statusBarService.getStatusPanel(key);\n        }\n    };\n    GridApi.prototype.getColumnDef = function (key) {\n        var column = this.columnModel.getPrimaryColumn(key);\n        if (column) {\n            return column.getColDef();\n        }\n        return null;\n    };\n    GridApi.prototype.getColumnDefs = function () { return this.columnModel.getColumnDefs(); };\n    GridApi.prototype.onFilterChanged = function () {\n        this.filterManager.onFilterChanged();\n    };\n    GridApi.prototype.onSortChanged = function () {\n        this.sortController.onSortChanged();\n    };\n    GridApi.prototype.setSortModel = function (sortModel, source) {\n        if (source === void 0) { source = \"api\"; }\n        console.warn('AG Grid: as of version 24.0.0, setSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.applyColumnState() instead.');\n        var columnState = [];\n        if (sortModel) {\n            sortModel.forEach(function (item, index) {\n                columnState.push({\n                    colId: item.colId,\n                    sort: item.sort,\n                    sortIndex: index\n                });\n            });\n        }\n        this.columnModel.applyColumnState({ state: columnState, defaultState: { sort: null } });\n    };\n    GridApi.prototype.getSortModel = function () {\n        console.warn('AG Grid: as of version 24.0.0, getSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.getColumnState() instead.');\n        var columnState = this.columnModel.getColumnState();\n        var filteredStates = columnState.filter(function (item) { return item.sort != null; });\n        var indexes = {};\n        filteredStates.forEach(function (state) {\n            var id = state.colId;\n            var sortIndex = state.sortIndex;\n            indexes[id] = sortIndex;\n        });\n        var res = filteredStates.map(function (s) {\n            return { colId: s.colId, sort: s.sort };\n        });\n        res.sort(function (a, b) { return indexes[a.colId] - indexes[b.colId]; });\n        return res;\n    };\n    GridApi.prototype.setFilterModel = function (model) {\n        this.filterManager.setFilterModel(model);\n    };\n    GridApi.prototype.getFilterModel = function () {\n        return this.filterManager.getFilterModel();\n    };\n    GridApi.prototype.getFocusedCell = function () {\n        return this.focusService.getFocusedCell();\n    };\n    GridApi.prototype.clearFocusedCell = function () {\n        return this.focusService.clearFocusedCell();\n    };\n    GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {\n        this.focusService.setFocusedCell(rowIndex, colKey, floating, true);\n    };\n    GridApi.prototype.setSuppressRowDrag = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);\n    };\n    GridApi.prototype.setSuppressMoveWhenRowDragging = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, value);\n    };\n    GridApi.prototype.setSuppressRowClickSelection = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION, value);\n    };\n    GridApi.prototype.addRowDropZone = function (params) {\n        this.gridBodyCon.getRowDragFeature().addRowDropZone(params);\n    };\n    GridApi.prototype.removeRowDropZone = function (params) {\n        var activeDropTarget = this.dragAndDropService.findExternalZone(params);\n        if (activeDropTarget) {\n            this.dragAndDropService.removeDropTarget(activeDropTarget);\n        }\n    };\n    GridApi.prototype.getRowDropZoneParams = function (events) {\n        return this.gridBodyCon.getRowDragFeature().getRowDropZone(events);\n    };\n    GridApi.prototype.setHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);\n    };\n    GridApi.prototype.setDomLayout = function (domLayout) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);\n    };\n    GridApi.prototype.setEnableCellTextSelection = function (selectable) {\n        this.gridBodyCon.setCellTextSelection(selectable);\n    };\n    GridApi.prototype.setFillHandleDirection = function (direction) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FILL_HANDLE_DIRECTION, direction);\n    };\n    GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);\n    };\n    GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);\n    };\n    GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);\n    };\n    GridApi.prototype.setIsExternalFilterPresent = function (isExternalFilterPresentFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_EXTERNAL_FILTER_PRESENT, isExternalFilterPresentFunc);\n    };\n    GridApi.prototype.setDoesExternalFilterPass = function (doesExternalFilterPassFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOES_EXTERNAL_FILTER_PASS, doesExternalFilterPassFunc);\n    };\n    GridApi.prototype.setNavigateToNextCell = function (navigateToNextCellFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_CELL, navigateToNextCellFunc);\n    };\n    GridApi.prototype.setTabToNextCell = function (tabToNextCellFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_CELL, tabToNextCellFunc);\n    };\n    GridApi.prototype.setTabToNextHeader = function (tabToNextHeaderFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_HEADER, tabToNextHeaderFunc);\n    };\n    GridApi.prototype.setNavigateToNextHeader = function (navigateToNextHeaderFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_HEADER, navigateToNextHeaderFunc);\n    };\n    GridApi.prototype.setGroupRowAggNodes = function (groupRowAggNodesFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_ROW_AGG_NODES, groupRowAggNodesFunc);\n    };\n    GridApi.prototype.setGetBusinessKeyForNode = function (getBusinessKeyForNodeFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_BUSINESS_KEY_FOR_NODE, getBusinessKeyForNodeFunc);\n    };\n    GridApi.prototype.setGetChildCount = function (getChildCountFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHILD_COUNT, getChildCountFunc);\n    };\n    GridApi.prototype.setProcessRowPostCreate = function (processRowPostCreateFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_ROW_POST_CREATE, processRowPostCreateFunc);\n    };\n    GridApi.prototype.setGetRowNodeId = function (getRowNodeIdFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_NODE_ID, getRowNodeIdFunc);\n    };\n    GridApi.prototype.setGetRowClass = function (rowClassFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_CLASS, rowClassFunc);\n    };\n    GridApi.prototype.setIsFullWidthCell = function (isFullWidthCellFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_FULL_WIDTH_CELL, isFullWidthCellFunc);\n    };\n    GridApi.prototype.setIsRowSelectable = function (isRowSelectableFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_SELECTABLE, isRowSelectableFunc);\n    };\n    GridApi.prototype.setIsRowMaster = function (isRowMasterFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_MASTER, isRowMasterFunc);\n    };\n    GridApi.prototype.setPostSort = function (postSortFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_SORT, postSortFunc);\n    };\n    GridApi.prototype.setGetDocument = function (getDocumentFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_DOCUMENT, getDocumentFunc);\n    };\n    GridApi.prototype.setGetContextMenuItems = function (getContextMenuItemsFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CONTEXT_MENU_ITEMS, getContextMenuItemsFunc);\n    };\n    GridApi.prototype.setGetMainMenuItems = function (getMainMenuItemsFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_MAIN_MENU_ITEMS, getMainMenuItemsFunc);\n    };\n    GridApi.prototype.setProcessCellForClipboard = function (processCellForClipboardFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FOR_CLIPBOARD, processCellForClipboardFunc);\n    };\n    GridApi.prototype.setSendToClipboard = function (sendToClipboardFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SEND_TO_CLIPBOARD, sendToClipboardFunc);\n    };\n    GridApi.prototype.setProcessCellFromClipboard = function (processCellFromClipboardFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FROM_CLIPBOARD, processCellFromClipboardFunc);\n    };\n    GridApi.prototype.setProcessSecondaryColDef = function (processSecondaryColDefFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_TO_SECONDARY_COLDEF, processSecondaryColDefFunc);\n    };\n    GridApi.prototype.setProcessSecondaryColGroupDef = function (processSecondaryColGroupDefFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_SECONDARY_COL_GROUP_DEF, processSecondaryColGroupDefFunc);\n    };\n    GridApi.prototype.setPostProcessPopup = function (postProcessPopupFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_PROCESS_POPUP, postProcessPopupFunc);\n    };\n    GridApi.prototype.setDefaultGroupOrderComparator = function (defaultGroupOrderComparatorFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DEFAULT_GROUP_ORDER_COMPARATOR, defaultGroupOrderComparatorFunc);\n    };\n    GridApi.prototype.setProcessChartOptions = function (processChartOptionsFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CHART_OPTIONS, processChartOptionsFunc);\n    };\n    GridApi.prototype.setGetChartToolbarItems = function (getChartToolbarItemsFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHART_TOOLBAR_ITEMS, getChartToolbarItemsFunc);\n    };\n    GridApi.prototype.setPaginationNumberFormatter = function (paginationNumberFormatterFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PAGINATION_NUMBER_FORMATTER, paginationNumberFormatterFunc);\n    };\n    GridApi.prototype.setGetServerSideStoreParams = function (getServerSideStoreParamsFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_STORE_PARAMS, getServerSideStoreParamsFunc);\n    };\n    GridApi.prototype.setIsServerSideGroupOpenByDefault = function (isServerSideGroupOpenByDefaultFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT, isServerSideGroupOpenByDefaultFunc);\n    };\n    GridApi.prototype.setIsApplyServerSideTransaction = function (isApplyServerSideTransactionFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION, isApplyServerSideTransactionFunc);\n    };\n    GridApi.prototype.setIsServerSideGroup = function (isServerSideGroupFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUP, isServerSideGroupFunc);\n    };\n    GridApi.prototype.setGetServerSideGroupKey = function (getServerSideGroupKeyFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_GROUP_KEY, getServerSideGroupKeyFunc);\n    };\n    GridApi.prototype.setGetRowStyle = function (rowStyleFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_STYLE, rowStyleFunc);\n    };\n    GridApi.prototype.setGetRowHeight = function (rowHeightFunc) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_HEIGHT, rowHeightFunc);\n    };\n    GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);\n    };\n    GridApi.prototype.isSideBarVisible = function () {\n        return this.sideBarComp ? this.sideBarComp.isDisplayed() : false;\n    };\n    GridApi.prototype.setSideBarVisible = function (show) {\n        if (!this.sideBarComp) {\n            if (show) {\n                console.warn('AG Grid: sideBar is not loaded');\n            }\n            return;\n        }\n        this.sideBarComp.setDisplayed(show);\n    };\n    GridApi.prototype.setSideBarPosition = function (position) {\n        if (!this.sideBarComp) {\n            console.warn('AG Grid: sideBar is not loaded');\n            return;\n        }\n        this.sideBarComp.setSideBarPosition(position);\n    };\n    GridApi.prototype.openToolPanel = function (key) {\n        if (!this.sideBarComp) {\n            console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');\n            return;\n        }\n        this.sideBarComp.openToolPanel(key);\n    };\n    GridApi.prototype.closeToolPanel = function () {\n        if (!this.sideBarComp) {\n            console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');\n            return;\n        }\n        this.sideBarComp.close();\n    };\n    GridApi.prototype.getOpenedToolPanel = function () {\n        return this.sideBarComp ? this.sideBarComp.openedItem() : null;\n    };\n    GridApi.prototype.getSideBar = function () {\n        return this.gridOptionsWrapper.getSideBar();\n    };\n    GridApi.prototype.setSideBar = function (def) {\n        this.gridOptionsWrapper.setProperty('sideBar', SideBarDefParser.parse(def));\n    };\n    GridApi.prototype.setSuppressClipboardPaste = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);\n    };\n    GridApi.prototype.isToolPanelShowing = function () {\n        return this.sideBarComp.isToolPanelShowing();\n    };\n    GridApi.prototype.doLayout = function () {\n        var message = \"AG Grid - since version 25.1, doLayout was taken out, as it's not needed. The grid responds to grid size changes automatically\";\n        doOnce(function () { return console.warn(message); }, 'doLayoutDeprecated');\n    };\n    GridApi.prototype.resetRowHeights = function () {\n        if (exists(this.clientSideRowModel)) {\n            this.clientSideRowModel.resetRowHeights();\n        }\n    };\n    GridApi.prototype.setGroupRemoveSingleChildren = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);\n    };\n    GridApi.prototype.setGroupRemoveLowestSingleChildren = function (value) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);\n    };\n    GridApi.prototype.onRowHeightChanged = function () {\n        if (this.clientSideRowModel) {\n            this.clientSideRowModel.onRowHeightChanged();\n        }\n        else if (this.serverSideRowModel) {\n            this.serverSideRowModel.onRowHeightChanged();\n        }\n    };\n    GridApi.prototype.getValue = function (colKey, rowNode) {\n        var column = this.columnModel.getPrimaryColumn(colKey);\n        if (missing(column)) {\n            column = this.columnModel.getGridColumn(colKey);\n        }\n        if (missing(column)) {\n            return null;\n        }\n        return this.valueService.getValue(column, rowNode);\n    };\n    GridApi.prototype.addEventListener = function (eventType, listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addEventListener(eventType, listener, async);\n    };\n    GridApi.prototype.addGlobalListener = function (listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addGlobalListener(listener, async);\n    };\n    GridApi.prototype.removeEventListener = function (eventType, listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeEventListener(eventType, listener, async);\n    };\n    GridApi.prototype.removeGlobalListener = function (listener) {\n        var async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeGlobalListener(listener, async);\n    };\n    GridApi.prototype.dispatchEvent = function (event) {\n        this.eventService.dispatchEvent(event);\n    };\n    GridApi.prototype.destroy = function () {\n        // this is needed as GridAPI is a bean, and GridAPI.destroy() is called as part\n        // of context.destroy(). so we need to stop the infinite loop.\n        if (this.destroyCalled) {\n            return;\n        }\n        this.destroyCalled = true;\n        // destroy the UI first (as they use the services)\n        var gridCtrl = this.ctrlsService.getGridCtrl();\n        gridCtrl && gridCtrl.destroyGridUi();\n        // destroy the services\n        this.context.destroy();\n    };\n    GridApi.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function () {\n        // some users were raising support issues with regards memory leaks. the problem was the customers applications\n        // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n        // all references in teh API so at least the core grid can be garbage collected.\n        //\n        // wait about 100ms before clearing down the references, in case user has some cleanup to do,\n        // and needs to deference the API first\n        setTimeout(removeAllReferences.bind(window, this, 'Grid API'), 100);\n    };\n    GridApi.prototype.warnIfDestroyed = function (methodName) {\n        if (this.destroyCalled) {\n            console.warn(\"AG Grid: Grid API method \" + methodName + \" was called on a grid that was destroyed.\");\n        }\n        return this.destroyCalled;\n    };\n    GridApi.prototype.resetQuickFilter = function () {\n        if (this.warnIfDestroyed('resetQuickFilter')) {\n            return;\n        }\n        this.rowModel.forEachNode(function (node) { return node.quickFilterAggregateText = null; });\n    };\n    GridApi.prototype.getRangeSelections = function () {\n        console.warn(\"AG Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\\n        getCellRanges() is a bit different, please check the AG Grid documentation.\");\n        return null;\n    };\n    GridApi.prototype.getCellRanges = function () {\n        if (this.rangeService) {\n            return this.rangeService.getCellRanges();\n        }\n        console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');\n        return null;\n    };\n    GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {\n        return camelCaseToHumanText(camelCase);\n    };\n    GridApi.prototype.addRangeSelection = function (deprecatedNoLongerUsed) {\n        console.warn('AG Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()');\n    };\n    GridApi.prototype.addCellRange = function (params) {\n        if (!this.rangeService) {\n            console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');\n        }\n        this.rangeService.addCellRange(params);\n    };\n    GridApi.prototype.clearRangeSelection = function () {\n        if (!this.rangeService) {\n            console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');\n        }\n        this.rangeService.removeAllCellRanges();\n    };\n    GridApi.prototype.undoCellEditing = function () {\n        this.undoRedoService.undo();\n    };\n    GridApi.prototype.redoCellEditing = function () {\n        this.undoRedoService.redo();\n    };\n    GridApi.prototype.getCurrentUndoSize = function () {\n        return this.undoRedoService.getCurrentUndoStackSize();\n    };\n    GridApi.prototype.getCurrentRedoSize = function () {\n        return this.undoRedoService.getCurrentRedoStackSize();\n    };\n    GridApi.prototype.getChartModels = function () {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartModels') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartModels')) {\n            return this.chartService.getChartModels();\n        }\n    };\n    GridApi.prototype.getChartRef = function (chartId) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartRef') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartRef')) {\n            return this.chartService.getChartRef(chartId);\n        }\n    };\n    GridApi.prototype.getChartImageDataURL = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartImageDataURL') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartImageDataURL')) {\n            return this.chartService.getChartImageDataURL(params);\n        }\n    };\n    GridApi.prototype.createRangeChart = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createRangeChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createRangeChart')) {\n            return this.chartService.createRangeChart(params);\n        }\n    };\n    GridApi.prototype.createCrossFilterChart = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createCrossFilterChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createCrossFilterChart')) {\n            return this.chartService.createCrossFilterChart(params);\n        }\n    };\n    GridApi.prototype.restoreChart = function (chartModel, chartContainer) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.restoreChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.restoreChart')) {\n            return this.chartService.restoreChart(chartModel, chartContainer);\n        }\n    };\n    GridApi.prototype.createPivotChart = function (params) {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createPivotChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createPivotChart')) {\n            return this.chartService.createPivotChart(params);\n        }\n    };\n    GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {\n        if (!this.clipboardService) {\n            console.warn('AG Grid: clipboard is only available in AG Grid Enterprise');\n        }\n        this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);\n    };\n    GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {\n        if (!this.clipboardService) {\n            console.warn('AG Grid: clipboard is only available in AG Grid Enterprise');\n        }\n        this.clipboardService.copySelectedRangeToClipboard(includeHeader);\n    };\n    GridApi.prototype.copySelectedRangeDown = function () {\n        if (!this.clipboardService) {\n            console.warn('AG Grid: clipboard is only available in AG Grid Enterprise');\n        }\n        this.clipboardService.copyRangeDown();\n    };\n    GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {\n        // use grid column so works with pivot mode\n        var column = this.columnModel.getGridColumn(colKey);\n        this.menuFactory.showMenuAfterButtonClick(column, buttonElement, 'columnMenu');\n    };\n    GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {\n        // use grid column so works with pivot mode\n        var column = this.columnModel.getGridColumn(colKey);\n        if (!column) {\n            column = this.columnModel.getPrimaryColumn(colKey);\n        }\n        if (!column) {\n            console.error(\"AG Grid: column '\" + colKey + \"' not found\");\n            return;\n        }\n        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);\n    };\n    GridApi.prototype.hidePopupMenu = function () {\n        // hide the context menu if in enterprise\n        if (this.contextMenuFactory) {\n            this.contextMenuFactory.hideActiveMenu();\n        }\n        // and hide the column menu always\n        this.menuFactory.hideActiveMenu();\n    };\n    GridApi.prototype.setPopupParent = function (ePopupParent) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);\n    };\n    GridApi.prototype.tabToNextCell = function () {\n        return this.navigationService.tabToNextCell(false);\n    };\n    GridApi.prototype.tabToPreviousCell = function () {\n        return this.navigationService.tabToNextCell(true);\n    };\n    GridApi.prototype.getCellRendererInstances = function (params) {\n        if (params === void 0) { params = {}; }\n        return this.rowRenderer.getCellRendererInstances(params);\n    };\n    GridApi.prototype.getCellEditorInstances = function (params) {\n        if (params === void 0) { params = {}; }\n        return this.rowRenderer.getCellEditorInstances(params);\n    };\n    GridApi.prototype.getEditingCells = function () {\n        return this.rowRenderer.getEditingCells();\n    };\n    GridApi.prototype.stopEditing = function (cancel) {\n        if (cancel === void 0) { cancel = false; }\n        this.rowRenderer.stopEditing(cancel);\n    };\n    GridApi.prototype.startEditingCell = function (params) {\n        var column = this.columnModel.getGridColumn(params.colKey);\n        if (!column) {\n            console.warn(\"AG Grid: no column found for \" + params.colKey);\n            return;\n        }\n        var cellPosition = {\n            rowIndex: params.rowIndex,\n            rowPinned: params.rowPinned || null,\n            column: column\n        };\n        var notPinned = params.rowPinned == null;\n        if (notPinned) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(params.rowIndex);\n        }\n        var cell = this.navigationService.getCellByPosition(cellPosition);\n        if (!cell) {\n            return;\n        }\n        cell.startRowOrCellEdit(params.keyPress, params.charPress);\n    };\n    GridApi.prototype.addAggFunc = function (key, aggFunc) {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFunc(key, aggFunc);\n        }\n    };\n    GridApi.prototype.addAggFuncs = function (aggFuncs) {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFuncs(aggFuncs);\n        }\n    };\n    GridApi.prototype.clearAggFuncs = function () {\n        if (this.aggFuncService) {\n            this.aggFuncService.clear();\n        }\n    };\n    GridApi.prototype.applyServerSideTransaction = function (transaction) {\n        if (!this.serverSideTransactionManager) {\n            console.warn('AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.');\n            return;\n        }\n        return this.serverSideTransactionManager.applyTransaction(transaction);\n    };\n    GridApi.prototype.applyServerSideTransactionAsync = function (transaction, callback) {\n        if (!this.serverSideTransactionManager) {\n            console.warn('AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.');\n            return;\n        }\n        return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);\n    };\n    GridApi.prototype.retryServerSideLoads = function () {\n        if (!this.serverSideRowModel) {\n            console.warn('AG Grid: API retryServerSideLoads() can only be used when using Server-Side Row Model.');\n            return;\n        }\n        this.serverSideRowModel.retryLoads();\n    };\n    GridApi.prototype.flushServerSideAsyncTransactions = function () {\n        if (!this.serverSideTransactionManager) {\n            console.warn('AG Grid: Cannot flush Server Side Transaction if not using the Server Side Row Model.');\n            return;\n        }\n        return this.serverSideTransactionManager.flushAsyncTransactions();\n    };\n    GridApi.prototype.applyTransaction = function (rowDataTransaction) {\n        if (!this.clientSideRowModel) {\n            console.error('AG Grid: updateRowData() only works with ClientSideRowModel. Working with InfiniteRowModel was deprecated in v23.1 and removed in v24.1');\n            return;\n        }\n        var res = this.clientSideRowModel.updateRowData(rowDataTransaction);\n        // refresh all the full width rows\n        this.rowRenderer.refreshFullWidthRows(res.update);\n        // do change detection for all present cells\n        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {\n            this.rowRenderer.refreshCells();\n        }\n        return res;\n    };\n    /** @deprecated */\n    GridApi.prototype.updateRowData = function (rowDataTransaction) {\n        var message = 'AG Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.';\n        doOnce(function () { return console.warn(message); }, 'updateRowData deprecated');\n        return this.applyTransaction(rowDataTransaction);\n    };\n    GridApi.prototype.applyTransactionAsync = function (rowDataTransaction, callback) {\n        if (!this.clientSideRowModel) {\n            console.error('AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');\n            return;\n        }\n        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);\n    };\n    GridApi.prototype.flushAsyncTransactions = function () {\n        if (!this.clientSideRowModel) {\n            console.error('AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');\n            return;\n        }\n        this.clientSideRowModel.flushAsyncTransactions();\n    };\n    /** @deprecated */\n    GridApi.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n        var message = 'AG Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.';\n        doOnce(function () { return console.warn(message); }, 'batchUpdateRowData deprecated');\n        this.applyTransactionAsync(rowDataTransaction, callback);\n    };\n    GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {\n        if (skipRefresh === void 0) { skipRefresh = false; }\n        console.warn('AG Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });\n    };\n    GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {\n        if (skipRefresh === void 0) { skipRefresh = false; }\n        console.warn('AG Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');\n        var dataToRemove = rowNodes.map(function (rowNode) { return rowNode.data; });\n        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });\n    };\n    GridApi.prototype.addItems = function (items, skipRefresh) {\n        if (skipRefresh === void 0) { skipRefresh = false; }\n        console.warn('AG Grid: addItems() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });\n    };\n    GridApi.prototype.refreshVirtualPageCache = function () {\n        console.warn('AG Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    };\n    GridApi.prototype.refreshInfinitePageCache = function () {\n        console.warn('AG Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    };\n    GridApi.prototype.refreshInfiniteCache = function () {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.refreshCache();\n        }\n        else {\n            console.warn(\"AG Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.\");\n        }\n    };\n    GridApi.prototype.purgeVirtualPageCache = function () {\n        console.warn('AG Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfinitePageCache();\n    };\n    GridApi.prototype.purgeInfinitePageCache = function () {\n        console.warn('AG Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfiniteCache();\n    };\n    GridApi.prototype.purgeInfiniteCache = function () {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.purgeCache();\n        }\n        else {\n            console.warn(\"AG Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.\");\n        }\n    };\n    /** @deprecated */\n    GridApi.prototype.purgeEnterpriseCache = function (route) {\n        console.warn(\"ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()\");\n        this.purgeServerSideCache(route);\n    };\n    /** @deprecated */\n    GridApi.prototype.purgeServerSideCache = function (route) {\n        if (route === void 0) { route = []; }\n        if (this.serverSideRowModel) {\n            console.warn(\"AG Grid: since v25.0, api.purgeServerSideCache is deprecated. Please use api.refreshServerSideStore({purge: true}) instead.\");\n            this.refreshServerSideStore({\n                route: route,\n                purge: true\n            });\n        }\n        else {\n            console.warn(\"AG Grid: api.purgeServerSideCache is only available when rowModelType='serverSide'.\");\n        }\n    };\n    GridApi.prototype.refreshServerSideStore = function (params) {\n        if (this.serverSideRowModel) {\n            this.serverSideRowModel.refreshStore(params);\n        }\n        else {\n            console.warn(\"AG Grid: api.refreshServerSideStore is only available when rowModelType='serverSide'.\");\n        }\n    };\n    GridApi.prototype.getServerSideStoreState = function () {\n        if (this.serverSideRowModel) {\n            return this.serverSideRowModel.getStoreState();\n        }\n        else {\n            console.warn(\"AG Grid: api.getServerSideStoreState is only available when rowModelType='serverSide'.\");\n            return [];\n        }\n    };\n    GridApi.prototype.getVirtualRowCount = function () {\n        console.warn('AG Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');\n        return this.getInfiniteRowCount();\n    };\n    GridApi.prototype.getInfiniteRowCount = function () {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.getRowCount();\n        }\n        else {\n            console.warn(\"AG Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.\");\n        }\n    };\n    GridApi.prototype.isMaxRowFound = function () {\n        console.warn(\"AG Grid: api.isLastRowIndexKnown is deprecated, please use api.isLastRowIndexKnown()\");\n        return this.isLastRowIndexKnown();\n    };\n    GridApi.prototype.isLastRowIndexKnown = function () {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.isLastRowIndexKnown();\n        }\n        else {\n            console.warn(\"AG Grid: api.isMaxRowFound is only available when rowModelType='virtual'.\");\n        }\n    };\n    GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n        console.warn('AG Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');\n        this.setRowCount(rowCount, maxRowFound);\n    };\n    GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {\n        console.warn('AG Grid: setInfiniteRowCount() is now called setRowCount(), please call setRowCount() instead');\n        this.setRowCount(rowCount, maxRowFound);\n    };\n    GridApi.prototype.setRowCount = function (rowCount, maxRowFound) {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.setRowCount(rowCount, maxRowFound);\n        }\n        else {\n            console.warn(\"AG Grid: api.setRowCount is only available for Infinite Row Model.\");\n        }\n    };\n    GridApi.prototype.getVirtualPageState = function () {\n        console.warn('AG Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    };\n    GridApi.prototype.getInfinitePageState = function () {\n        console.warn('AG Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    };\n    GridApi.prototype.getCacheBlockState = function () {\n        return this.rowNodeBlockLoader.getBlockState();\n    };\n    GridApi.prototype.checkGridSize = function () {\n        console.warn(\"in AG Grid v25.2.0, checkGridSize() was removed, as it was legacy and didn't do anything uesful.\");\n    };\n    GridApi.prototype.getFirstRenderedRow = function () {\n        console.warn('in AG Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');\n        return this.getFirstDisplayedRow();\n    };\n    GridApi.prototype.getFirstDisplayedRow = function () {\n        return this.rowRenderer.getFirstVirtualRenderedRow();\n    };\n    GridApi.prototype.getLastRenderedRow = function () {\n        console.warn('in AG Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');\n        return this.getLastDisplayedRow();\n    };\n    GridApi.prototype.getLastDisplayedRow = function () {\n        return this.rowRenderer.getLastVirtualRenderedRow();\n    };\n    GridApi.prototype.getDisplayedRowAtIndex = function (index) {\n        return this.rowModel.getRow(index);\n    };\n    GridApi.prototype.getDisplayedRowCount = function () {\n        return this.rowModel.getRowCount();\n    };\n    GridApi.prototype.paginationIsLastPageFound = function () {\n        return this.paginationProxy.isLastPageFound();\n    };\n    GridApi.prototype.paginationGetPageSize = function () {\n        return this.paginationProxy.getPageSize();\n    };\n    GridApi.prototype.paginationSetPageSize = function (size) {\n        this.gridOptionsWrapper.setProperty('paginationPageSize', size);\n    };\n    GridApi.prototype.paginationGetCurrentPage = function () {\n        return this.paginationProxy.getCurrentPage();\n    };\n    GridApi.prototype.paginationGetTotalPages = function () {\n        return this.paginationProxy.getTotalPages();\n    };\n    GridApi.prototype.paginationGetRowCount = function () {\n        return this.paginationProxy.getMasterRowCount();\n    };\n    GridApi.prototype.paginationGoToNextPage = function () {\n        this.paginationProxy.goToNextPage();\n    };\n    GridApi.prototype.paginationGoToPreviousPage = function () {\n        this.paginationProxy.goToPreviousPage();\n    };\n    GridApi.prototype.paginationGoToFirstPage = function () {\n        this.paginationProxy.goToFirstPage();\n    };\n    GridApi.prototype.paginationGoToLastPage = function () {\n        this.paginationProxy.goToLastPage();\n    };\n    GridApi.prototype.paginationGoToPage = function (page) {\n        this.paginationProxy.goToPage(page);\n    };\n    __decorate([\n        Optional('immutableService')\n    ], GridApi.prototype, \"immutableService\", void 0);\n    __decorate([\n        Optional('csvCreator')\n    ], GridApi.prototype, \"csvCreator\", void 0);\n    __decorate([\n        Optional('excelCreator')\n    ], GridApi.prototype, \"excelCreator\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], GridApi.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('navigationService')\n    ], GridApi.prototype, \"navigationService\", void 0);\n    __decorate([\n        Autowired('filterManager')\n    ], GridApi.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], GridApi.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('selectionService')\n    ], GridApi.prototype, \"selectionService\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], GridApi.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], GridApi.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('alignedGridsService')\n    ], GridApi.prototype, \"alignedGridsService\", void 0);\n    __decorate([\n        Autowired('eventService')\n    ], GridApi.prototype, \"eventService\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], GridApi.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('context')\n    ], GridApi.prototype, \"context\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], GridApi.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], GridApi.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('paginationProxy')\n    ], GridApi.prototype, \"paginationProxy\", void 0);\n    __decorate([\n        Autowired('focusService')\n    ], GridApi.prototype, \"focusService\", void 0);\n    __decorate([\n        Autowired('dragAndDropService')\n    ], GridApi.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        Optional('rangeService')\n    ], GridApi.prototype, \"rangeService\", void 0);\n    __decorate([\n        Optional('clipboardService')\n    ], GridApi.prototype, \"clipboardService\", void 0);\n    __decorate([\n        Optional('aggFuncService')\n    ], GridApi.prototype, \"aggFuncService\", void 0);\n    __decorate([\n        Autowired('menuFactory')\n    ], GridApi.prototype, \"menuFactory\", void 0);\n    __decorate([\n        Optional('contextMenuFactory')\n    ], GridApi.prototype, \"contextMenuFactory\", void 0);\n    __decorate([\n        Autowired('valueCache')\n    ], GridApi.prototype, \"valueCache\", void 0);\n    __decorate([\n        Autowired('animationFrameService')\n    ], GridApi.prototype, \"animationFrameService\", void 0);\n    __decorate([\n        Optional('statusBarService')\n    ], GridApi.prototype, \"statusBarService\", void 0);\n    __decorate([\n        Optional('chartService')\n    ], GridApi.prototype, \"chartService\", void 0);\n    __decorate([\n        Optional('undoRedoService')\n    ], GridApi.prototype, \"undoRedoService\", void 0);\n    __decorate([\n        Optional('rowNodeBlockLoader')\n    ], GridApi.prototype, \"rowNodeBlockLoader\", void 0);\n    __decorate([\n        Optional('ssrmTransactionManager')\n    ], GridApi.prototype, \"serverSideTransactionManager\", void 0);\n    __decorate([\n        Autowired('ctrlsService')\n    ], GridApi.prototype, \"ctrlsService\", void 0);\n    __decorate([\n        PostConstruct\n    ], GridApi.prototype, \"init\", null);\n    __decorate([\n        PreDestroy\n    ], GridApi.prototype, \"cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid\", null);\n    GridApi = __decorate([\n        Bean('gridApi')\n    ], GridApi);\n    return GridApi;\n}());\nexport { GridApi };\n"]},"metadata":{},"sourceType":"module"}