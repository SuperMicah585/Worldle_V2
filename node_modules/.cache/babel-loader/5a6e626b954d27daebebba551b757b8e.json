{"ast":null,"code":"export const evaluateGuess = async (code, guesses, guessCounter) => {\n  let feedback = \"\";\n  let string_guess = \"\";\n  let codeCopy = [];\n  let guessesCopy = [];\n  let stringCopy = \"\";\n\n  for (let y = 0; y <= 4; y++) {\n    string_guess = string_guess + guesses[y];\n  } //copies\n\n\n  for (let y = 0; y <= 4; y++) {\n    codeCopy[y] = code[y];\n  }\n\n  for (let y = 0; y <= 4; y++) {\n    guessesCopy[y] = guesses[y];\n  } //----created copy of arays\n\n\n  for (let y = 0; y <= 4; y++) {\n    if (codeCopy[y] === guessesCopy[y]) {\n      codeCopy[y] = null;\n      guessesCopy[y] = 'X'; //order matters so have to set code to null and guesses to green\n    }\n  }\n\n  for (let y = 0; y <= 4; y++) {\n    for (let i = 0; i <= 4; i++) {\n      if (guessesCopy[i] === codeCopy[y]) {\n        codeCopy[y] = null; //similiar to above, but indexes dont have to match + greens have already been filtered\n\n        guessesCopy[i] = 'O';\n      }\n    }\n  }\n\n  console.log(guessesCopy);\n  console.log(codeCopy);\n  const is_word = fetch('https://api.dictionaryapi.dev/api/v2/entries/en/' + string_guess) //1\n  .then(response => response.json()) //2\n  .then(word => {\n    return word[0]; //3\n  });\n  const a = await is_word;\n\n  if (a === undefined) {\n    feedback = \"this is not a word\";\n  } else {\n    for (let i = 0; i <= 4; i++) {\n      if (guessesCopy[i] === 'X') {\n        feedback += \"X\";\n      } else if (guessesCopy[i] === \"O\") {\n        //error becayse a is undefined\n        feedback += \"O\";\n      } else {\n        feedback += \"-\";\n      }\n    } //checks to see if they guessed the right word\n\n\n    if (feedback === 'XXXXX') {\n      feedback = \"You Win!\";\n    } else if (guessCounter === 7) {\n      feedback = \"You Lose!\";\n    }\n  }\n\n  return feedback;\n};","map":{"version":3,"sources":["/Users/mphelps/react-app/Worldle_V2/src/evaluate_guess.js"],"names":["evaluateGuess","code","guesses","guessCounter","feedback","string_guess","codeCopy","guessesCopy","stringCopy","y","i","console","log","is_word","fetch","then","response","json","word","a","undefined"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,OAAOC,IAAP,EAAaC,OAAb,EAAsBC,YAAtB,KAAuC;AAClE,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,YAAY,GAAE,EAAlB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,WAAW,GAAG,EAAlB;AACF,MAAIC,UAAU,GAAE,EAAhB;;AAGA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BJ,IAAAA,YAAY,GAACA,YAAY,GAACH,OAAO,CAACO,CAAD,CAAjC;AACD,GAVmE,CAapE;;;AACA,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BH,IAAAA,QAAQ,CAACG,CAAD,CAAR,GAAaR,IAAI,CAACQ,CAAD,CAAjB;AACD;;AAED,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BF,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAgBP,OAAO,CAACO,CAAD,CAAvB;AACD,GApBmE,CAqBpE;;;AAEA,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAGH,QAAQ,CAACG,CAAD,CAAR,KAAgBF,WAAW,CAACE,CAAD,CAA9B,EAAkC;AAChCH,MAAAA,QAAQ,CAACG,CAAD,CAAR,GAAc,IAAd;AACAF,MAAAA,WAAW,CAACE,CAAD,CAAX,GAAgB,GAAhB,CAFgC,CAET;AACxB;AACF;;AAED,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIH,WAAW,CAACG,CAAD,CAAX,KAAmBJ,QAAQ,CAACG,CAAD,CAA/B,EAAmC;AACjCH,QAAAA,QAAQ,CAACG,CAAD,CAAR,GAAc,IAAd,CADiC,CACJ;;AAC7BF,QAAAA,WAAW,CAACG,CAAD,CAAX,GAAgB,GAAhB;AACD;AACF;AACF;;AAKHC,EAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAIA,QAAMO,OAAO,GAAGC,KAAK,CAAC,qDAAmDT,YAApD,CAAL,CAAuE;AAAvE,GACbU,IADa,CACPC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADN,EACuB;AADvB,GAEbF,IAFa,CAEPG,IAAD,IAAU;AACd,WAAOA,IAAI,CAAC,CAAD,CAAX,CADc,CACE;AACjB,GAJa,CAAhB;AAQE,QAAMC,CAAC,GAAG,MAAMN,OAAhB;;AACA,MAAIM,CAAC,KAAKC,SAAV,EAAoB;AAGhBhB,IAAAA,QAAQ,GAAG,oBAAX;AAEH,GALD,MAMI;AAGJ,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIH,WAAW,CAACG,CAAD,CAAX,KAAmB,GAAvB,EAA4B;AAC1BN,QAAAA,QAAQ,IAAI,GAAZ;AACD,OAFD,MAGK,IAAIG,WAAW,CAACG,CAAD,CAAX,KAAmB,GAAvB,EAA4B;AAAE;AACjCN,QAAAA,QAAQ,IAAI,GAAZ;AACD,OAFI,MAGD;AACFA,QAAAA,QAAQ,IAAI,GAAZ;AACD;AACF,KAbG,CAeN;;;AACA,QAAIA,QAAQ,KAAK,OAAjB,EAAyB;AACvBA,MAAAA,QAAQ,GAAG,UAAX;AAED,KAHD,MAIK,IAAGD,YAAY,KAAG,CAAlB,EAAoB;AACvBC,MAAAA,QAAQ,GAAG,WAAX;AACD;AAEA;;AAGC,SAAOA,QAAP;AAMD,CA/FM","sourcesContent":["export const evaluateGuess = async (code, guesses, guessCounter) => {\n  let feedback = \"\";\n  let string_guess =\"\"\n  let codeCopy = [];\n  let guessesCopy = [];\nlet stringCopy =\"\"\n\n\nfor (let y = 0; y <= 4; y++) {\n  string_guess=string_guess+guesses[y];\n}\n\n\n//copies\nfor (let y = 0; y <= 4; y++) {\n  codeCopy[y] =code[y];\n}\n\nfor (let y = 0; y <= 4; y++) {\n  guessesCopy[y] =guesses[y];\n}\n//----created copy of arays\n\nfor (let y = 0; y <= 4; y++) {\n  if(codeCopy[y] === guessesCopy[y]){\n    codeCopy[y] = null;\n    guessesCopy[y] ='X';   //order matters so have to set code to null and guesses to green\n  }\n}\n\nfor (let y = 0; y <= 4; y++) {\n    for (let i = 0; i <= 4; i++) {\n      if (guessesCopy[i] === codeCopy[y]){\n        codeCopy[y] = null;          //similiar to above, but indexes dont have to match + greens have already been filtered\n        guessesCopy[i] ='O';\n      }\n    }\n  }\n\n\n\n\nconsole.log(guessesCopy);\nconsole.log(codeCopy);\n\n\n\nconst is_word = fetch('https://api.dictionaryapi.dev/api/v2/entries/en/'+string_guess) //1\n  .then((response) => response.json()) //2\n  .then((word) => {\n    return word[0]; //3\n  });\n\n\n\n  const a = await is_word;\n  if (a === undefined){\n\n\n      feedback = \"this is not a word\"\n\n  }\n  else{\n\n\n  for (let i = 0; i <= 4; i++) {\n    if (guessesCopy[i] === 'X') {\n      feedback += \"X\";\n    }\n    else if (guessesCopy[i] === \"O\") { //error becayse a is undefined\n      feedback += \"O\";\n    }\n    else{\n      feedback += \"-\";\n    }\n  }\n\n//checks to see if they guessed the right word\nif (feedback === 'XXXXX'){\n  feedback = \"You Win!\"\n\n}\nelse if(guessCounter===7){\n  feedback = \"You Lose!\"\n}\n\n}\n\n\n  return feedback;\n\n\n\n\n\n};\n"]},"metadata":{},"sourceType":"module"}