{"ast":null,"code":"export const evaluateGuess = async (code, guesses) => {\n  let feedback = \"\";\n  let string_guess = \"\";\n  let codeCopy = code;\n  let guessesCopy = guesses;\n  let stringCopy = \"\";\n\n  for (let y = 0; y <= 4; y++) {\n    string_guess = string_guess + guesses[y];\n  }\n  /*\n  const axios = require('axios');\n  \n  async function makeGetRequest() {\n  \n    let res = await axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+string_guess);\n  \n    let data = await res.data;\n    return data;\n  }\n  \n  console.log(makeGetRequest());\n  */\n\n  /*\n  function word_check(x){\n      axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+x)\n      .then(response => {\n     console.log((response.data)[0]['word']);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  (word_check(string_guess));\n  */\n  //If character is X, then check whole word for any other of the same character. if none then turn\n  //if character is ), then check whole word for any other Green. if none return yellow, if green and count<2, then\n  //If no other X then feedback will need to not mark yellow for repeated characters in the wrong spot\n  //evaluates word\n  //need a green counter for each letter\n  //repition counter for code\n\n\n  var rep_counter = {};\n\n  for (let y = 0; y <= 4; y++) {\n    //how many green for each letter\n    var counter = 0; //\n\n    if (guesses[y] === code[y]) {\n      if (guesses[y] in rep_counter) {\n        rep_counter[guesses[y]] = rep_counter[guesses[y]] + 1;\n      } else {\n        counter++;\n        rep_counter[guesses[y]] = counter;\n      }\n    }\n  } //two copy arrays\n  //break down arrays based on color\n  //i.e if index green make feeback 'X' and set index to null for guesscopy. If index yellow set feedback to 'O' and index to null for guesscopy\n\n\n  for (let y = 0; y <= 4; y++) {\n    if (codyCopy[y] === guessesCopy[y]) {\n      guessesCopy[y] = 'green';\n    }\n  }\n\n  for (let y = 0; y <= 4; y++) {\n    for (let i = 0; i <= 4; i++) {\n      if (codeCopy[i] === guessesCopy[y]) {\n        guessesCopy[y] = 'yellow';\n      }\n    }\n  }\n\n  console.log(guessCopy);\n  var rep_counters = {}; //total number of each letter\n\n  for (let y = 0; y <= 4; y++) {\n    var counter = 0;\n\n    for (let i = 0; i <= 4; i++) {\n      if (code[i] === code[y]) {\n        counter++;\n      }\n    }\n\n    rep_counters[code[y]] = counter;\n    console.log(rep_counters[code[y]]);\n  }\n\n  const is_word = fetch('https://api.dictionaryapi.dev/api/v2/entries/en/' + string_guess) //1\n  .then(response => response.json()) //2\n  .then(word => {\n    return word[0]; //3\n  });\n  const a = await is_word;\n\n  if (a === undefined) {\n    feedback = \"this is not a word\";\n  } else {\n    for (let i = 0; i <= 4; i++) {\n      if (code[i] === guesses[i]) {\n        feedback += \"X\";\n      } else if (code.includes(guesses[i]) && (rep_counter[guesses[i]] === undefined || rep_counter[guesses[i]] < rep_counters[guesses[i]])) {\n        //error becayse a is undefined\n        feedback += \"O\";\n      } else {\n        feedback += \"-\";\n      }\n    } //checks to see if they guessed the right word\n\n\n    if (feedback === 'XXXXX') {\n      feedback = \"You Win!\";\n    } else if (guessCounter === 7) {\n      feedback = \"You Lose!\";\n    }\n  }\n\n  return feedback;\n};","map":{"version":3,"sources":["/Users/mphelps/react-app/Worldle_V2/src/evaluate_guess.js"],"names":["evaluateGuess","code","guesses","feedback","string_guess","codeCopy","guessesCopy","stringCopy","y","rep_counter","counter","codyCopy","i","console","log","guessCopy","rep_counters","is_word","fetch","then","response","json","word","a","undefined","includes","guessCounter"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,OAAOC,IAAP,EAAaC,OAAb,KAAyB;AACpD,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,YAAY,GAAE,EAAlB;AACA,MAAIC,QAAQ,GAAGJ,IAAf;AACA,MAAIK,WAAW,GAAGJ,OAAlB;AACF,MAAIK,UAAU,GAAE,EAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BJ,IAAAA,YAAY,GAACA,YAAY,GAACF,OAAO,CAACM,CAAD,CAAjC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIC,WAAW,GAAG,EAAlB;;AAEA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAAE;AAC7B,QAAIE,OAAO,GAAE,CAAb,CAD2B,CACV;;AACf,QAAIR,OAAO,CAACM,CAAD,CAAP,KAAeP,IAAI,CAACO,CAAD,CAAvB,EAA2B;AACzB,UAAGN,OAAO,CAACM,CAAD,CAAP,IAAcC,WAAjB,EAA6B;AAC3BA,QAAAA,WAAW,CAACP,OAAO,CAACM,CAAD,CAAR,CAAX,GAA2BC,WAAW,CAACP,OAAO,CAACM,CAAD,CAAR,CAAZ,GAA0B,CAApD;AAGD,OAJD,MAKI;AACFE,QAAAA,OAAO;AACXD,QAAAA,WAAW,CAACP,OAAO,CAACM,CAAD,CAAR,CAAX,GAA0BE,OAA1B;AAED;AAEE;AACF,GA1DmD,CA6DtD;AACA;AACA;;;AAEA,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAGG,QAAQ,CAACH,CAAD,CAAR,KAAgBF,WAAW,CAACE,CAAD,CAA9B,EAAkC;AAChCF,MAAAA,WAAW,CAACE,CAAD,CAAX,GAAiB,OAAjB;AACD;AACF;;AAED,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIP,QAAQ,CAACO,CAAD,CAAR,KAAgBN,WAAW,CAACE,CAAD,CAA/B,EAAmC;AACjCF,QAAAA,WAAW,CAACE,CAAD,CAAX,GAAiB,QAAjB;AACD;AACF;AACF;;AAKHK,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AAEA,MAAIC,YAAY,GAAG,EAAnB,CApFsD,CAoF3B;;AAE3B,OAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,QAAIE,OAAO,GAAE,CAAb;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIX,IAAI,CAACW,CAAD,CAAJ,KAAYX,IAAI,CAACO,CAAD,CAApB,EAAwB;AACtBE,QAAAA,OAAO;AAER;AACF;;AACHM,IAAAA,YAAY,CAACf,IAAI,CAACO,CAAD,CAAL,CAAZ,GAAwBE,OAAxB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYE,YAAY,CAACf,IAAI,CAACO,CAAD,CAAL,CAAxB;AAEC;;AAED,QAAMS,OAAO,GAAGC,KAAK,CAAC,qDAAmDd,YAApD,CAAL,CAAuE;AAAvE,GACbe,IADa,CACPC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADN,EACuB;AADvB,GAEbF,IAFa,CAEPG,IAAD,IAAU;AACd,WAAOA,IAAI,CAAC,CAAD,CAAX,CADc,CACE;AACjB,GAJa,CAAhB;AAQE,QAAMC,CAAC,GAAG,MAAMN,OAAhB;;AACA,MAAIM,CAAC,KAAKC,SAAV,EAAoB;AAGhBrB,IAAAA,QAAQ,GAAG,oBAAX;AAEH,GALD,MAMI;AAGJ,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAIX,IAAI,CAACW,CAAD,CAAJ,KAAYV,OAAO,CAACU,CAAD,CAAvB,EAA4B;AAC1BT,QAAAA,QAAQ,IAAI,GAAZ;AACD,OAFD,MAGK,IAAIF,IAAI,CAACwB,QAAL,CAAcvB,OAAO,CAACU,CAAD,CAArB,MAA+BH,WAAW,CAACP,OAAO,CAACU,CAAD,CAAR,CAAZ,KAA6BY,SAA7B,IAA2Cf,WAAW,CAACP,OAAO,CAACU,CAAD,CAAR,CAAX,GAA0BI,YAAY,CAACd,OAAO,CAACU,CAAD,CAAR,CAA/G,CAAJ,EAAmI;AAAE;AACxIT,QAAAA,QAAQ,IAAI,GAAZ;AACD,OAFI,MAGD;AACFA,QAAAA,QAAQ,IAAI,GAAZ;AACD;AACF,KAbG,CAeN;;;AACA,QAAIA,QAAQ,KAAK,OAAjB,EAAyB;AACvBA,MAAAA,QAAQ,GAAG,UAAX;AAED,KAHD,MAIK,IAAGuB,YAAY,KAAG,CAAlB,EAAoB;AACvBvB,MAAAA,QAAQ,GAAG,WAAX;AACD;AAEA;;AAGC,SAAOA,QAAP;AAMD,CAnJM","sourcesContent":["export const evaluateGuess = async (code, guesses) => {\n  let feedback = \"\";\n  let string_guess =\"\"\n  let codeCopy = code;\n  let guessesCopy = guesses\nlet stringCopy =\"\"\n\nfor (let y = 0; y <= 4; y++) {\n  string_guess=string_guess+guesses[y];\n}\n/*\nconst axios = require('axios');\n\nasync function makeGetRequest() {\n\n  let res = await axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+string_guess);\n\n  let data = await res.data;\n  return data;\n}\n\nconsole.log(makeGetRequest());\n*/\n/*\nfunction word_check(x){\n    axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+x)\n    .then(response => {\n   console.log((response.data)[0]['word']);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n(word_check(string_guess));\n*/\n//If character is X, then check whole word for any other of the same character. if none then turn\n//if character is ), then check whole word for any other Green. if none return yellow, if green and count<2, then\n//If no other X then feedback will need to not mark yellow for repeated characters in the wrong spot\n//evaluates word\n//need a green counter for each letter\n//repition counter for code\nvar rep_counter = {};\n\nfor (let y = 0; y <= 4; y++) { //how many green for each letter\n  var counter =0;  //\n    if (guesses[y] === code[y]){\n      if(guesses[y] in rep_counter){\n        rep_counter[guesses[y]] = (rep_counter[guesses[y]])+1;\n\n\n      }\n      else{\n        counter++;\n    rep_counter[guesses[y]] = counter;\n\n  }\n\n    }\n  }\n\n\n//two copy arrays\n//break down arrays based on color\n//i.e if index green make feeback 'X' and set index to null for guesscopy. If index yellow set feedback to 'O' and index to null for guesscopy\n\nfor (let y = 0; y <= 4; y++) {\n  if(codyCopy[y] === guessesCopy[y]){\n    guessesCopy[y] = 'green';\n  }\n}\n\nfor (let y = 0; y <= 4; y++) {\n    for (let i = 0; i <= 4; i++) {\n      if (codeCopy[i] === guessesCopy[y]){\n        guessesCopy[y] = 'yellow';\n      }\n    }\n  }\n\n\n\n\nconsole.log(guessCopy);\n\nvar rep_counters = {};     //total number of each letter\n\nfor (let y = 0; y <= 4; y++) {\n  var counter =0;\n  for (let i = 0; i <= 4; i++) {\n    if (code[i] === code[y]){\n      counter ++;\n\n    }\n  }\nrep_counters[code[y]] = counter;\nconsole.log(rep_counters[code[y]])\n\n}\n\nconst is_word = fetch('https://api.dictionaryapi.dev/api/v2/entries/en/'+string_guess) //1\n  .then((response) => response.json()) //2\n  .then((word) => {\n    return word[0]; //3\n  });\n\n\n\n  const a = await is_word;\n  if (a === undefined){\n\n\n      feedback = \"this is not a word\"\n\n  }\n  else{\n\n\n  for (let i = 0; i <= 4; i++) {\n    if (code[i] === guesses[i]) {\n      feedback += \"X\";\n    }\n    else if (code.includes(guesses[i]) && ((rep_counter[guesses[i]]) ===undefined || (rep_counter[guesses[i]] < rep_counters[guesses[i]]))) { //error becayse a is undefined\n      feedback += \"O\";\n    }\n    else{\n      feedback += \"-\";\n    }\n  }\n\n//checks to see if they guessed the right word\nif (feedback === 'XXXXX'){\n  feedback = \"You Win!\"\n\n}\nelse if(guessCounter===7){\n  feedback = \"You Lose!\"\n}\n\n}\n\n\n  return feedback;\n\n\n\n\n\n};\n"]},"metadata":{},"sourceType":"module"}