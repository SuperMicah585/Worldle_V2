{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { EventService } from \"../eventService\";\nimport { Events } from \"../events\";\nimport { Autowired } from \"../context/context\";\nimport { Constants } from \"../constants/constants\";\nimport { exists, missing, missingOrEmpty } from \"../utils/generic\";\nimport { assign, getAllKeysInObjects } from \"../utils/object\";\nimport { startsWith } from \"../utils/string\";\nimport { debounce } from \"../utils/function\";\nexport var RowHighlightPosition;\n\n(function (RowHighlightPosition) {\n  RowHighlightPosition[RowHighlightPosition[\"Above\"] = 0] = \"Above\";\n  RowHighlightPosition[RowHighlightPosition[\"Below\"] = 1] = \"Below\";\n})(RowHighlightPosition || (RowHighlightPosition = {}));\n\nvar RowNode = function () {\n  function RowNode() {\n    /** The index of this node in the grid, only valid if node is displayed in the grid, otherwise it should be ignored as old index may be present */\n    this.rowIndex = null;\n    /** Groups only - The key for the group eg Ireland, UK, USA */\n\n    this.key = null;\n    /** Children mapped by the pivot columns */\n\n    this.childrenMapped = {};\n    /**\n     * True if the RowNode is not filtered, or in a collapsed group.\n     */\n\n    this.displayed = false;\n    /** The top pixel for this row */\n\n    this.rowTop = null;\n    /** The top pixel for this row last time, makes sense if data set was ordered or filtered,\n     * it is used so new rows can animate in from their old position. */\n\n    this.oldRowTop = null;\n    /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n\n    this.selectable = true;\n    /** Used by sorting service - to give deterministic sort to groups. Previously we\n     * just id for this, however id is a string and had slower sorting compared to numbers. */\n\n    this.__objectId = RowNode.OBJECT_ID_SEQUENCE++;\n    /** When one or more Columns are using autoHeight, this keeps track of height of each autoHeight Cell,\n     * indexed by the Column ID. */\n\n    this.__autoHeights = {};\n    /** True when nodes with the same id are being removed and added as part of the same batch transaction */\n\n    this.alreadyRendered = false;\n    this.highlighted = null;\n    this.selected = false;\n  }\n\n  RowNode.prototype.setData = function (data) {\n    this.setDataCommon(data, false);\n  }; // similar to setRowData, however it is expected that the data is the same data item. this\n  // is intended to be used with Redux type stores, where the whole data can be changed. we are\n  // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n  // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n  // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n\n\n  RowNode.prototype.updateData = function (data) {\n    this.setDataCommon(data, true);\n  };\n\n  RowNode.prototype.setDataCommon = function (data, update) {\n    var oldData = this.data;\n    this.data = data;\n    this.valueCache.onDataChanged();\n    this.updateDataOnDetailNode();\n    this.checkRowSelectable();\n    var event = this.createDataChangedEvent(data, oldData, update);\n    this.dispatchLocalEvent(event);\n  }; // when we are doing master / detail, the detail node is lazy created, but then kept around.\n  // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n  // in sync, otherwise expand/collapse of the detail would still show the old values.\n\n\n  RowNode.prototype.updateDataOnDetailNode = function () {\n    if (this.detailNode) {\n      this.detailNode.data = this.data;\n    }\n  };\n\n  RowNode.prototype.createDataChangedEvent = function (newData, oldData, update) {\n    return {\n      type: RowNode.EVENT_DATA_CHANGED,\n      node: this,\n      oldData: oldData,\n      newData: newData,\n      update: update\n    };\n  };\n\n  RowNode.prototype.createLocalRowEvent = function (type) {\n    return {\n      type: type,\n      node: this\n    };\n  };\n\n  RowNode.prototype.getRowIndexString = function () {\n    if (this.rowPinned === Constants.PINNED_TOP) {\n      return 't-' + this.rowIndex;\n    }\n\n    if (this.rowPinned === Constants.PINNED_BOTTOM) {\n      return 'b-' + this.rowIndex;\n    }\n\n    return this.rowIndex.toString();\n  };\n\n  RowNode.prototype.createDaemonNode = function () {\n    var oldNode = new RowNode();\n    this.context.createBean(oldNode); // just copy the id and data, this is enough for the node to be used\n    // in the selection controller (the selection controller is the only\n    // place where daemon nodes can live).\n\n    oldNode.id = this.id;\n    oldNode.data = this.data;\n    oldNode.daemon = true;\n    oldNode.selected = this.selected;\n    oldNode.level = this.level;\n    return oldNode;\n  };\n\n  RowNode.prototype.setDataAndId = function (data, id) {\n    var oldNode = exists(this.id) ? this.createDaemonNode() : null;\n    var oldData = this.data;\n    this.data = data;\n    this.updateDataOnDetailNode();\n    this.setId(id);\n    this.selectionService.syncInRowNode(this, oldNode);\n    this.checkRowSelectable();\n    var event = this.createDataChangedEvent(data, oldData, false);\n    this.dispatchLocalEvent(event);\n  };\n\n  RowNode.prototype.checkRowSelectable = function () {\n    var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n    this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc(this) : true);\n  };\n\n  RowNode.prototype.setRowSelectable = function (newVal) {\n    if (this.selectable !== newVal) {\n      this.selectable = newVal;\n\n      if (this.eventService) {\n        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));\n      }\n    }\n  };\n\n  RowNode.prototype.setId = function (id) {\n    // see if user is providing the id's\n    var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();\n\n    if (getRowNodeId) {\n      // if user is providing the id's, then we set the id only after the data has been set.\n      // this is important for virtual pagination and viewport, where empty rows exist.\n      if (this.data) {\n        this.id = getRowNodeId(this.data); // make sure id provided doesn't start with 'row-group-' as this is reserved. also check that\n        // it has 'startsWith' in case the user provided a number.\n\n        if (this.id && typeof this.id === 'string' && startsWith(this.id, RowNode.ID_PREFIX_ROW_GROUP)) {\n          console.error(\"AG Grid: Row ID's cannot start with \" + RowNode.ID_PREFIX_ROW_GROUP + \", this is a reserved prefix for AG Grid's row grouping feature.\");\n        }\n      } else {\n        // this can happen if user has set blank into the rowNode after the row previously\n        // having data. this happens in virtual page row model, when data is delete and\n        // the page is refreshed.\n        this.id = undefined;\n      }\n    } else {\n      this.id = id;\n    }\n  };\n\n  RowNode.prototype.isPixelInRange = function (pixel) {\n    if (!exists(this.rowTop) || !exists(this.rowHeight)) {\n      return false;\n    }\n\n    return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;\n  };\n\n  RowNode.prototype.setFirstChild = function (firstChild) {\n    if (this.firstChild === firstChild) {\n      return;\n    }\n\n    this.firstChild = firstChild;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setLastChild = function (lastChild) {\n    if (this.lastChild === lastChild) {\n      return;\n    }\n\n    this.lastChild = lastChild;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setChildIndex = function (childIndex) {\n    if (this.childIndex === childIndex) {\n      return;\n    }\n\n    this.childIndex = childIndex;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setRowTop = function (rowTop) {\n    this.oldRowTop = this.rowTop;\n\n    if (this.rowTop === rowTop) {\n      return;\n    }\n\n    this.rowTop = rowTop;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));\n    }\n\n    this.setDisplayed(rowTop !== null);\n  };\n\n  RowNode.prototype.clearRowTopAndRowIndex = function () {\n    this.oldRowTop = null;\n    this.setRowTop(null);\n    this.setRowIndex(null);\n  };\n\n  RowNode.prototype.setDisplayed = function (displayed) {\n    if (this.displayed === displayed) {\n      return;\n    }\n\n    this.displayed = displayed;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DISPLAYED_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setDragging = function (dragging) {\n    if (this.dragging === dragging) {\n      return;\n    }\n\n    this.dragging = dragging;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setHighlighted = function (highlighted) {\n    if (highlighted === this.highlighted) {\n      return;\n    }\n\n    this.highlighted = highlighted;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HIGHLIGHT_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setAllChildrenCount = function (allChildrenCount) {\n    if (this.allChildrenCount === allChildrenCount) {\n      return;\n    }\n\n    this.allChildrenCount = allChildrenCount;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setMaster = function (master) {\n    if (this.master === master) {\n      return;\n    } // if changing AWAY from master, then unexpand, otherwise\n    // next time it's shown it is expanded again\n\n\n    if (this.master && !master) {\n      this.expanded = false;\n    }\n\n    this.master = master;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_MASTER_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setRowHeight = function (rowHeight, estimated) {\n    if (estimated === void 0) {\n      estimated = false;\n    }\n\n    this.rowHeight = rowHeight;\n    this.rowHeightEstimated = estimated;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setRowAutoHeight = function (cellHeight, column) {\n    if (!this.__autoHeights) {\n      this.__autoHeights = {};\n    }\n\n    var autoHeights = this.__autoHeights;\n    autoHeights[column.getId()] = cellHeight;\n\n    if (cellHeight != null) {\n      if (this.checkAutoHeightsDebounced == null) {\n        this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);\n      }\n\n      this.checkAutoHeightsDebounced();\n    }\n  };\n\n  RowNode.prototype.checkAutoHeights = function () {\n    var _this = this;\n\n    var notAllPresent = false;\n    var nonePresent = true;\n    var newRowHeight = 0;\n    var autoHeights = this.__autoHeights;\n\n    if (autoHeights == null) {\n      return;\n    }\n\n    var displayedAutoHeightCols = this.columnModel.getAllDisplayedAutoHeightCols();\n    displayedAutoHeightCols.forEach(function (col) {\n      var cellHeight = autoHeights[col.getId()];\n\n      if (cellHeight == null) {\n        notAllPresent = true;\n        return;\n      }\n\n      nonePresent = false;\n\n      if (cellHeight > newRowHeight) {\n        newRowHeight = cellHeight;\n      }\n    });\n\n    if (notAllPresent) {\n      return;\n    } // we take min of 10, so we don't adjust for empty rows. if <10, we put to default.\n    // this prevents the row starting very small when waiting for async components, \n    // which would then mean the grid squashes in far to many rows (as small heights\n    // means more rows fit in) which looks crap. so best ignore small values and assume \n    // we are still waiting for values to render.\n\n\n    if (nonePresent || newRowHeight < 10) {\n      newRowHeight = this.gridOptionsWrapper.getRowHeightForNode(this).height;\n    }\n\n    var setTheHeight = function (height) {\n      var rowModel = _this.rowModel;\n\n      _this.setRowHeight(height);\n\n      rowModel.onRowHeightChanged && rowModel.onRowHeightChanged();\n    };\n\n    if (newRowHeight == this.rowHeight) {\n      return;\n    }\n\n    setTheHeight(newRowHeight);\n  };\n\n  RowNode.prototype.setRowIndex = function (rowIndex) {\n    if (this.rowIndex === rowIndex) {\n      return;\n    }\n\n    this.rowIndex = rowIndex;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setUiLevel = function (uiLevel) {\n    if (this.uiLevel === uiLevel) {\n      return;\n    }\n\n    this.uiLevel = uiLevel;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));\n    }\n  };\n\n  RowNode.prototype.setExpanded = function (expanded) {\n    if (this.expanded === expanded) {\n      return;\n    }\n\n    this.expanded = expanded;\n\n    if (this.eventService) {\n      this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));\n    }\n\n    var event = assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {\n      expanded: expanded\n    });\n    this.rowNodeEventThrottle.dispatchExpanded(event); // when using footers we need to refresh the group row, as the aggregation\n    // values jump between group and footer\n\n    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {\n      this.rowRenderer.refreshCells({\n        rowNodes: [this]\n      });\n    }\n  };\n\n  RowNode.prototype.createGlobalRowEvent = function (type) {\n    return {\n      type: type,\n      node: this,\n      data: this.data,\n      rowIndex: this.rowIndex,\n      rowPinned: this.rowPinned,\n      context: this.gridOptionsWrapper.getContext(),\n      api: this.gridOptionsWrapper.getApi(),\n      columnApi: this.gridOptionsWrapper.getColumnApi()\n    };\n  };\n\n  RowNode.prototype.dispatchLocalEvent = function (event) {\n    if (this.eventService) {\n      this.eventService.dispatchEvent(event);\n    }\n  }; // we also allow editing the value via the editors. when it is done via\n  // the editors, no 'cell changed' event gets fired, as it's assumed that\n  // the cell knows about the change given it's in charge of the editing.\n  // this method is for the client to call, so the cell listens for the change\n  // event, and also flashes the cell when the change occurs.\n\n\n  RowNode.prototype.setDataValue = function (colKey, newValue) {\n    var column = this.columnModel.getPrimaryColumn(colKey);\n    var oldValue = this.valueService.getValue(column, this);\n    this.valueService.setValue(this, column, newValue);\n    this.dispatchCellChangedEvent(column, newValue, oldValue);\n  };\n\n  RowNode.prototype.setGroupValue = function (colKey, newValue) {\n    var column = this.columnModel.getGridColumn(colKey);\n\n    if (missing(this.groupData)) {\n      this.groupData = {};\n    }\n\n    var columnId = column.getColId();\n    var oldValue = this.groupData[columnId];\n\n    if (oldValue === newValue) {\n      return;\n    }\n\n    this.groupData[columnId] = newValue;\n    this.dispatchCellChangedEvent(column, newValue, oldValue);\n  }; // sets the data for an aggregation\n\n\n  RowNode.prototype.setAggData = function (newAggData) {\n    var _this = this; // find out all keys that could potentially change\n\n\n    var colIds = getAllKeysInObjects([this.aggData, newAggData]);\n    var oldAggData = this.aggData;\n    this.aggData = newAggData; // if no event service, nobody has registered for events, so no need fire event\n\n    if (this.eventService) {\n      colIds.forEach(function (colId) {\n        var column = _this.columnModel.getGridColumn(colId);\n\n        var value = _this.aggData ? _this.aggData[colId] : undefined;\n        var oldValue = oldAggData ? oldAggData[colId] : undefined;\n\n        _this.dispatchCellChangedEvent(column, value, oldValue);\n      });\n    }\n  };\n\n  RowNode.prototype.updateHasChildren = function () {\n    // we need to return true when this.group=true, as this is used by server side row model\n    // (as children are lazy loaded and stored in a cache anyway). otherwise we return true\n    // if children exist.\n    var newValue = this.group && !this.footer || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;\n\n    if (newValue !== this.__hasChildren) {\n      this.__hasChildren = !!newValue;\n\n      if (this.eventService) {\n        this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HAS_CHILDREN_CHANGED));\n      }\n    }\n  };\n\n  RowNode.prototype.hasChildren = function () {\n    if (this.__hasChildren == null) {\n      this.updateHasChildren();\n    }\n\n    return this.__hasChildren;\n  };\n\n  RowNode.prototype.isEmptyRowGroupNode = function () {\n    return this.group && missingOrEmpty(this.childrenAfterGroup);\n  };\n\n  RowNode.prototype.dispatchCellChangedEvent = function (column, newValue, oldValue) {\n    var cellChangedEvent = {\n      type: RowNode.EVENT_CELL_CHANGED,\n      node: this,\n      column: column,\n      newValue: newValue,\n      oldValue: oldValue\n    };\n    this.dispatchLocalEvent(cellChangedEvent);\n  };\n\n  RowNode.prototype.resetQuickFilterAggregateText = function () {\n    this.quickFilterAggregateText = null;\n  };\n\n  RowNode.prototype.isExpandable = function () {\n    return this.hasChildren() && !this.footer || this.master ? true : false;\n  };\n\n  RowNode.prototype.isSelected = function () {\n    // for footers, we just return what our sibling selected state is, as cannot select a footer\n    if (this.footer) {\n      return this.sibling.isSelected();\n    }\n\n    return this.selected;\n  };\n\n  RowNode.prototype.depthFirstSearch = function (callback) {\n    if (this.childrenAfterGroup) {\n      this.childrenAfterGroup.forEach(function (child) {\n        return child.depthFirstSearch(callback);\n      });\n    }\n\n    callback(this);\n  }; // + rowController.updateGroupsInSelection()\n  // + selectionController.calculatedSelectedForAllGroupNodes()\n\n\n  RowNode.prototype.calculateSelectedFromChildren = function () {\n    var atLeastOneSelected = false;\n    var atLeastOneDeSelected = false;\n    var atLeastOneMixed = false;\n    var newSelectedValue;\n\n    if (this.childrenAfterGroup) {\n      for (var i = 0; i < this.childrenAfterGroup.length; i++) {\n        var child = this.childrenAfterGroup[i]; // skip non-selectable nodes to prevent inconsistent selection values\n\n        if (!child.selectable) {\n          continue;\n        }\n\n        var childState = child.isSelected();\n\n        switch (childState) {\n          case true:\n            atLeastOneSelected = true;\n            break;\n\n          case false:\n            atLeastOneDeSelected = true;\n            break;\n\n          default:\n            atLeastOneMixed = true;\n            break;\n        }\n      }\n    }\n\n    if (atLeastOneMixed) {\n      newSelectedValue = undefined;\n    } else if (atLeastOneSelected && !atLeastOneDeSelected) {\n      newSelectedValue = true;\n    } else if (!atLeastOneSelected && atLeastOneDeSelected) {\n      newSelectedValue = false;\n    } else {\n      newSelectedValue = undefined;\n    }\n\n    this.selectThisNode(newSelectedValue);\n  };\n\n  RowNode.prototype.setSelectedInitialValue = function (selected) {\n    this.selected = selected;\n  };\n\n  RowNode.prototype.setSelected = function (newValue, clearSelection, suppressFinishActions) {\n    if (clearSelection === void 0) {\n      clearSelection = false;\n    }\n\n    if (suppressFinishActions === void 0) {\n      suppressFinishActions = false;\n    }\n\n    this.setSelectedParams({\n      newValue: newValue,\n      clearSelection: clearSelection,\n      suppressFinishActions: suppressFinishActions,\n      rangeSelect: false\n    });\n  };\n\n  RowNode.prototype.isRowPinned = function () {\n    return this.rowPinned === Constants.PINNED_TOP || this.rowPinned === Constants.PINNED_BOTTOM;\n  }; // to make calling code more readable, this is the same method as setSelected except it takes names parameters\n\n\n  RowNode.prototype.setSelectedParams = function (params) {\n    var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n    var newValue = params.newValue === true;\n    var clearSelection = params.clearSelection === true;\n    var suppressFinishActions = params.suppressFinishActions === true;\n    var rangeSelect = params.rangeSelect === true; // groupSelectsFiltered only makes sense when group selects children\n\n    var groupSelectsFiltered = groupSelectsChildren && params.groupSelectsFiltered === true;\n\n    if (this.id === undefined) {\n      console.warn('AG Grid: cannot select node until id for node is known');\n      return 0;\n    }\n\n    if (this.rowPinned) {\n      console.warn('AG Grid: cannot select pinned rows');\n      return 0;\n    } // if we are a footer, we don't do selection, just pass the info\n    // to the sibling (the parent of the group)\n\n\n    if (this.footer) {\n      return this.sibling.setSelectedParams(params);\n    }\n\n    if (rangeSelect && this.selectionService.getLastSelectedNode()) {\n      var newRowClicked = this.selectionService.getLastSelectedNode() !== this;\n      var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();\n\n      if (newRowClicked && allowMultiSelect) {\n        var nodesChanged = this.doRowRangeSelection(params.newValue);\n        this.selectionService.setLastSelectedNode(this);\n        return nodesChanged;\n      }\n    }\n\n    var updatedCount = 0; // when groupSelectsFiltered, then this node may end up intermediate despite\n    // trying to set it to true / false. this group will be calculated further on\n    // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it\n    // here, otherwise the updatedCount would include it.\n\n    var skipThisNode = groupSelectsFiltered && this.group;\n\n    if (!skipThisNode) {\n      var thisNodeWasSelected = this.selectThisNode(newValue);\n\n      if (thisNodeWasSelected) {\n        updatedCount++;\n      }\n    }\n\n    if (groupSelectsChildren && this.group) {\n      updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);\n    } // clear other nodes if not doing multi select\n\n\n    if (!suppressFinishActions) {\n      var clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());\n\n      if (clearOtherNodes) {\n        updatedCount += this.selectionService.clearOtherNodes(this);\n      } // only if we selected something, then update groups and fire events\n\n\n      if (updatedCount > 0) {\n        this.selectionService.updateGroupsFromChildrenSelections(); // this is the very end of the 'action node', so we are finished all the updates,\n        // include any parent / child changes that this method caused\n\n        var event_1 = {\n          type: Events.EVENT_SELECTION_CHANGED,\n          api: this.gridApi,\n          columnApi: this.columnApi\n        };\n        this.mainEventService.dispatchEvent(event_1);\n      } // so if user next does shift-select, we know where to start the selection from\n\n\n      if (newValue) {\n        this.selectionService.setLastSelectedNode(this);\n      }\n    }\n\n    return updatedCount;\n  }; // selects all rows between this node and the last selected node (or the top if this is the first selection).\n  // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n  // holding down 'shift'.\n\n\n  RowNode.prototype.doRowRangeSelection = function (value) {\n    var _this = this;\n\n    if (value === void 0) {\n      value = true;\n    }\n\n    var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n    var lastSelectedNode = this.selectionService.getLastSelectedNode();\n    var nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);\n    var updatedCount = 0;\n    nodesToSelect.forEach(function (rowNode) {\n      if (rowNode.group && groupsSelectChildren || value === false && _this === rowNode) {\n        return;\n      }\n\n      var nodeWasSelected = rowNode.selectThisNode(value);\n\n      if (nodeWasSelected) {\n        updatedCount++;\n      }\n    });\n    this.selectionService.updateGroupsFromChildrenSelections();\n    var event = {\n      type: Events.EVENT_SELECTION_CHANGED,\n      api: this.gridApi,\n      columnApi: this.columnApi\n    };\n    this.mainEventService.dispatchEvent(event);\n    return updatedCount;\n  };\n\n  RowNode.prototype.isParentOfNode = function (potentialParent) {\n    var parentNode = this.parent;\n\n    while (parentNode) {\n      if (parentNode === potentialParent) {\n        return true;\n      }\n\n      parentNode = parentNode.parent;\n    }\n\n    return false;\n  };\n\n  RowNode.prototype.selectThisNode = function (newValue) {\n    // we only check selectable when newValue=true (ie selecting) to allow unselecting values,\n    // as selectable is dynamic, need a way to unselect rows when selectable becomes false.\n    var selectionNotAllowed = !this.selectable && newValue;\n    var selectionNotChanged = this.selected === newValue;\n\n    if (selectionNotAllowed || selectionNotChanged) {\n      return false;\n    }\n\n    this.selected = newValue;\n\n    if (this.eventService) {\n      this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n    }\n\n    var event = this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED);\n    this.mainEventService.dispatchEvent(event);\n    return true;\n  };\n\n  RowNode.prototype.selectChildNodes = function (newValue, groupSelectsFiltered) {\n    var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;\n\n    if (missing(children)) {\n      return 0;\n    }\n\n    var updatedCount = 0;\n\n    for (var i = 0; i < children.length; i++) {\n      updatedCount += children[i].setSelectedParams({\n        newValue: newValue,\n        clearSelection: false,\n        suppressFinishActions: true,\n        groupSelectsFiltered: groupSelectsFiltered\n      });\n    }\n\n    return updatedCount;\n  };\n\n  RowNode.prototype.addEventListener = function (eventType, listener) {\n    if (!this.eventService) {\n      this.eventService = new EventService();\n    }\n\n    this.eventService.addEventListener(eventType, listener);\n  };\n\n  RowNode.prototype.removeEventListener = function (eventType, listener) {\n    if (!this.eventService) {\n      return;\n    }\n\n    this.eventService.removeEventListener(eventType, listener);\n\n    if (this.eventService.noRegisteredListenersExist()) {\n      this.eventService = null;\n    }\n  };\n\n  RowNode.prototype.onMouseEnter = function () {\n    this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));\n  };\n\n  RowNode.prototype.onMouseLeave = function () {\n    this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));\n  };\n\n  RowNode.prototype.getFirstChildOfFirstChild = function (rowGroupColumn) {\n    var currentRowNode = this;\n    var isCandidate = true;\n    var foundFirstChildPath = false;\n    var nodeToSwapIn = null; // if we are hiding groups, then if we are the first child, of the first child,\n    // all the way up to the column we are interested in, then we show the group cell.\n\n    while (isCandidate && !foundFirstChildPath) {\n      var parentRowNode = currentRowNode.parent;\n      var firstChild = exists(parentRowNode) && currentRowNode.firstChild;\n\n      if (firstChild) {\n        if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n          foundFirstChildPath = true;\n          nodeToSwapIn = parentRowNode;\n        }\n      } else {\n        isCandidate = false;\n      }\n\n      currentRowNode = parentRowNode;\n    }\n\n    return foundFirstChildPath ? nodeToSwapIn : null;\n  };\n\n  RowNode.prototype.isFullWidthCell = function () {\n    var isFullWidthCellFunc = this.gridOptionsWrapper.getIsFullWidthCellFunc();\n    return isFullWidthCellFunc ? isFullWidthCellFunc(this) : false;\n  };\n\n  RowNode.prototype.getRoute = function () {\n    if (this.key == null) {\n      return;\n    }\n\n    var res = [];\n    var pointer = this;\n\n    while (pointer.key != null) {\n      res.push(pointer.key);\n      pointer = pointer.parent;\n    }\n\n    return res.reverse();\n  };\n\n  RowNode.ID_PREFIX_ROW_GROUP = 'row-group-';\n  RowNode.ID_PREFIX_TOP_PINNED = 't-';\n  RowNode.ID_PREFIX_BOTTOM_PINNED = 'b-';\n  RowNode.OBJECT_ID_SEQUENCE = 0;\n  RowNode.EVENT_ROW_SELECTED = 'rowSelected';\n  RowNode.EVENT_DATA_CHANGED = 'dataChanged';\n  RowNode.EVENT_CELL_CHANGED = 'cellChanged';\n  RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';\n  RowNode.EVENT_MASTER_CHANGED = 'masterChanged';\n  RowNode.EVENT_MOUSE_ENTER = 'mouseEnter';\n  RowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';\n  RowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';\n  RowNode.EVENT_TOP_CHANGED = 'topChanged';\n  RowNode.EVENT_DISPLAYED_CHANGED = 'displayedChanged';\n  RowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';\n  RowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';\n  RowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';\n  RowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';\n  RowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';\n  RowNode.EVENT_HAS_CHILDREN_CHANGED = 'hasChildrenChanged';\n  RowNode.EVENT_SELECTABLE_CHANGED = 'selectableChanged';\n  RowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';\n  RowNode.EVENT_HIGHLIGHT_CHANGED = 'rowHighlightChanged';\n  RowNode.EVENT_DRAGGING_CHANGED = 'draggingChanged';\n\n  __decorate([Autowired('eventService')], RowNode.prototype, \"mainEventService\", void 0);\n\n  __decorate([Autowired('rowRenderer')], RowNode.prototype, \"rowRenderer\", void 0);\n\n  __decorate([Autowired('gridOptionsWrapper')], RowNode.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('selectionService')], RowNode.prototype, \"selectionService\", void 0);\n\n  __decorate([Autowired('columnModel')], RowNode.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('valueService')], RowNode.prototype, \"valueService\", void 0);\n\n  __decorate([Autowired('rowModel')], RowNode.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('context')], RowNode.prototype, \"context\", void 0);\n\n  __decorate([Autowired('valueCache')], RowNode.prototype, \"valueCache\", void 0);\n\n  __decorate([Autowired('columnApi')], RowNode.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('gridApi')], RowNode.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('rowNodeEventThrottle')], RowNode.prototype, \"rowNodeEventThrottle\", void 0);\n\n  return RowNode;\n}();\n\nexport { RowNode };","map":{"version":3,"sources":["/Users/mphelps/react-app/TasQDashboard-main/node_modules/@ag-grid-community/core/dist/es6/entities/rowNode.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","EventService","Events","Autowired","Constants","exists","missing","missingOrEmpty","assign","getAllKeysInObjects","startsWith","debounce","RowHighlightPosition","RowNode","rowIndex","childrenMapped","displayed","rowTop","oldRowTop","selectable","__objectId","OBJECT_ID_SEQUENCE","__autoHeights","alreadyRendered","highlighted","selected","prototype","setData","data","setDataCommon","updateData","update","oldData","valueCache","onDataChanged","updateDataOnDetailNode","checkRowSelectable","event","createDataChangedEvent","dispatchLocalEvent","detailNode","newData","type","EVENT_DATA_CHANGED","node","createLocalRowEvent","getRowIndexString","rowPinned","PINNED_TOP","PINNED_BOTTOM","toString","createDaemonNode","oldNode","context","createBean","id","daemon","level","setDataAndId","setId","selectionService","syncInRowNode","isRowSelectableFunc","gridOptionsWrapper","getIsRowSelectableFunc","setRowSelectable","newVal","eventService","dispatchEvent","EVENT_SELECTABLE_CHANGED","getRowNodeId","getRowNodeIdFunc","ID_PREFIX_ROW_GROUP","console","error","undefined","isPixelInRange","pixel","rowHeight","setFirstChild","firstChild","EVENT_FIRST_CHILD_CHANGED","setLastChild","lastChild","EVENT_LAST_CHILD_CHANGED","setChildIndex","childIndex","EVENT_CHILD_INDEX_CHANGED","setRowTop","EVENT_TOP_CHANGED","setDisplayed","clearRowTopAndRowIndex","setRowIndex","EVENT_DISPLAYED_CHANGED","setDragging","dragging","EVENT_DRAGGING_CHANGED","setHighlighted","EVENT_HIGHLIGHT_CHANGED","setAllChildrenCount","allChildrenCount","EVENT_ALL_CHILDREN_COUNT_CHANGED","setMaster","master","expanded","EVENT_MASTER_CHANGED","setRowHeight","estimated","rowHeightEstimated","EVENT_HEIGHT_CHANGED","setRowAutoHeight","cellHeight","column","autoHeights","getId","checkAutoHeightsDebounced","checkAutoHeights","bind","_this","notAllPresent","nonePresent","newRowHeight","displayedAutoHeightCols","columnModel","getAllDisplayedAutoHeightCols","forEach","col","getRowHeightForNode","height","setTheHeight","rowModel","onRowHeightChanged","EVENT_ROW_INDEX_CHANGED","setUiLevel","uiLevel","EVENT_UI_LEVEL_CHANGED","setExpanded","EVENT_EXPANDED_CHANGED","createGlobalRowEvent","EVENT_ROW_GROUP_OPENED","rowNodeEventThrottle","dispatchExpanded","isGroupIncludeFooter","rowRenderer","refreshCells","rowNodes","getContext","api","getApi","columnApi","getColumnApi","setDataValue","colKey","newValue","getPrimaryColumn","oldValue","valueService","getValue","setValue","dispatchCellChangedEvent","setGroupValue","getGridColumn","groupData","columnId","getColId","setAggData","newAggData","colIds","aggData","oldAggData","colId","value","updateHasChildren","group","footer","childrenAfterGroup","__hasChildren","EVENT_HAS_CHILDREN_CHANGED","hasChildren","isEmptyRowGroupNode","cellChangedEvent","EVENT_CELL_CHANGED","resetQuickFilterAggregateText","quickFilterAggregateText","isExpandable","isSelected","sibling","depthFirstSearch","callback","child","calculateSelectedFromChildren","atLeastOneSelected","atLeastOneDeSelected","atLeastOneMixed","newSelectedValue","childState","selectThisNode","setSelectedInitialValue","setSelected","clearSelection","suppressFinishActions","setSelectedParams","rangeSelect","isRowPinned","params","groupSelectsChildren","isGroupSelectsChildren","groupSelectsFiltered","warn","getLastSelectedNode","newRowClicked","allowMultiSelect","isRowSelectionMulti","nodesChanged","doRowRangeSelection","setLastSelectedNode","updatedCount","skipThisNode","thisNodeWasSelected","selectChildNodes","clearOtherNodes","updateGroupsFromChildrenSelections","event_1","EVENT_SELECTION_CHANGED","gridApi","mainEventService","groupsSelectChildren","lastSelectedNode","nodesToSelect","getNodesInRangeForSelection","rowNode","nodeWasSelected","isParentOfNode","potentialParent","parentNode","parent","selectionNotAllowed","selectionNotChanged","EVENT_ROW_SELECTED","children","childrenAfterFilter","addEventListener","eventType","listener","removeEventListener","noRegisteredListenersExist","onMouseEnter","EVENT_MOUSE_ENTER","onMouseLeave","EVENT_MOUSE_LEAVE","getFirstChildOfFirstChild","rowGroupColumn","currentRowNode","isCandidate","foundFirstChildPath","nodeToSwapIn","parentRowNode","isFullWidthCell","isFullWidthCellFunc","getIsFullWidthCellFunc","getRoute","res","pointer","push","reverse","ID_PREFIX_TOP_PINNED","ID_PREFIX_BOTTOM_PINNED"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { EventService } from \"../eventService\";\nimport { Events } from \"../events\";\nimport { Autowired } from \"../context/context\";\nimport { Constants } from \"../constants/constants\";\nimport { exists, missing, missingOrEmpty } from \"../utils/generic\";\nimport { assign, getAllKeysInObjects } from \"../utils/object\";\nimport { startsWith } from \"../utils/string\";\nimport { debounce } from \"../utils/function\";\nexport var RowHighlightPosition;\n(function (RowHighlightPosition) {\n    RowHighlightPosition[RowHighlightPosition[\"Above\"] = 0] = \"Above\";\n    RowHighlightPosition[RowHighlightPosition[\"Below\"] = 1] = \"Below\";\n})(RowHighlightPosition || (RowHighlightPosition = {}));\nvar RowNode = /** @class */ (function () {\n    function RowNode() {\n        /** The index of this node in the grid, only valid if node is displayed in the grid, otherwise it should be ignored as old index may be present */\n        this.rowIndex = null;\n        /** Groups only - The key for the group eg Ireland, UK, USA */\n        this.key = null;\n        /** Children mapped by the pivot columns */\n        this.childrenMapped = {};\n        /**\n         * True if the RowNode is not filtered, or in a collapsed group.\n         */\n        this.displayed = false;\n        /** The top pixel for this row */\n        this.rowTop = null;\n        /** The top pixel for this row last time, makes sense if data set was ordered or filtered,\n         * it is used so new rows can animate in from their old position. */\n        this.oldRowTop = null;\n        /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n        this.selectable = true;\n        /** Used by sorting service - to give deterministic sort to groups. Previously we\n         * just id for this, however id is a string and had slower sorting compared to numbers. */\n        this.__objectId = RowNode.OBJECT_ID_SEQUENCE++;\n        /** When one or more Columns are using autoHeight, this keeps track of height of each autoHeight Cell,\n         * indexed by the Column ID. */\n        this.__autoHeights = {};\n        /** True when nodes with the same id are being removed and added as part of the same batch transaction */\n        this.alreadyRendered = false;\n        this.highlighted = null;\n        this.selected = false;\n    }\n    RowNode.prototype.setData = function (data) {\n        this.setDataCommon(data, false);\n    };\n    // similar to setRowData, however it is expected that the data is the same data item. this\n    // is intended to be used with Redux type stores, where the whole data can be changed. we are\n    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n    RowNode.prototype.updateData = function (data) {\n        this.setDataCommon(data, true);\n    };\n    RowNode.prototype.setDataCommon = function (data, update) {\n        var oldData = this.data;\n        this.data = data;\n        this.valueCache.onDataChanged();\n        this.updateDataOnDetailNode();\n        this.checkRowSelectable();\n        var event = this.createDataChangedEvent(data, oldData, update);\n        this.dispatchLocalEvent(event);\n    };\n    // when we are doing master / detail, the detail node is lazy created, but then kept around.\n    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n    // in sync, otherwise expand/collapse of the detail would still show the old values.\n    RowNode.prototype.updateDataOnDetailNode = function () {\n        if (this.detailNode) {\n            this.detailNode.data = this.data;\n        }\n    };\n    RowNode.prototype.createDataChangedEvent = function (newData, oldData, update) {\n        return {\n            type: RowNode.EVENT_DATA_CHANGED,\n            node: this,\n            oldData: oldData,\n            newData: newData,\n            update: update\n        };\n    };\n    RowNode.prototype.createLocalRowEvent = function (type) {\n        return {\n            type: type,\n            node: this\n        };\n    };\n    RowNode.prototype.getRowIndexString = function () {\n        if (this.rowPinned === Constants.PINNED_TOP) {\n            return 't-' + this.rowIndex;\n        }\n        if (this.rowPinned === Constants.PINNED_BOTTOM) {\n            return 'b-' + this.rowIndex;\n        }\n        return this.rowIndex.toString();\n    };\n    RowNode.prototype.createDaemonNode = function () {\n        var oldNode = new RowNode();\n        this.context.createBean(oldNode);\n        // just copy the id and data, this is enough for the node to be used\n        // in the selection controller (the selection controller is the only\n        // place where daemon nodes can live).\n        oldNode.id = this.id;\n        oldNode.data = this.data;\n        oldNode.daemon = true;\n        oldNode.selected = this.selected;\n        oldNode.level = this.level;\n        return oldNode;\n    };\n    RowNode.prototype.setDataAndId = function (data, id) {\n        var oldNode = exists(this.id) ? this.createDaemonNode() : null;\n        var oldData = this.data;\n        this.data = data;\n        this.updateDataOnDetailNode();\n        this.setId(id);\n        this.selectionService.syncInRowNode(this, oldNode);\n        this.checkRowSelectable();\n        var event = this.createDataChangedEvent(data, oldData, false);\n        this.dispatchLocalEvent(event);\n    };\n    RowNode.prototype.checkRowSelectable = function () {\n        var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n        this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc(this) : true);\n    };\n    RowNode.prototype.setRowSelectable = function (newVal) {\n        if (this.selectable !== newVal) {\n            this.selectable = newVal;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));\n            }\n        }\n    };\n    RowNode.prototype.setId = function (id) {\n        // see if user is providing the id's\n        var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();\n        if (getRowNodeId) {\n            // if user is providing the id's, then we set the id only after the data has been set.\n            // this is important for virtual pagination and viewport, where empty rows exist.\n            if (this.data) {\n                this.id = getRowNodeId(this.data);\n                // make sure id provided doesn't start with 'row-group-' as this is reserved. also check that\n                // it has 'startsWith' in case the user provided a number.\n                if (this.id && typeof this.id === 'string' && startsWith(this.id, RowNode.ID_PREFIX_ROW_GROUP)) {\n                    console.error(\"AG Grid: Row ID's cannot start with \" + RowNode.ID_PREFIX_ROW_GROUP + \", this is a reserved prefix for AG Grid's row grouping feature.\");\n                }\n            }\n            else {\n                // this can happen if user has set blank into the rowNode after the row previously\n                // having data. this happens in virtual page row model, when data is delete and\n                // the page is refreshed.\n                this.id = undefined;\n            }\n        }\n        else {\n            this.id = id;\n        }\n    };\n    RowNode.prototype.isPixelInRange = function (pixel) {\n        if (!exists(this.rowTop) || !exists(this.rowHeight)) {\n            return false;\n        }\n        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);\n    };\n    RowNode.prototype.setFirstChild = function (firstChild) {\n        if (this.firstChild === firstChild) {\n            return;\n        }\n        this.firstChild = firstChild;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));\n        }\n    };\n    RowNode.prototype.setLastChild = function (lastChild) {\n        if (this.lastChild === lastChild) {\n            return;\n        }\n        this.lastChild = lastChild;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));\n        }\n    };\n    RowNode.prototype.setChildIndex = function (childIndex) {\n        if (this.childIndex === childIndex) {\n            return;\n        }\n        this.childIndex = childIndex;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));\n        }\n    };\n    RowNode.prototype.setRowTop = function (rowTop) {\n        this.oldRowTop = this.rowTop;\n        if (this.rowTop === rowTop) {\n            return;\n        }\n        this.rowTop = rowTop;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));\n        }\n        this.setDisplayed(rowTop !== null);\n    };\n    RowNode.prototype.clearRowTopAndRowIndex = function () {\n        this.oldRowTop = null;\n        this.setRowTop(null);\n        this.setRowIndex(null);\n    };\n    RowNode.prototype.setDisplayed = function (displayed) {\n        if (this.displayed === displayed) {\n            return;\n        }\n        this.displayed = displayed;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DISPLAYED_CHANGED));\n        }\n    };\n    RowNode.prototype.setDragging = function (dragging) {\n        if (this.dragging === dragging) {\n            return;\n        }\n        this.dragging = dragging;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));\n        }\n    };\n    RowNode.prototype.setHighlighted = function (highlighted) {\n        if (highlighted === this.highlighted) {\n            return;\n        }\n        this.highlighted = highlighted;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HIGHLIGHT_CHANGED));\n        }\n    };\n    RowNode.prototype.setAllChildrenCount = function (allChildrenCount) {\n        if (this.allChildrenCount === allChildrenCount) {\n            return;\n        }\n        this.allChildrenCount = allChildrenCount;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));\n        }\n    };\n    RowNode.prototype.setMaster = function (master) {\n        if (this.master === master) {\n            return;\n        }\n        // if changing AWAY from master, then unexpand, otherwise\n        // next time it's shown it is expanded again\n        if (this.master && !master) {\n            this.expanded = false;\n        }\n        this.master = master;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_MASTER_CHANGED));\n        }\n    };\n    RowNode.prototype.setRowHeight = function (rowHeight, estimated) {\n        if (estimated === void 0) { estimated = false; }\n        this.rowHeight = rowHeight;\n        this.rowHeightEstimated = estimated;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));\n        }\n    };\n    RowNode.prototype.setRowAutoHeight = function (cellHeight, column) {\n        if (!this.__autoHeights) {\n            this.__autoHeights = {};\n        }\n        var autoHeights = this.__autoHeights;\n        autoHeights[column.getId()] = cellHeight;\n        if (cellHeight != null) {\n            if (this.checkAutoHeightsDebounced == null) {\n                this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);\n            }\n            this.checkAutoHeightsDebounced();\n        }\n    };\n    RowNode.prototype.checkAutoHeights = function () {\n        var _this = this;\n        var notAllPresent = false;\n        var nonePresent = true;\n        var newRowHeight = 0;\n        var autoHeights = this.__autoHeights;\n        if (autoHeights == null) {\n            return;\n        }\n        var displayedAutoHeightCols = this.columnModel.getAllDisplayedAutoHeightCols();\n        displayedAutoHeightCols.forEach(function (col) {\n            var cellHeight = autoHeights[col.getId()];\n            if (cellHeight == null) {\n                notAllPresent = true;\n                return;\n            }\n            nonePresent = false;\n            if (cellHeight > newRowHeight) {\n                newRowHeight = cellHeight;\n            }\n        });\n        if (notAllPresent) {\n            return;\n        }\n        // we take min of 10, so we don't adjust for empty rows. if <10, we put to default.\n        // this prevents the row starting very small when waiting for async components, \n        // which would then mean the grid squashes in far to many rows (as small heights\n        // means more rows fit in) which looks crap. so best ignore small values and assume \n        // we are still waiting for values to render.\n        if (nonePresent || newRowHeight < 10) {\n            newRowHeight = this.gridOptionsWrapper.getRowHeightForNode(this).height;\n        }\n        var setTheHeight = function (height) {\n            var rowModel = _this.rowModel;\n            _this.setRowHeight(height);\n            rowModel.onRowHeightChanged && rowModel.onRowHeightChanged();\n        };\n        if (newRowHeight == this.rowHeight) {\n            return;\n        }\n        setTheHeight(newRowHeight);\n    };\n    RowNode.prototype.setRowIndex = function (rowIndex) {\n        if (this.rowIndex === rowIndex) {\n            return;\n        }\n        this.rowIndex = rowIndex;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));\n        }\n    };\n    RowNode.prototype.setUiLevel = function (uiLevel) {\n        if (this.uiLevel === uiLevel) {\n            return;\n        }\n        this.uiLevel = uiLevel;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));\n        }\n    };\n    RowNode.prototype.setExpanded = function (expanded) {\n        if (this.expanded === expanded) {\n            return;\n        }\n        this.expanded = expanded;\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));\n        }\n        var event = assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {\n            expanded: expanded\n        });\n        this.rowNodeEventThrottle.dispatchExpanded(event);\n        // when using footers we need to refresh the group row, as the aggregation\n        // values jump between group and footer\n        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {\n            this.rowRenderer.refreshCells({ rowNodes: [this] });\n        }\n    };\n    RowNode.prototype.createGlobalRowEvent = function (type) {\n        return {\n            type: type,\n            node: this,\n            data: this.data,\n            rowIndex: this.rowIndex,\n            rowPinned: this.rowPinned,\n            context: this.gridOptionsWrapper.getContext(),\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi()\n        };\n    };\n    RowNode.prototype.dispatchLocalEvent = function (event) {\n        if (this.eventService) {\n            this.eventService.dispatchEvent(event);\n        }\n    };\n    // we also allow editing the value via the editors. when it is done via\n    // the editors, no 'cell changed' event gets fired, as it's assumed that\n    // the cell knows about the change given it's in charge of the editing.\n    // this method is for the client to call, so the cell listens for the change\n    // event, and also flashes the cell when the change occurs.\n    RowNode.prototype.setDataValue = function (colKey, newValue) {\n        var column = this.columnModel.getPrimaryColumn(colKey);\n        var oldValue = this.valueService.getValue(column, this);\n        this.valueService.setValue(this, column, newValue);\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n    };\n    RowNode.prototype.setGroupValue = function (colKey, newValue) {\n        var column = this.columnModel.getGridColumn(colKey);\n        if (missing(this.groupData)) {\n            this.groupData = {};\n        }\n        var columnId = column.getColId();\n        var oldValue = this.groupData[columnId];\n        if (oldValue === newValue) {\n            return;\n        }\n        this.groupData[columnId] = newValue;\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n    };\n    // sets the data for an aggregation\n    RowNode.prototype.setAggData = function (newAggData) {\n        var _this = this;\n        // find out all keys that could potentially change\n        var colIds = getAllKeysInObjects([this.aggData, newAggData]);\n        var oldAggData = this.aggData;\n        this.aggData = newAggData;\n        // if no event service, nobody has registered for events, so no need fire event\n        if (this.eventService) {\n            colIds.forEach(function (colId) {\n                var column = _this.columnModel.getGridColumn(colId);\n                var value = _this.aggData ? _this.aggData[colId] : undefined;\n                var oldValue = oldAggData ? oldAggData[colId] : undefined;\n                _this.dispatchCellChangedEvent(column, value, oldValue);\n            });\n        }\n    };\n    RowNode.prototype.updateHasChildren = function () {\n        // we need to return true when this.group=true, as this is used by server side row model\n        // (as children are lazy loaded and stored in a cache anyway). otherwise we return true\n        // if children exist.\n        var newValue = (this.group && !this.footer) || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);\n        if (newValue !== this.__hasChildren) {\n            this.__hasChildren = !!newValue;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HAS_CHILDREN_CHANGED));\n            }\n        }\n    };\n    RowNode.prototype.hasChildren = function () {\n        if (this.__hasChildren == null) {\n            this.updateHasChildren();\n        }\n        return this.__hasChildren;\n    };\n    RowNode.prototype.isEmptyRowGroupNode = function () {\n        return this.group && missingOrEmpty(this.childrenAfterGroup);\n    };\n    RowNode.prototype.dispatchCellChangedEvent = function (column, newValue, oldValue) {\n        var cellChangedEvent = {\n            type: RowNode.EVENT_CELL_CHANGED,\n            node: this,\n            column: column,\n            newValue: newValue,\n            oldValue: oldValue\n        };\n        this.dispatchLocalEvent(cellChangedEvent);\n    };\n    RowNode.prototype.resetQuickFilterAggregateText = function () {\n        this.quickFilterAggregateText = null;\n    };\n    RowNode.prototype.isExpandable = function () {\n        return (this.hasChildren() && !this.footer) || this.master ? true : false;\n    };\n    RowNode.prototype.isSelected = function () {\n        // for footers, we just return what our sibling selected state is, as cannot select a footer\n        if (this.footer) {\n            return this.sibling.isSelected();\n        }\n        return this.selected;\n    };\n    RowNode.prototype.depthFirstSearch = function (callback) {\n        if (this.childrenAfterGroup) {\n            this.childrenAfterGroup.forEach(function (child) { return child.depthFirstSearch(callback); });\n        }\n        callback(this);\n    };\n    // + rowController.updateGroupsInSelection()\n    // + selectionController.calculatedSelectedForAllGroupNodes()\n    RowNode.prototype.calculateSelectedFromChildren = function () {\n        var atLeastOneSelected = false;\n        var atLeastOneDeSelected = false;\n        var atLeastOneMixed = false;\n        var newSelectedValue;\n        if (this.childrenAfterGroup) {\n            for (var i = 0; i < this.childrenAfterGroup.length; i++) {\n                var child = this.childrenAfterGroup[i];\n                // skip non-selectable nodes to prevent inconsistent selection values\n                if (!child.selectable) {\n                    continue;\n                }\n                var childState = child.isSelected();\n                switch (childState) {\n                    case true:\n                        atLeastOneSelected = true;\n                        break;\n                    case false:\n                        atLeastOneDeSelected = true;\n                        break;\n                    default:\n                        atLeastOneMixed = true;\n                        break;\n                }\n            }\n        }\n        if (atLeastOneMixed) {\n            newSelectedValue = undefined;\n        }\n        else if (atLeastOneSelected && !atLeastOneDeSelected) {\n            newSelectedValue = true;\n        }\n        else if (!atLeastOneSelected && atLeastOneDeSelected) {\n            newSelectedValue = false;\n        }\n        else {\n            newSelectedValue = undefined;\n        }\n        this.selectThisNode(newSelectedValue);\n    };\n    RowNode.prototype.setSelectedInitialValue = function (selected) {\n        this.selected = selected;\n    };\n    RowNode.prototype.setSelected = function (newValue, clearSelection, suppressFinishActions) {\n        if (clearSelection === void 0) { clearSelection = false; }\n        if (suppressFinishActions === void 0) { suppressFinishActions = false; }\n        this.setSelectedParams({\n            newValue: newValue,\n            clearSelection: clearSelection,\n            suppressFinishActions: suppressFinishActions,\n            rangeSelect: false\n        });\n    };\n    RowNode.prototype.isRowPinned = function () {\n        return this.rowPinned === Constants.PINNED_TOP || this.rowPinned === Constants.PINNED_BOTTOM;\n    };\n    // to make calling code more readable, this is the same method as setSelected except it takes names parameters\n    RowNode.prototype.setSelectedParams = function (params) {\n        var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        var newValue = params.newValue === true;\n        var clearSelection = params.clearSelection === true;\n        var suppressFinishActions = params.suppressFinishActions === true;\n        var rangeSelect = params.rangeSelect === true;\n        // groupSelectsFiltered only makes sense when group selects children\n        var groupSelectsFiltered = groupSelectsChildren && (params.groupSelectsFiltered === true);\n        if (this.id === undefined) {\n            console.warn('AG Grid: cannot select node until id for node is known');\n            return 0;\n        }\n        if (this.rowPinned) {\n            console.warn('AG Grid: cannot select pinned rows');\n            return 0;\n        }\n        // if we are a footer, we don't do selection, just pass the info\n        // to the sibling (the parent of the group)\n        if (this.footer) {\n            return this.sibling.setSelectedParams(params);\n        }\n        if (rangeSelect && this.selectionService.getLastSelectedNode()) {\n            var newRowClicked = this.selectionService.getLastSelectedNode() !== this;\n            var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();\n            if (newRowClicked && allowMultiSelect) {\n                var nodesChanged = this.doRowRangeSelection(params.newValue);\n                this.selectionService.setLastSelectedNode(this);\n                return nodesChanged;\n            }\n        }\n        var updatedCount = 0;\n        // when groupSelectsFiltered, then this node may end up intermediate despite\n        // trying to set it to true / false. this group will be calculated further on\n        // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it\n        // here, otherwise the updatedCount would include it.\n        var skipThisNode = groupSelectsFiltered && this.group;\n        if (!skipThisNode) {\n            var thisNodeWasSelected = this.selectThisNode(newValue);\n            if (thisNodeWasSelected) {\n                updatedCount++;\n            }\n        }\n        if (groupSelectsChildren && this.group) {\n            updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);\n        }\n        // clear other nodes if not doing multi select\n        if (!suppressFinishActions) {\n            var clearOtherNodes = newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti());\n            if (clearOtherNodes) {\n                updatedCount += this.selectionService.clearOtherNodes(this);\n            }\n            // only if we selected something, then update groups and fire events\n            if (updatedCount > 0) {\n                this.selectionService.updateGroupsFromChildrenSelections();\n                // this is the very end of the 'action node', so we are finished all the updates,\n                // include any parent / child changes that this method caused\n                var event_1 = {\n                    type: Events.EVENT_SELECTION_CHANGED,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                };\n                this.mainEventService.dispatchEvent(event_1);\n            }\n            // so if user next does shift-select, we know where to start the selection from\n            if (newValue) {\n                this.selectionService.setLastSelectedNode(this);\n            }\n        }\n        return updatedCount;\n    };\n    // selects all rows between this node and the last selected node (or the top if this is the first selection).\n    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n    // holding down 'shift'.\n    RowNode.prototype.doRowRangeSelection = function (value) {\n        var _this = this;\n        if (value === void 0) { value = true; }\n        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        var lastSelectedNode = this.selectionService.getLastSelectedNode();\n        var nodesToSelect = this.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);\n        var updatedCount = 0;\n        nodesToSelect.forEach(function (rowNode) {\n            if (rowNode.group && groupsSelectChildren || (value === false && _this === rowNode)) {\n                return;\n            }\n            var nodeWasSelected = rowNode.selectThisNode(value);\n            if (nodeWasSelected) {\n                updatedCount++;\n            }\n        });\n        this.selectionService.updateGroupsFromChildrenSelections();\n        var event = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.mainEventService.dispatchEvent(event);\n        return updatedCount;\n    };\n    RowNode.prototype.isParentOfNode = function (potentialParent) {\n        var parentNode = this.parent;\n        while (parentNode) {\n            if (parentNode === potentialParent) {\n                return true;\n            }\n            parentNode = parentNode.parent;\n        }\n        return false;\n    };\n    RowNode.prototype.selectThisNode = function (newValue) {\n        // we only check selectable when newValue=true (ie selecting) to allow unselecting values,\n        // as selectable is dynamic, need a way to unselect rows when selectable becomes false.\n        var selectionNotAllowed = !this.selectable && newValue;\n        var selectionNotChanged = this.selected === newValue;\n        if (selectionNotAllowed || selectionNotChanged) {\n            return false;\n        }\n        this.selected = newValue;\n        if (this.eventService) {\n            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n        }\n        var event = this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED);\n        this.mainEventService.dispatchEvent(event);\n        return true;\n    };\n    RowNode.prototype.selectChildNodes = function (newValue, groupSelectsFiltered) {\n        var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;\n        if (missing(children)) {\n            return 0;\n        }\n        var updatedCount = 0;\n        for (var i = 0; i < children.length; i++) {\n            updatedCount += children[i].setSelectedParams({\n                newValue: newValue,\n                clearSelection: false,\n                suppressFinishActions: true,\n                groupSelectsFiltered: groupSelectsFiltered\n            });\n        }\n        return updatedCount;\n    };\n    RowNode.prototype.addEventListener = function (eventType, listener) {\n        if (!this.eventService) {\n            this.eventService = new EventService();\n        }\n        this.eventService.addEventListener(eventType, listener);\n    };\n    RowNode.prototype.removeEventListener = function (eventType, listener) {\n        if (!this.eventService) {\n            return;\n        }\n        this.eventService.removeEventListener(eventType, listener);\n        if (this.eventService.noRegisteredListenersExist()) {\n            this.eventService = null;\n        }\n    };\n    RowNode.prototype.onMouseEnter = function () {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));\n    };\n    RowNode.prototype.onMouseLeave = function () {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));\n    };\n    RowNode.prototype.getFirstChildOfFirstChild = function (rowGroupColumn) {\n        var currentRowNode = this;\n        var isCandidate = true;\n        var foundFirstChildPath = false;\n        var nodeToSwapIn = null;\n        // if we are hiding groups, then if we are the first child, of the first child,\n        // all the way up to the column we are interested in, then we show the group cell.\n        while (isCandidate && !foundFirstChildPath) {\n            var parentRowNode = currentRowNode.parent;\n            var firstChild = exists(parentRowNode) && currentRowNode.firstChild;\n            if (firstChild) {\n                if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n                    foundFirstChildPath = true;\n                    nodeToSwapIn = parentRowNode;\n                }\n            }\n            else {\n                isCandidate = false;\n            }\n            currentRowNode = parentRowNode;\n        }\n        return foundFirstChildPath ? nodeToSwapIn : null;\n    };\n    RowNode.prototype.isFullWidthCell = function () {\n        var isFullWidthCellFunc = this.gridOptionsWrapper.getIsFullWidthCellFunc();\n        return isFullWidthCellFunc ? isFullWidthCellFunc(this) : false;\n    };\n    RowNode.prototype.getRoute = function () {\n        if (this.key == null) {\n            return;\n        }\n        var res = [];\n        var pointer = this;\n        while (pointer.key != null) {\n            res.push(pointer.key);\n            pointer = pointer.parent;\n        }\n        return res.reverse();\n    };\n    RowNode.ID_PREFIX_ROW_GROUP = 'row-group-';\n    RowNode.ID_PREFIX_TOP_PINNED = 't-';\n    RowNode.ID_PREFIX_BOTTOM_PINNED = 'b-';\n    RowNode.OBJECT_ID_SEQUENCE = 0;\n    RowNode.EVENT_ROW_SELECTED = 'rowSelected';\n    RowNode.EVENT_DATA_CHANGED = 'dataChanged';\n    RowNode.EVENT_CELL_CHANGED = 'cellChanged';\n    RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';\n    RowNode.EVENT_MASTER_CHANGED = 'masterChanged';\n    RowNode.EVENT_MOUSE_ENTER = 'mouseEnter';\n    RowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';\n    RowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';\n    RowNode.EVENT_TOP_CHANGED = 'topChanged';\n    RowNode.EVENT_DISPLAYED_CHANGED = 'displayedChanged';\n    RowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';\n    RowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';\n    RowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';\n    RowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';\n    RowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';\n    RowNode.EVENT_HAS_CHILDREN_CHANGED = 'hasChildrenChanged';\n    RowNode.EVENT_SELECTABLE_CHANGED = 'selectableChanged';\n    RowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';\n    RowNode.EVENT_HIGHLIGHT_CHANGED = 'rowHighlightChanged';\n    RowNode.EVENT_DRAGGING_CHANGED = 'draggingChanged';\n    __decorate([\n        Autowired('eventService')\n    ], RowNode.prototype, \"mainEventService\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], RowNode.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], RowNode.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('selectionService')\n    ], RowNode.prototype, \"selectionService\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], RowNode.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], RowNode.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], RowNode.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('context')\n    ], RowNode.prototype, \"context\", void 0);\n    __decorate([\n        Autowired('valueCache')\n    ], RowNode.prototype, \"valueCache\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], RowNode.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], RowNode.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('rowNodeEventThrottle')\n    ], RowNode.prototype, \"rowNodeEventThrottle\", void 0);\n    return RowNode;\n}());\nexport { RowNode };\n"]},"metadata":{},"sourceType":"module"}