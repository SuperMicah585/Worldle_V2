{"ast":null,"code":"export const evaluateGuess = async (code, guesses, guessCounter) => {\n  let feedback = \"\";\n  let string_guess = \"\";\n\n  for (let y = 0; y <= 4; y++) {\n    string_guess = string_guess + guesses[y];\n  }\n  /*\n  const axios = require('axios');\n  \n  async function makeGetRequest() {\n  \n    let res = await axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+string_guess);\n  \n    let data = await res.data;\n    return data;\n  }\n  \n  console.log(makeGetRequest());\n  */\n\n  /*\n  function word_check(x){\n      axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+x)\n      .then(response => {\n     console.log((response.data)[0]['word']);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n  (word_check(string_guess));\n  */\n  //If character is X, then check whole word for any other of the same character. if none then turn\n  //if character is ), then check whole word for any other Green. if none return yellow, if green and count<2, then\n  //If no other X then feedback will need to not mark yellow for repeated characters in the wrong spot\n  //evaluates word\n  //need a green counter for each letter\n  //repition counter for code\n\n\n  var rep_counter = {};\n\n  for (let y = 0; y <= 4; y++) {\n    //how many green for each letter\n    var counter = 0;\n\n    if (guesses[y] === code[y]) {\n      if (guesses[y] in rep_counter) {\n        rep_counter[guesses[y]] = rep_counter[guesses[y]] + 1;\n      } else {\n        counter++;\n        rep_counter[guesses[y]] = counter;\n      }\n    }\n  }\n\n  console.log(rep_counter);\n  var rep_counters = {}; //total number of each letter\n\n  for (let y = 0; y <= 4; y++) {\n    var counter = 0;\n\n    for (let i = 0; i <= 4; i++) {\n      if (code[i] === code[y]) {\n        counter++;\n      }\n    }\n\n    rep_counters[code[y]] = counter;\n  }\n\n  const is_word = fetch('https://api.dictionaryapi.dev/api/v2/entries/en/' + string_guess) //1\n  .then(response => response.json()) //2\n  .then(word => {\n    return word[0]; //3\n  });\n  const a = await is_word;\n\n  if (a === undefined) {\n    feedback = \"this is not a word\";\n  } else {\n    for (let i = 0; i <= 4; i++) {\n      if (code[i] === guesses[i]) {\n        feedback += \"X\";\n      } else if (code.includes(guesses[i]) && (rep_counter[guesses[i]] === undefined || rep_counters[guesses[i]] < rep_counter[guesses[i]])) {\n        //error becayse a is undefined\n        feedback += \"O\";\n      } else {\n        feedback += \"-\";\n      }\n    } //checks to see if they guessed the right word\n\n\n    if (feedback === 'XXXXX') {\n      feedback = \"You Win!\";\n    } else if (guessCounter === 7) {\n      feedback = \"You Lose!\";\n    }\n  }\n\n  return feedback;\n};","map":{"version":3,"sources":["/Users/mphelps/react-app/TasQDashboard-main/src/evaluate_guess.js"],"names":["evaluateGuess","code","guesses","guessCounter","feedback","string_guess","y","rep_counter","counter","console","log","rep_counters","i","is_word","fetch","then","response","json","word","a","undefined","includes"],"mappings":"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","sourcesContent":["export const evaluateGuess = async (code, guesses, guessCounter) => {\n  let feedback = \"\";\n  let string_guess =\"\"\n\n\n\nfor (let y = 0; y <= 4; y++) {\n  string_guess=string_guess+guesses[y];\n}\n/*\nconst axios = require('axios');\n\nasync function makeGetRequest() {\n\n  let res = await axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+string_guess);\n\n  let data = await res.data;\n  return data;\n}\n\nconsole.log(makeGetRequest());\n*/\n\n\n\n\n\n\n\n\n\n\n\n/*\nfunction word_check(x){\n    axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+x)\n    .then(response => {\n   console.log((response.data)[0]['word']);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n(word_check(string_guess));\n*/\n//If character is X, then check whole word for any other of the same character. if none then turn\n//if character is ), then check whole word for any other Green. if none return yellow, if green and count<2, then\n//If no other X then feedback will need to not mark yellow for repeated characters in the wrong spot\n//evaluates word\n//need a green counter for each letter\n//repition counter for code\nvar rep_counter = {};\n\nfor (let y = 0; y <= 4; y++) { //how many green for each letter\n  var counter =0;\n    if (guesses[y] === code[y]){\n      if(guesses[y] in rep_counter){\n        rep_counter[guesses[y]] = (rep_counter[guesses[y]])+1;\n\n      }\n      else{\n        counter++;\n    rep_counter[guesses[y]] = counter;\n\n  }\n\n    }\n  }\n\nconsole.log(rep_counter);\n\nvar rep_counters = {};     //total number of each letter\n\nfor (let y = 0; y <= 4; y++) {\n  var counter =0;\n  for (let i = 0; i <= 4; i++) {\n    if (code[i] === code[y]){\n      counter ++;\n\n    }\n  }\nrep_counters[code[y]] = counter;\n\n}\n\nconst is_word = fetch('https://api.dictionaryapi.dev/api/v2/entries/en/'+string_guess) //1\n  .then((response) => response.json()) //2\n  .then((word) => {\n    return word[0]; //3\n  });\n\n\n\n  const a = await is_word;\n  if (a === undefined){\n\n\n      feedback = \"this is not a word\"\n\n  }\n  else{\n\n\n  for (let i = 0; i <= 4; i++) {\n    if (code[i] === guesses[i]) {\n      feedback += \"X\";\n    }\n    else if (code.includes(guesses[i]) && ((rep_counter[guesses[i]]) ===undefined || (rep_counters[guesses[i]] < rep_counter[guesses[i]]))) { //error becayse a is undefined\n      feedback += \"O\";\n    }\n    else{\n      feedback += \"-\";\n    }\n  }\n\n//checks to see if they guessed the right word\nif (feedback === 'XXXXX'){\n  feedback = \"You Win!\"\n\n}\nelse if(guessCounter===7){\n  feedback = \"You Lose!\"\n}\n\n}\n\n\n  return feedback;\n\n\n\n\n\n};\n"]},"metadata":{},"sourceType":"module"}