{"ast":null,"code":"var _jsxFileName = \"/Users/mphelps/react-app/TasQDashboard-main/src/components/grid/Grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { AgGridReact } from '@ag-grid-community/react';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-alpine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"id\",\n  rowDrag: true\n}, {\n  field: \"color\"\n}, {\n  field: \"value1\"\n}, {\n  field: \"value2\"\n}];\nconst rowClassRules = {\n  \"red-row\": 'data.color == \"Red\"',\n  \"green-row\": 'data.color == \"Green\"',\n  \"blue-row\": 'data.color == \"Blue\"'\n};\nconst defaultColDef = {\n  flex: 1,\n  minWidth: 100,\n  sortable: true,\n  filter: true,\n  resizable: true\n};\n\nconst Grid = () => {\n  _s();\n\n  const [leftApi, setLeftApi] = useState(null);\n  const [rightApi, setRightApi] = useState(null);\n  const [leftRowData, setLeftRowData] = useState([]);\n  const [rightRowData] = useState([]);\n  const eLeftGrid = useRef(null);\n  const eRightGrid = useRef(null);\n  const eBin = useRef(null);\n  const eBinIcon = useRef(null);\n  let rowIdSequence = 100;\n  const createDataItem = useCallback(color => {\n    const obj = {\n      id: rowIdSequence++,\n      color: color,\n      value1: Math.floor(Math.random() * 100),\n      value2: Math.floor(Math.random() * 100)\n    };\n    return obj;\n  }, [rowIdSequence]);\n  useEffect(() => {\n    const createLeftRowData = () => ['Red', 'Green', 'Blue'].map(color => createDataItem(color));\n\n    setLeftRowData(createLeftRowData());\n  }, [createDataItem]);\n\n  const getRowNodeId = data => data.id;\n\n  const addRecordToGrid = (side, data) => {\n    // if data missing or data has no it, do nothing\n    if (!data || data.id == null) {\n      return;\n    }\n\n    const api = side === 'left' ? leftApi : rightApi; // do nothing if row is already in the grid, otherwise we would have duplicates\n\n    const rowAlreadyInGrid = !!api.getRowNode(data.id);\n    let transaction;\n\n    if (rowAlreadyInGrid) {\n      console.log('not adding row to avoid duplicates in the grid');\n      return;\n    }\n\n    transaction = {\n      add: [data]\n    };\n    api.applyTransaction(transaction);\n  };\n\n  const onFactoryButtonClick = e => {\n    var button = e.currentTarget,\n        buttonColor = button.getAttribute('data-color'),\n        side = button.getAttribute('data-side'),\n        data = createDataItem(buttonColor);\n    addRecordToGrid(side, data);\n  };\n\n  const binDrop = data => {\n    // if data missing or data has no id, do nothing\n    if (!data || data.id == null) {\n      return;\n    }\n\n    var transaction = {\n      remove: [data]\n    };\n    [leftApi, rightApi].forEach(api => {\n      var rowsInGrid = !!api.getRowNode(data.id);\n\n      if (rowsInGrid) {\n        api.applyTransaction(transaction);\n      }\n    });\n  };\n\n  const addBinZone = api => {\n    const dropZone = {\n      getContainer: () => eBinIcon.current,\n      onDragEnter: () => {\n        eBin.current.style.color = 'blue';\n        eBinIcon.current.style.transform = 'scale(1.5)';\n      },\n      onDragLeave: () => {\n        eBin.current.style.color = 'black';\n        eBinIcon.current.style.transform = 'scale(1)';\n      },\n      onDragStop: params => {\n        binDrop(params.node.data);\n        eBin.current.style.color = 'black';\n        eBinIcon.current.style.transform = 'scale(1)';\n      }\n    };\n    api.addRowDropZone(dropZone);\n  };\n\n  const addGridDropZone = (side, api) => {\n    const dropSide = side === 'Left' ? 'Right' : 'Left';\n    const dropZone = {\n      getContainer: () => dropSide === 'Right' ? eRightGrid.current : eLeftGrid.current,\n      onDragStop: dragParams => addRecordToGrid(dropSide.toLowerCase(), dragParams.node.data)\n    };\n    api.addRowDropZone(dropZone);\n  };\n\n  useEffect(() => {\n    if (rightApi && leftApi) {\n      addBinZone(rightApi);\n      addBinZone(leftApi);\n      addGridDropZone('Right', rightApi);\n      addGridDropZone('Left', leftApi);\n    }\n  });\n\n  const onGridReady = (side, params) => {\n    if (side === 'Left') {\n      setLeftApi(params.api);\n    } else {\n      setRightApi(params.api);\n    }\n  };\n\n  const getAddRecordButton = (side, color) => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `factory factory-${color.toLowerCase()}`,\n    \"data-color\": color,\n    \"data-side\": side.toLowerCase(),\n    onClick: onFactoryButtonClick,\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"far fa-plus-square\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), `Add ${color}`]\n  }, `btn_${side}_${color}`, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n\n  const getInnerGridCol = side => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inner-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: ['Red', 'Green', 'Blue'].map(color => getAddRecordButton(side, color))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100%'\n      },\n      className: \"inner-col\",\n      ref: side === 'Left' ? eLeftGrid : eRightGrid,\n      children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n        defaultColDef: { ...defaultColDef\n        },\n        getRowNodeId: getRowNodeId,\n        rowClassRules: rowClassRules,\n        rowDragManaged: true,\n        suppressMoveWhenRowDragging: true,\n        animateRows: true,\n        rowData: side === 'Left' ? leftRowData : rightRowData,\n        columnDefs: [...columns],\n        onGridReady: params => onGridReady(side, params),\n        modules: AllCommunityModules\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"example-wrapper ag-theme-alpine\",\n    children: [getInnerGridCol('Left'), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner-col vertical-toolbar\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bin\",\n        ref: eBin,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"far fa-trash-alt fa-3x\",\n          ref: eBinIcon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), getInnerGridCol('Right')]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"ag0+VIdp+3zPhkKYqE69Y+5avtA=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/mphelps/react-app/TasQDashboard-main/src/components/grid/Grid.jsx"],"names":["React","useCallback","useEffect","useRef","useState","AgGridReact","AllCommunityModules","columns","field","rowDrag","rowClassRules","defaultColDef","flex","minWidth","sortable","filter","resizable","Grid","leftApi","setLeftApi","rightApi","setRightApi","leftRowData","setLeftRowData","rightRowData","eLeftGrid","eRightGrid","eBin","eBinIcon","rowIdSequence","createDataItem","color","obj","id","value1","Math","floor","random","value2","createLeftRowData","map","getRowNodeId","data","addRecordToGrid","side","api","rowAlreadyInGrid","getRowNode","transaction","console","log","add","applyTransaction","onFactoryButtonClick","e","button","currentTarget","buttonColor","getAttribute","binDrop","remove","forEach","rowsInGrid","addBinZone","dropZone","getContainer","current","onDragEnter","style","transform","onDragLeave","onDragStop","params","node","addRowDropZone","addGridDropZone","dropSide","dragParams","toLowerCase","onGridReady","getAddRecordButton","getInnerGridCol","height"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useRef, useState} from 'react';\n\nimport { AgGridReact } from '@ag-grid-community/react';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\n\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-alpine.css';\n\nconst columns = [\n    { field: \"id\", rowDrag: true },\n    { field: \"color\" },\n    { field: \"value1\" },\n    { field: \"value2\" }\n];\n\nconst rowClassRules = {\n    \"red-row\": 'data.color == \"Red\"',\n    \"green-row\": 'data.color == \"Green\"',\n    \"blue-row\": 'data.color == \"Blue\"',\n};\n\nconst defaultColDef = {\n    flex: 1,\n    minWidth: 100,\n    sortable: true,\n    filter: true,\n    resizable: true\n};\n\nconst Grid = () => {\n    const [leftApi, setLeftApi] = useState(null);\n    const [rightApi, setRightApi] = useState(null);\n    const [leftRowData, setLeftRowData] = useState([]);\n    const [rightRowData] = useState([]);\n\n    const eLeftGrid = useRef(null);\n    const eRightGrid = useRef(null);\n    const eBin = useRef(null);\n    const eBinIcon = useRef(null);\n\n    let rowIdSequence = 100;\n\n    const createDataItem = useCallback((color) => {\n        const obj = {\n            id: rowIdSequence++,\n            color: color,\n            value1: Math.floor(Math.random() * 100),\n            value2: Math.floor(Math.random() * 100)\n        };\n\n        return obj;\n    }, [rowIdSequence]);\n\n    useEffect(() => {\n        const createLeftRowData = () => ['Red', 'Green', 'Blue'].map((color) => createDataItem(color))\n        setLeftRowData(createLeftRowData());\n    }, [createDataItem]);\n\n\n    const getRowNodeId = data => data.id\n\n    const addRecordToGrid = (side, data) => {\n        // if data missing or data has no it, do nothing\n        if (!data || data.id == null) { return; }\n\n        const api = side === 'left' ? leftApi : rightApi;\n        // do nothing if row is already in the grid, otherwise we would have duplicates\n        const rowAlreadyInGrid = !!api.getRowNode(data.id);\n        let transaction;\n\n        if (rowAlreadyInGrid) {\n            console.log('not adding row to avoid duplicates in the grid');\n            return;\n        }\n\n        transaction = {\n            add: [data]\n        };\n\n        api.applyTransaction(transaction);\n    };\n\n    const onFactoryButtonClick = e => {\n        var button = e.currentTarget,\n            buttonColor = button.getAttribute('data-color'),\n            side = button.getAttribute('data-side'),\n            data = createDataItem(buttonColor);\n\n        addRecordToGrid(side, data);\n    };\n\n    const binDrop = data => {\n        // if data missing or data has no id, do nothing\n        if (!data || data.id == null) { return; }\n\n        var transaction = {\n            remove: [data]\n        };\n\n        [leftApi, rightApi].forEach((api) => {\n            var rowsInGrid = !!api.getRowNode(data.id);\n\n            if (rowsInGrid) {\n                api.applyTransaction(transaction);\n            }\n        });\n    };\n\n    const addBinZone = api => {\n        const dropZone = {\n            getContainer: () => eBinIcon.current,\n            onDragEnter: () => {\n                eBin.current.style.color = 'blue';\n                eBinIcon.current.style.transform = 'scale(1.5)';\n            },\n            onDragLeave: () => {\n                eBin.current.style.color = 'black';\n                eBinIcon.current.style.transform = 'scale(1)';\n            },\n            onDragStop: (params) => {\n                binDrop(params.node.data);\n                eBin.current.style.color = 'black';\n                eBinIcon.current.style.transform = 'scale(1)';\n            }\n        };\n\n        api.addRowDropZone(dropZone);\n    };\n\n    const addGridDropZone = (side, api) => {\n        const dropSide = side === 'Left' ? 'Right' : 'Left';\n        const dropZone = {\n            getContainer: () => dropSide === 'Right' ? eRightGrid.current : eLeftGrid.current,\n            onDragStop: (dragParams) => addRecordToGrid(dropSide.toLowerCase(), dragParams.node.data)\n        };\n\n        api.addRowDropZone(dropZone);\n    };\n\n    useEffect(() => {\n        if (rightApi && leftApi) {\n            addBinZone(rightApi);\n            addBinZone(leftApi);\n            addGridDropZone('Right', rightApi);\n            addGridDropZone('Left', leftApi);\n        }\n    })\n\n    const onGridReady = (side, params) => {\n        if (side === 'Left') {\n            setLeftApi(params.api);\n        } else {\n            setRightApi(params.api);\n        }\n    }\n\n    const getAddRecordButton = (side, color) => (\n        <button\n            key={`btn_${side}_${color}`}\n            className={`factory factory-${color.toLowerCase()}`}\n            data-color={color}\n            data-side={side.toLowerCase()}\n            onClick={onFactoryButtonClick}\n            >\n            <i className=\"far fa-plus-square\"></i>{`Add ${color}`}\n        </button>\n    )\n\n    const getInnerGridCol = side => (\n        <div className=\"inner-col\">\n            <div className=\"toolbar\">\n                {['Red', 'Green', 'Blue'].map(color => getAddRecordButton(side, color))}\n            </div>\n            <div style={{height: '100%'}} className=\"inner-col\" ref={side === 'Left' ? eLeftGrid : eRightGrid}>\n                <AgGridReact\n                    defaultColDef={{...defaultColDef}}\n                    getRowNodeId={getRowNodeId}\n                    rowClassRules={rowClassRules}\n                    rowDragManaged={true}\n                    suppressMoveWhenRowDragging={true}\n                    animateRows={true}\n                    rowData={side === 'Left' ? leftRowData: rightRowData}\n                    columnDefs={[...columns]}\n                    onGridReady={params => onGridReady(side, params)}\n                    modules={AllCommunityModules}\n                />\n            </div>\n        </div>\n    )\n\n    return (\n        <div className=\"example-wrapper ag-theme-alpine\">\n            { getInnerGridCol('Left') }\n            <div className=\"inner-col vertical-toolbar\">\n                <span className=\"bin\" ref={eBin}>\n                    <i className=\"far fa-trash-alt fa-3x\" ref={eBinIcon}></i>\n                </span>\n            </div>\n            { getInnerGridCol('Right') }\n        </div>\n    );\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}