{"ast":null,"code":"var _jsxFileName = \"/Users/mphelps/react-app/TasQDashboard-main/src/components/grid/Grid.jsx\";\nimport React, { Component } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rowData = [{\n  Task: \"Toyota\",\n  Worker: \"Celica\",\n  start_time: 3500,\n  priority: 'high'\n}, {\n  Task: \"Ford\",\n  Worker: \"Mondeo\",\n  start_time: 32000,\n  priority: 'med'\n}, {\n  Task: \"Porsche\",\n  Worker: \"Boxter\",\n  start_time: 72000,\n  priority: 'low'\n}];\nconst rowClassRules = {\n  'rag-green': 'data.priority = low',\n  'rag-yellow': 'data.priority = med',\n  'rag-red': 'data.priority = high'\n};\n\nclass mainGrid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getSelectedRowData = () => {\n      let selectedNodes = this.gridApi.getSelectedNodes();\n      let selectedData = selectedNodes.map(node => node.data); //Change this alert to post a delete/edit request to the api\n\n      alert(`Selected Nodes:\\n${JSON.stringify(selectedData)}`);\n      console.log(\"hi\");\n      return selectedData;\n    };\n\n    this.onGridReady = params => {\n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi; // Call the API and return the lists of tasks\n\n      const httpRequest = new XMLHttpRequest();\n\n      const updateData = data => {\n        this.setState({\n          rowData: data\n        });\n      };\n\n      httpRequest.open('GET', 'https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json');\n      httpRequest.send();\n\n      httpRequest.onreadystatechange = () => {\n        if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n          updateData(JSON.parse(httpRequest.responseText));\n        }\n      };\n    };\n\n    this.state = {\n      columnDefs: [{\n        field: 'athlete',\n        minWidth: 150\n      }, {\n        field: 'age',\n        maxWidth: 90\n      }, {\n        field: 'country',\n        minWidth: 150\n      }, {\n        field: 'year',\n        maxWidth: 90\n      }, {\n        field: 'date',\n        minWidth: 150\n      }, {\n        field: 'sport',\n        minWidth: 150\n      }, {\n        field: 'gold'\n      }, {\n        field: 'silver'\n      }, {\n        field: 'bronze'\n      }, {\n        field: 'total'\n      }],\n      defaultColDef: {\n        flex: 1,\n        minWidth: 100\n      },\n      rowData: []\n    };\n  } //This returns the data that has been selected\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '95vw',\n        height: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.getSelectedRowData,\n        style: {\n          margin: 10\n        },\n        children: \"Get Selected Nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"myGrid\",\n        style: {\n          height: '100%',\n          width: '100%'\n        },\n        className: \"ag-theme-alpine\",\n        children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n          columnDefs: this.state.columnDefs,\n          defaultColDef: this.state.defaultColDef,\n          onGridReady: this.onGridReady,\n          rowData: this.state.rowData,\n          rowSelection: \"multiple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default mainGrid;","map":{"version":3,"sources":["/Users/mphelps/react-app/TasQDashboard-main/src/components/grid/Grid.jsx"],"names":["React","Component","AgGridColumn","AgGridReact","rowData","Task","Worker","start_time","priority","rowClassRules","mainGrid","constructor","props","getSelectedRowData","selectedNodes","gridApi","getSelectedNodes","selectedData","map","node","data","alert","JSON","stringify","console","log","onGridReady","params","api","gridColumnApi","columnApi","httpRequest","XMLHttpRequest","updateData","setState","open","send","onreadystatechange","readyState","status","parse","responseText","state","columnDefs","field","minWidth","maxWidth","defaultColDef","flex","render","width","height","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,eAAxC;AACA,OAAO,2CAAP;AACA,OAAO,mDAAP;;AAEI,MAAMC,OAAO,GAAG,CACZ;AAACC,EAAAA,IAAI,EAAE,QAAP;AAAiBC,EAAAA,MAAM,EAAE,QAAzB;AAAmCC,EAAAA,UAAU,EAAE,IAA/C;AAAqDC,EAAAA,QAAQ,EAAE;AAA/D,CADY,EAEZ;AAACH,EAAAA,IAAI,EAAE,MAAP;AAAeC,EAAAA,MAAM,EAAE,QAAvB;AAAiCC,EAAAA,UAAU,EAAE,KAA7C;AAAoDC,EAAAA,QAAQ,EAAE;AAA9D,CAFY,EAGZ;AAACH,EAAAA,IAAI,EAAE,SAAP;AAAkBC,EAAAA,MAAM,EAAE,QAA1B;AAAoCC,EAAAA,UAAU,EAAE,KAAhD;AAAuDC,EAAAA,QAAQ,EAAE;AAAjE,CAHY,CAAhB;AAMA,MAAMC,aAAa,GAAG;AAClB,eAAa,qBADK;AAElB,gBAAc,qBAFI;AAGlB,aAAW;AAHO,CAAtB;;AASJ,MAAMC,QAAN,SAAuBT,SAAvB,CAAiC;AAC7BU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA0CjBC,kBA1CiB,GA0CI,MAAM;AACzB,UAAIC,aAAa,GAAG,KAAKC,OAAL,CAAaC,gBAAb,EAApB;AACA,UAAIC,YAAY,GAAGH,aAAa,CAACI,GAAd,CAAkBC,IAAI,IAAIA,IAAI,CAACC,IAA/B,CAAnB,CAFyB,CAGzB;;AACAC,MAAAA,KAAK,CAAE,oBAAmBC,IAAI,CAACC,SAAL,CAAeN,YAAf,CAA6B,EAAlD,CAAL;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,aAAOR,YAAP;AACD,KAjDgB;;AAAA,SAmDjBS,WAnDiB,GAmDHC,MAAM,IAAI;AACtB,WAAKZ,OAAL,GAAeY,MAAM,CAACC,GAAtB;AACA,WAAKC,aAAL,GAAqBF,MAAM,CAACG,SAA5B,CAFsB,CAGtB;;AACA,YAAMC,WAAW,GAAG,IAAIC,cAAJ,EAApB;;AACA,YAAMC,UAAU,GAAGb,IAAI,IAAI;AACzB,aAAKc,QAAL,CAAc;AAAE9B,UAAAA,OAAO,EAAEgB;AAAX,SAAd;AACD,OAFD;;AAIAW,MAAAA,WAAW,CAACI,IAAZ,CACE,KADF,EAEE,kHAFF;AAIAJ,MAAAA,WAAW,CAACK,IAAZ;;AACAL,MAAAA,WAAW,CAACM,kBAAZ,GAAiC,MAAM;AACrC,YAAIN,WAAW,CAACO,UAAZ,KAA2B,CAA3B,IAAgCP,WAAW,CAACQ,MAAZ,KAAuB,GAA3D,EAAgE;AAC9DN,UAAAA,UAAU,CAACX,IAAI,CAACkB,KAAL,CAAWT,WAAW,CAACU,YAAvB,CAAD,CAAV;AACD;AACF,OAJD;AAKD,KAtEgB;;AAGf,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,CACV;AACEC,QAAAA,KAAK,EAAE,SADT;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OADU,EAKV;AACED,QAAAA,KAAK,EAAE,KADT;AAEEE,QAAAA,QAAQ,EAAE;AAFZ,OALU,EASV;AACEF,QAAAA,KAAK,EAAE,SADT;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OATU,EAaV;AACED,QAAAA,KAAK,EAAE,MADT;AAEEE,QAAAA,QAAQ,EAAE;AAFZ,OAbU,EAiBV;AACEF,QAAAA,KAAK,EAAE,MADT;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OAjBU,EAqBV;AACED,QAAAA,KAAK,EAAE,OADT;AAEEC,QAAAA,QAAQ,EAAE;AAFZ,OArBU,EAyBV;AAAED,QAAAA,KAAK,EAAE;AAAT,OAzBU,EA0BV;AAAEA,QAAAA,KAAK,EAAE;AAAT,OA1BU,EA2BV;AAAEA,QAAAA,KAAK,EAAE;AAAT,OA3BU,EA4BV;AAAEA,QAAAA,KAAK,EAAE;AAAT,OA5BU,CADD;AA+BXG,MAAAA,aAAa,EAAE;AACbC,QAAAA,IAAI,EAAE,CADO;AAEbH,QAAAA,QAAQ,EAAE;AAFG,OA/BJ;AAmCXzC,MAAAA,OAAO,EAAE;AAnCE,KAAb;AAqCD,GAzC0B,CA0C7B;;;AA+BE6C,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAAZ;AAAA,8BACE;AACE,QAAA,OAAO,EAAE,KAAKtC,kBADhB;AAEE,QAAA,KAAK,EAAE;AAACuC,UAAAA,MAAM,EAAE;AAAT,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AACE,QAAA,EAAE,EAAC,QADL;AAEE,QAAA,KAAK,EAAE;AACLD,UAAAA,MAAM,EAAE,MADH;AAELD,UAAAA,KAAK,EAAE;AAFF,SAFT;AAME,QAAA,SAAS,EAAC,iBANZ;AAAA,+BAQE,QAAC,WAAD;AACE,UAAA,UAAU,EAAE,KAAKR,KAAL,CAAWC,UADzB;AAEE,UAAA,aAAa,EAAE,KAAKD,KAAL,CAAWK,aAF5B;AAGE,UAAA,WAAW,EAAE,KAAKrB,WAHpB;AAIE,UAAA,OAAO,EAAE,KAAKgB,KAAL,CAAWtC,OAJtB;AAKE,UAAA,YAAY,EAAC;AALf;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAwBD;;AAlG0B;;AAqGjC,eAAeM,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport {AgGridColumn, AgGridReact} from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n    const rowData = [\n        {Task: \"Toyota\", Worker: \"Celica\", start_time: 3500, priority: 'high'},\n        {Task: \"Ford\", Worker: \"Mondeo\", start_time: 32000, priority: 'med'},\n        {Task: \"Porsche\", Worker: \"Boxter\", start_time: 72000, priority: 'low'}\n    ];\n\n    const rowClassRules = {\n        'rag-green': 'data.priority = low',\n        'rag-yellow': 'data.priority = med',\n        'rag-red': 'data.priority = high',\n    };\n\n\n\n\nclass mainGrid extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n          columnDefs: [\n            {\n              field: 'athlete',\n              minWidth: 150,\n            },\n            {\n              field: 'age',\n              maxWidth: 90,\n            },\n            {\n              field: 'country',\n              minWidth: 150,\n            },\n            {\n              field: 'year',\n              maxWidth: 90,\n            },\n            {\n              field: 'date',\n              minWidth: 150,\n            },\n            {\n              field: 'sport',\n              minWidth: 150,\n            },\n            { field: 'gold' },\n            { field: 'silver' },\n            { field: 'bronze' },\n            { field: 'total' },\n          ],\n          defaultColDef: {\n            flex: 1,\n            minWidth: 100,\n          },\n          rowData: [],\n        };\n      }\n    //This returns the data that has been selected\n      getSelectedRowData = () => {\n        let selectedNodes = this.gridApi.getSelectedNodes();\n        let selectedData = selectedNodes.map(node => node.data);\n        //Change this alert to post a delete/edit request to the api\n        alert(`Selected Nodes:\\n${JSON.stringify(selectedData)}`);\n        console.log(\"hi\");\n        return selectedData;\n      };\n\n      onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n        // Call the API and return the lists of tasks\n        const httpRequest = new XMLHttpRequest();\n        const updateData = data => {\n          this.setState({ rowData: data });\n        };\n\n        httpRequest.open(\n          'GET',\n          'https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json'\n        );\n        httpRequest.send();\n        httpRequest.onreadystatechange = () => {\n          if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n            updateData(JSON.parse(httpRequest.responseText));\n          }\n        };\n      };\n\n      render() {\n        return (\n          <div style={{ width: '95vw', height: '100vh' }}>\n            <button\n              onClick={this.getSelectedRowData}\n              style={{margin: 10}}\n              >Get Selected Nodes</button>\n            <div\n              id=\"myGrid\"\n              style={{\n                height: '100%',\n                width: '100%',\n              }}\n              className=\"ag-theme-alpine\"\n            >\n              <AgGridReact\n                columnDefs={this.state.columnDefs}\n                defaultColDef={this.state.defaultColDef}\n                onGridReady={this.onGridReady}\n                rowData={this.state.rowData}\n                rowSelection=\"multiple\"\n              />\n            </div>\n          </div>\n        );\n      }\n    }\n\nexport default mainGrid;\n"]},"metadata":{},"sourceType":"module"}