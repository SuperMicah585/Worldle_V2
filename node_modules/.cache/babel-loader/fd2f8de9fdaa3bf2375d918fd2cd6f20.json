{"ast":null,"code":"import axios from 'axios';\nexport const evaluateGuess = (code, guesses, guessCounter) => {\n  let feedback = \"\";\n  let string_guess = \"\";\n  let is_word = \"\";\n\n  for (let y = 0; y <= 4; y++) {\n    string_guess = string_guess + guesses[y];\n  }\n\n  function word_check(x) {\n    axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/' + x).then(response => {\n      console.log(response.data[0]['word']);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  word_check(string_guess); //If character is X, then check whole word for any other of the same character. if none then turn\n  //if character is ), then check whole word for any other Green. if none return yellow, if green and count<2, then\n  //If no other X then feedback will need to not mark yellow for repeated characters in the wrong spot\n  //evaluates word\n  //need a green counter for each letter\n  //repition counter for code\n\n  var rep_counter = {};\n\n  for (let y = 0; y <= 4; y++) {\n    //how many green for each letter\n    var counter = 0;\n\n    if (guesses[y] === code[y]) {\n      if (guesses[y] in rep_counter) {\n        rep_counter[guesses[y]] = rep_counter[guesses[y]] + 1;\n      } else {\n        counter++;\n        rep_counter[guesses[y]] = counter;\n      }\n    }\n  }\n\n  console.log(rep_counter);\n  var rep_counters = {}; //total number of each letter\n\n  for (let y = 0; y <= 4; y++) {\n    var counter = 0;\n\n    for (let i = 0; i <= 4; i++) {\n      if (code[i] === code[y]) {\n        counter++;\n      }\n    }\n\n    rep_counters[code[y]] = counter;\n  }\n\n  if (word_check(string_guess) === string_guess) {\n    for (let i = 0; i <= 4; i++) {\n      if (code[i] === guesses[i]) {\n        feedback += \"X\";\n      } else if (code.includes(guesses[i]) && (rep_counter[guesses[i]] == undefined || rep_counter[guesses[i]] < rep_counter[guesses[i]])) {\n        //error becayse a is undefined\n        feedback += \"O\";\n      } else {\n        feedback += \"-\";\n      }\n    } //checks to see if they guessed the right word\n\n\n    if (feedback === 'XXXXX') {\n      feedback = \"You Win!\";\n    } else if (guessCounter === 7) {\n      feedback = \"You Lose!\";\n    }\n  } else {\n    feedback = \"this is not a word\";\n  }\n\n  return feedback;\n};","map":{"version":3,"sources":["/Users/mphelps/react-app/TasQDashboard-main/src/evaluate_guess.js"],"names":["axios","evaluateGuess","code","guesses","guessCounter","feedback","string_guess","is_word","y","word_check","x","get","then","response","console","log","data","catch","error","rep_counter","counter","rep_counters","i","includes","undefined"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport const evaluateGuess = (code, guesses, guessCounter) => {\n  let feedback = \"\";\n  let string_guess =\"\"\n  let is_word=\"\"\n\nfor (let y = 0; y <= 4; y++) {\n  string_guess=string_guess+guesses[y];\n}\n\n\nfunction word_check(x){\n    axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+x)\n    .then(response => {\n   console.log((response.data)[0]['word']);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n(word_check(string_guess));\n\n//If character is X, then check whole word for any other of the same character. if none then turn\n//if character is ), then check whole word for any other Green. if none return yellow, if green and count<2, then\n//If no other X then feedback will need to not mark yellow for repeated characters in the wrong spot\n//evaluates word\n//need a green counter for each letter\n//repition counter for code\nvar rep_counter = {};\n\nfor (let y = 0; y <= 4; y++) { //how many green for each letter\n  var counter =0;\n    if (guesses[y] === code[y]){\n      if(guesses[y] in rep_counter){\n        rep_counter[guesses[y]] = (rep_counter[guesses[y]])+1;\n\n      }\n      else{\n        counter++;\n    rep_counter[guesses[y]] = counter;\n\n  }\n\n    }\n  }\n\nconsole.log(rep_counter);\n\nvar rep_counters = {};     //total number of each letter\n\nfor (let y = 0; y <= 4; y++) {\n  var counter =0;\n  for (let i = 0; i <= 4; i++) {\n    if (code[i] === code[y]){\n      counter ++;\n\n    }\n  }\nrep_counters[code[y]] = counter;\n\n}\nif (word_check(string_guess) ===string_guess){\n\n\n  for (let i = 0; i <= 4; i++) {\n    if (code[i] === guesses[i]) {\n      feedback += \"X\";\n    }\n    else if (code.includes(guesses[i]) && ((rep_counter[guesses[i]]) ==undefined || (rep_counter[guesses[i]] < rep_counter[guesses[i]]))) { //error becayse a is undefined\n      feedback += \"O\";\n    }\n    else{\n      feedback += \"-\";\n    }\n  }\n\n//checks to see if they guessed the right word\nif (feedback === 'XXXXX'){\n  feedback = \"You Win!\"\n\n}\nelse if(guessCounter===7){\n  feedback = \"You Lose!\"\n}\n}\nelse{\n  feedback = \"this is not a word\"\n}\n\n  return feedback;\n};\n"]},"metadata":{},"sourceType":"module"}