{"ast":null,"code":"export const evaluateGuess = async (code, guesses, guessCounter) => {\n  let feedback = \"\";\n  let string_guess = \"\";\n  let codeCopy = [];\n  let guessesCopy = [];\n  let stringCopy = \"\";\n  for (let y = 0; y <= 4; y++) {\n    string_guess = string_guess + guesses[y];\n  }\n\n  //copies\n  for (let y = 0; y <= 4; y++) {\n    codeCopy[y] = code[y];\n  }\n  for (let y = 0; y <= 4; y++) {\n    guessesCopy[y] = guesses[y];\n  }\n  //----created copy of arays\n\n  for (let y = 0; y <= 4; y++) {\n    if (codeCopy[y] === guessesCopy[y]) {\n      codeCopy[y] = null;\n      guessesCopy[y] = '!'; //order matters so have to set code to null and guesses to green\n    }\n  }\n  for (let y = 0; y <= 4; y++) {\n    for (let i = 0; i <= 4; i++) {\n      if (guessesCopy[i] === codeCopy[y]) {\n        codeCopy[y] = null; //similiar to above, but indexes dont have to match + greens have already been filtered\n        guessesCopy[i] = '@';\n      }\n    }\n  }\n  console.log(guessesCopy);\n  console.log(codeCopy);\n  const is_word = fetch('https://api.dictionaryapi.dev/api/v2/entries/en/' + string_guess) //1\n  .then(response => response.json()) //2\n  .then(word => {\n    return word[0]; //3\n  });\n  const a = await is_word;\n  if (a === undefined) {\n    feedback = \"this is not a word\";\n  } else {\n    for (let i = 0; i <= 4; i++) {\n      if (guessesCopy[i] === '!') {\n        feedback += \"!\";\n      } else if (guessesCopy[i] === \"@\") {\n        //error becayse a is undefined\n        feedback += \"@\";\n      } else {\n        feedback += \"-\";\n      }\n    }\n\n    //checks to see if they guessed the right word\n    if (feedback === '!!!!!') {\n      feedback = \"You Win!\";\n    } else if (guessCounter === 7) {\n      feedback = \"You Lose!\";\n    }\n  }\n  return feedback;\n};","map":{"version":3,"names":["evaluateGuess","code","guesses","guessCounter","feedback","string_guess","codeCopy","guessesCopy","stringCopy","y","i","console","log","is_word","fetch","then","response","json","word","a","undefined"],"sources":["/Users/mphelps/react-app/Worldle_V2/src/evaluate_guess.js"],"sourcesContent":["export const evaluateGuess = async (code, guesses, guessCounter) => {\n  let feedback = \"\";\n  let string_guess =\"\"\n  let codeCopy = [];\n  let guessesCopy = [];\nlet stringCopy =\"\"\n\n\nfor (let y = 0; y <= 4; y++) {\n  string_guess=string_guess+guesses[y];\n}\n\n\n//copies\nfor (let y = 0; y <= 4; y++) {\n  codeCopy[y] =code[y];\n}\n\nfor (let y = 0; y <= 4; y++) {\n  guessesCopy[y] =guesses[y];\n}\n//----created copy of arays\n\nfor (let y = 0; y <= 4; y++) {\n  if(codeCopy[y] === guessesCopy[y]){\n    codeCopy[y] = null;\n    guessesCopy[y] ='!';   //order matters so have to set code to null and guesses to green\n  }\n}\n\nfor (let y = 0; y <= 4; y++) {\n    for (let i = 0; i <= 4; i++) {\n      if (guessesCopy[i] === codeCopy[y]){\n        codeCopy[y] = null;          //similiar to above, but indexes dont have to match + greens have already been filtered\n        guessesCopy[i] ='@';\n      }\n    }\n  }\n\n\n\n\nconsole.log(guessesCopy);\nconsole.log(codeCopy);\n\n\n\nconst is_word = fetch('https://api.dictionaryapi.dev/api/v2/entries/en/'+string_guess) //1\n  .then((response) => response.json()) //2\n  .then((word) => {\n    return word[0]; //3\n  });\n\n\n\n  const a = await is_word;\n  if (a === undefined){\n\n\n      feedback = \"this is not a word\"\n\n  }\n  else{\n\n\n  for (let i = 0; i <= 4; i++) {\n    if (guessesCopy[i] === '!') {\n      feedback += \"!\";\n    }\n    else if (guessesCopy[i] === \"@\") { //error becayse a is undefined\n      feedback += \"@\";\n    }\n    else{\n      feedback += \"-\";\n    }\n  }\n\n//checks to see if they guessed the right word\nif (feedback === '!!!!!'){\n  feedback = \"You Win!\"\n\n}\nelse if(guessCounter===7){\n  feedback = \"You Lose!\"\n}\n\n}\n\n\n  return feedback;\n\n\n\n\n\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}