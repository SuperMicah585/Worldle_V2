{"ast":null,"code":"import axios from 'axios';\nimport React, { useEffect, useState } from \"react\";\nexport const EvaluateGuess = (code, guesses, guessCounter) => {\n  var _s = $RefreshSig$();\n\n  let feedback = \"\";\n  let string_guess = \"\";\n\n  for (let y = 0; y <= 4; y++) {\n    string_guess = string_guess + guesses[y];\n  }\n\n  function word_check(x) {\n    _s();\n\n    const [word, setWord] = useState(0);\n    axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/' + x).then(response => {\n      setWord(response.data[0]['word']);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  _s(word_check, \"c/gwgu5MRJkcwd0CW8iEluwtVNM=\");\n\n  word_check(string_guess); //If character is X, then check whole word for any other of the same character. if none then turn\n  //if character is ), then check whole word for any other Green. if none return yellow, if green and count<2, then\n  //If no other X then feedback will need to not mark yellow for repeated characters in the wrong spot\n  //evaluates word\n  //need a green counter for each letter\n  //repition counter for code\n\n  var rep_counter = {};\n\n  for (let y = 0; y <= 4; y++) {\n    //how many green for each letter\n    var counter = 0;\n\n    if (guesses[y] === code[y]) {\n      if (guesses[y] in rep_counter) {\n        rep_counter[guesses[y]] = rep_counter[guesses[y]] + 1;\n      } else {\n        counter++;\n        rep_counter[guesses[y]] = counter;\n      }\n    }\n  }\n\n  console.log(rep_counter);\n  var rep_counters = {}; //total number of each letter\n\n  for (let y = 0; y <= 4; y++) {\n    var counter = 0;\n\n    for (let i = 0; i <= 4; i++) {\n      if (code[i] === code[y]) {\n        counter++;\n      }\n    }\n\n    rep_counters[code[y]] = counter;\n  }\n\n  if (\"word\" === string_guess) {\n    for (let i = 0; i <= 4; i++) {\n      if (code[i] === guesses[i]) {\n        feedback += \"X\";\n      } else if (code.includes(guesses[i]) && (rep_counter[guesses[i]] == undefined || rep_counter[guesses[i]] < rep_counter[guesses[i]])) {\n        //error becayse a is undefined\n        feedback += \"O\";\n      } else {\n        feedback += \"-\";\n      }\n    } //checks to see if they guessed the right word\n\n\n    if (feedback === 'XXXXX') {\n      feedback = \"You Win!\";\n    } else if (guessCounter === 7) {\n      feedback = \"You Lose!\";\n    }\n  } else {\n    feedback = \"this is not a word\";\n  }\n\n  return feedback;\n};\n_c = EvaluateGuess;\n\nvar _c;\n\n$RefreshReg$(_c, \"EvaluateGuess\");","map":{"version":3,"sources":["/Users/mphelps/react-app/TasQDashboard-main/src/evaluate_guess.js"],"names":["axios","React","useEffect","useState","EvaluateGuess","code","guesses","guessCounter","feedback","string_guess","y","word_check","x","word","setWord","get","then","response","data","catch","error","console","log","rep_counter","counter","rep_counters","i","includes","undefined"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useState } from \"react\";\n\nexport const EvaluateGuess = (code, guesses, guessCounter) => {\n  let feedback = \"\";\n  let string_guess =\"\"\n\n\nfor (let y = 0; y <= 4; y++) {\n  string_guess=string_guess+guesses[y];\n}\n\n\n\n\n\nfunction word_check(x){\n  const [word, setWord] = useState(0);\n    axios.get('https://api.dictionaryapi.dev/api/v2/entries/en/'+x)\n    .then(response => {\n   setWord((response.data)[0]['word']);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n}\n(word_check(string_guess));\n\n//If character is X, then check whole word for any other of the same character. if none then turn\n//if character is ), then check whole word for any other Green. if none return yellow, if green and count<2, then\n//If no other X then feedback will need to not mark yellow for repeated characters in the wrong spot\n//evaluates word\n//need a green counter for each letter\n//repition counter for code\nvar rep_counter = {};\n\nfor (let y = 0; y <= 4; y++) { //how many green for each letter\n  var counter =0;\n    if (guesses[y] === code[y]){\n      if(guesses[y] in rep_counter){\n        rep_counter[guesses[y]] = (rep_counter[guesses[y]])+1;\n\n      }\n      else{\n        counter++;\n    rep_counter[guesses[y]] = counter;\n\n  }\n\n    }\n  }\n\nconsole.log(rep_counter);\n\nvar rep_counters = {};     //total number of each letter\n\nfor (let y = 0; y <= 4; y++) {\n  var counter =0;\n  for (let i = 0; i <= 4; i++) {\n    if (code[i] === code[y]){\n      counter ++;\n\n    }\n  }\nrep_counters[code[y]] = counter;\n\n}\n\n\nif (\"word\" === string_guess){\n  for (let i = 0; i <= 4; i++) {\n    if (code[i] === guesses[i]) {\n      feedback += \"X\";\n    }\n    else if (code.includes(guesses[i]) && ((rep_counter[guesses[i]]) ==undefined || (rep_counter[guesses[i]] < rep_counter[guesses[i]]))) { //error becayse a is undefined\n      feedback += \"O\";\n    }\n    else{\n      feedback += \"-\";\n    }\n  }\n\n//checks to see if they guessed the right word\nif (feedback === 'XXXXX'){\n  feedback = \"You Win!\"\n\n}\nelse if(guessCounter===7){\n  feedback = \"You Lose!\"\n}\n}\nelse{\n  feedback = \"this is not a word\"\n}\n\n\n\n  return feedback;\n};\n"]},"metadata":{},"sourceType":"module"}